<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moon&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-30T15:20:10.256Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>moon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>格雷编码</title>
    <link href="http://yoursite.com/2019/09/30/%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2019/09/30/格雷编码/</id>
    <published>2019-09-30T15:15:00.000Z</published>
    <updated>2019-09-30T15:20:10.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格雷编码"><a href="#格雷编码" class="headerlink" title="格雷编码"></a>格雷编码</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>回溯算法</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/gray-code/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/gray-code/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://baike.baidu.com/item/%E6%A0%BC%E9%9B%B7%E7%A0%81" target="_blank" rel="noopener">格雷编码</a>是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。</p><p>给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。</p><p><strong>示例1：</strong></p><blockquote><p>输入: 2<br>输出: [0,1,3,2]<br>解释:<br>00 - 0<br>01 - 1<br>11 - 3<br>10 - 2</p><p>对于给定的 n，其格雷编码序列并不唯一。<br>例如，[0,2,3,1] 也是一个有效的格雷编码序列。</p><p>00 - 0<br>10 - 2<br>11 - 3<br>01 - 1</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: 0<br>输出: [0]<br>解释: 我们定义格雷编码序列必须以 0 开头。<br>     给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。<br>     因此，当 n = 0 时，其格雷编码序列为 [0]。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题主要要理解题目信息，什么是格雷码，这个可以参看<a href="https://baike.baidu.com/item/%E6%A0%BC%E9%9B%B7%E7%A0%81" target="_blank" rel="noopener">百度百科</a>的介绍。关键得看看怎么生成格雷码，主要生成规则如下：一位格雷码为<code>[0, 1]</code>，两位格雷码为一位格雷码依次前缀加0，再将一位格雷码反向依次前缀加1，即<code>[00, 01, 10, 11]</code>，后面规则相同，总是前一位的格雷码正序前缀加0，反序前缀加1即可以得到当前为的格雷码。</p><p>由于正序是前缀加0，这体现在十进制中相当于没有变化，所以正序前面加0的过程可以省掉；而反序前缀加1的过程，难点在于此时的前缀1是当前位的二进制位数加1的数，而最终需要转换为十进制，我采用移位的方法来实现此过程，当前多少位，就对1左移多少位，再与倒序的前一位格雷码依次相加即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grayCode</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(len(res)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                res.append((<span class="number">1</span> &lt;&lt; (i<span class="number">-1</span>)) + res[index])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Hfd05edbb56a9427197898933d8147990p.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题难点在于理解格雷码这个新的概念，以及相关实现方法的关键点部分。上述代码是最终版，比较简洁，在此之前还写过一版，也可以通过，但是代码冗余部分较多，这里贴一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grayCode</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        temp = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        res = temp.copy()</span><br><span class="line">        c = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">while</span> c &lt;= n:</span><br><span class="line">            res.clear()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">                res.append(i)</span><br><span class="line">            temp.reverse()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">                res.append(<span class="number">2</span> ** (c<span class="number">-1</span>) + i)</span><br><span class="line">            temp = res.copy()</span><br><span class="line">            c += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;格雷编码&quot;&gt;&lt;a href=&quot;#格雷编码&quot; class=&quot;headerlink&quot; title=&quot;格雷编码&quot;&gt;&lt;/a&gt;格雷编码&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;回溯算法&lt;/strong&gt;的一道题，难度为&lt;strong&gt;
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="回溯算法" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>全排列</title>
    <link href="http://yoursite.com/2019/09/30/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <id>http://yoursite.com/2019/09/30/全排列/</id>
    <published>2019-09-30T12:18:00.000Z</published>
    <updated>2019-09-30T12:20:37.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>回溯算法</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p><p><strong>示例：</strong></p><blockquote><p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>主要运用回溯法，大致就是模拟人去排列的过程，进行深度优先遍历，然后回溯等等，可以参考下图：</p><p><img src="https://ae01.alicdn.com/kf/H3b684504b8244593af19c3e17529f90eI.png" alt="题图"></p><p><em>图来自下述连接的大佬题解</em></p><p>具体讲解过程可以参考<a href="https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/" target="_blank" rel="noopener">大佬题解</a>，我对递归这块理解的不太好，所以回溯法也只是勉强理解，以后会加强这方面的学习。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># 标识某个数是否已经使用了</span></span><br><span class="line">        used = [<span class="literal">False</span>] * len(nums)</span><br><span class="line">        res = []</span><br><span class="line">        self.__dfs(nums, <span class="number">0</span>, [], used, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dfs</span><span class="params">(self, nums, index, pre, used, res)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        nums: 全排列数组, index: 当前数组已有几个元素, pre: 当前数组,</span></span><br><span class="line"><span class="string">        used: 标识某个数是否已经使用, res: 结果数组</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> index == len(nums):</span><br><span class="line">            res.append(pre.copy())</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> used[i]:</span><br><span class="line">                <span class="comment"># 没使用就使用它</span></span><br><span class="line">                used[i] = <span class="literal">True</span></span><br><span class="line">                pre.append(nums[i])</span><br><span class="line">                self.__dfs(nums, index+<span class="number">1</span>, pre, used, res)</span><br><span class="line">                <span class="comment"># 用完归还</span></span><br><span class="line">                used[i] = <span class="literal">False</span></span><br><span class="line">                pre.pop()</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Had00cbf9322a407780d51666a99e766cV.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题比较复杂，至少对于我来说是的，递归的算法比较不容易想清楚具体的过程，往往需要动手画一画递归的过程。理解之后还需要关注某些特殊的地方，如此题中的状态重置、递归终止条件等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全排列&quot;&gt;&lt;a href=&quot;#全排列&quot; class=&quot;headerlink&quot; title=&quot;全排列&quot;&gt;&lt;/a&gt;全排列&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;回溯算法&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等&lt;/
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="回溯算法" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>爬楼梯</title>
    <link href="http://yoursite.com/2019/09/30/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <id>http://yoursite.com/2019/09/30/爬楼梯/</id>
    <published>2019-09-30T06:28:00.000Z</published>
    <updated>2019-09-30T06:33:10.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>动态规划</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><p><strong>示例1：</strong></p><blockquote><p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol></blockquote><h2 id="方法一——动态规划"><a href="#方法一——动态规划" class="headerlink" title="方法一——动态规划"></a>方法一——动态规划</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们在走到某一台阶时的方法数与走到前面的台阶的方法数有关系，通过分析可以知道，要到达第 i 阶，可以从第 i-1 阶走一步到达，也可以从第 i-2 阶直接走两步到达，即到达第 i 阶的方法总数就是到第 (i−1) 阶和第 (i−2) 阶的方法数之和。令 dp[i] 表示能到达第 i 阶的方法总数：则有<code>dp[i] = dp[i-1] + dp[i-2]</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>；空间复杂度：<code>O(n)</code>，dp数组消耗所用。</p><p><img src="https://ae01.alicdn.com/kf/H9e00426ab8604b24b9510148901e07d0U.png" alt="方法一提交"></p><h2 id="方法二——斐波那契数列"><a href="#方法二——斐波那契数列" class="headerlink" title="方法二——斐波那契数列"></a>方法二——斐波那契数列</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>如果手动计算出前面几步的结果的话，会发现不同阶数的方法数符合斐波那契数列，即<code>f(i) = f(i-1) + f(i-2)</code>，所以只要我们定义好初始的数，以上述规则进行计算，那么不用额外数组也可以得到结果。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">        i = <span class="number">3</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">            c = a + b</span><br><span class="line">            a, b = b, c</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>；空间复杂度：<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H302441033c9944bcb5302f1da7e471c0x.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题整体上来说也不难，关键在于发现结果中的规律，有时候需要手动写一下简单的结果，然后再去推导最终的结果形式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬楼梯&quot;&gt;&lt;a href=&quot;#爬楼梯&quot; class=&quot;headerlink&quot; title=&quot;爬楼梯&quot;&gt;&lt;/a&gt;爬楼梯&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;动态规划&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单&lt;/
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>反转字符串中的单词 III</title>
    <link href="http://yoursite.com/2019/09/30/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D-III/"/>
    <id>http://yoursite.com/2019/09/30/反转字符串中的单词-III/</id>
    <published>2019-09-30T05:38:00.000Z</published>
    <updated>2019-09-30T05:40:13.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转字符串中的单词-III"><a href="#反转字符串中的单词-III" class="headerlink" title="反转字符串中的单词 III"></a>反转字符串中的单词 III</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>字符串</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p><strong>示例：</strong></p><blockquote><p>输入: “Let’s take LeetCode contest”<br>输出: “s’teL ekat edoCteeL tsetnoc” </p></blockquote><p><strong>注意：</strong>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>整体解题思路比较简单，将字符串按空格分割成列表，再对每一部分进行反转，然后再以空格连接成字符串返回即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        temp = s.split(<span class="string">' '</span>)</span><br><span class="line">        res = [i[::<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> temp]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(res)</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H841041ec1b0c4e9abdaf26fd611e3960V.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用python来解决这道题的话就显得比较简单了，因为关键的两部操作都有内置的函数去实现。另外上述方法的代码可以缩减到一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">" "</span>.join([i[::<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> s.split()])</span><br></pre></td></tr></table></figure><p>此外还发现了另外一种思路，代码也是一行，理解起来也很简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(s.split(<span class="string">' '</span>)[::<span class="number">-1</span>])[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转字符串中的单词-III&quot;&gt;&lt;a href=&quot;#反转字符串中的单词-III&quot; class=&quot;headerlink&quot; title=&quot;反转字符串中的单词 III&quot;&gt;&lt;/a&gt;反转字符串中的单词 III&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>最长公共前缀</title>
    <link href="http://yoursite.com/2019/09/29/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>http://yoursite.com/2019/09/29/最长公共前缀/</id>
    <published>2019-09-29T13:54:00.000Z</published>
    <updated>2019-09-29T14:03:41.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>字符串</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例1：</strong></p><blockquote><p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。</p></blockquote><p><strong>说明:</strong></p><p>所有输入只包含小写字母 <code>a-z</code> 。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题不是很复杂，可以采用水平扫描的方式，首先找到前两个字符串的最长公共前缀，然后再找到已知前缀与另外的字符串进行查找最长公共前缀，不断更新最长公共前缀，直到查找完所有的字符串，返回最新的最长公共前缀。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        temp = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">            <span class="comment"># 如果此时最长公共前缀已经为空的话，直接返回空字符串</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> temp:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">            temp = self.twoLCP(temp, strs[i])</span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoLCP</span><span class="params">(self, s1: str, s2: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="string">'''返回两个字符串的公共前缀'''</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s1) <span class="keyword">and</span> i &lt; len(s2):</span><br><span class="line">            <span class="keyword">if</span> s1[i] == s2[i]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> s1[:i]</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(n)</code>，n为数组长度；空间复杂度：<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/H3e2b750ba1954c2eadb4641954ec8fa3Y.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述方法也有点冗余了，其实可以采用分治法，不断找到两两字符串的最长公共前缀，再合起来找到这些前缀的最长公共前缀，直到最后只剩一个前缀，返回即可。其实这个最长公共前缀可以用木桶原理来理解，关键在于最短的那个字符串以及最短的那个已知前缀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最长公共前缀&quot;&gt;&lt;a href=&quot;#最长公共前缀&quot; class=&quot;headerlink&quot; title=&quot;最长公共前缀&quot;&gt;&lt;/a&gt;最长公共前缀&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;字符串&lt;/strong&gt;的一道题，难度为&lt;
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="http://yoursite.com/2019/09/29/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/09/29/最长回文子串/</id>
    <published>2019-09-29T11:56:00.000Z</published>
    <updated>2019-09-29T12:05:59.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>动态规划</strong>和<strong>字符串</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。你可以假设 <code>s</code> 的最大长度为 1000。</p><p><strong>示例1：</strong></p><blockquote><p>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: “cbbd”<br>输出: “bb”</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题比较复杂，但是解决的方法有很多，甚至有专门的算法去解决此类问题。关键的地方在于回文数的中心对称特性，以及怎么利用已经判断过的结果来计算新的结果。下面给出两种方式的代码，分别是中心扩散法和动态规划法。由于目前我也还在理解中，暂时就只给出代码，讲解的过程请看<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/" target="_blank" rel="noopener">此处的题解</a>。</p><h2 id="代码1——中心扩散"><a href="#代码1——中心扩散" class="headerlink" title="代码1——中心扩散"></a>代码1——中心扩散</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        size = len(s)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> size:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录最长的回文子串以及其长度</span></span><br><span class="line">        longest_palindrome = <span class="number">1</span></span><br><span class="line">        longest_palindrome_str = s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">            <span class="comment"># 分别以奇偶情况进行中心扩散</span></span><br><span class="line">            palindrome_odd, odd_len = self.__center_spread(s, size, i, i)</span><br><span class="line">            palindrome_even, even_len = self.__center_spread(s, size, i, i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新最长的回文子串以及其长度</span></span><br><span class="line">            cur_max_sub = palindrome_odd <span class="keyword">if</span> odd_len &gt;= even_len <span class="keyword">else</span> palindrome_even</span><br><span class="line">            <span class="keyword">if</span> len(cur_max_sub) &gt; longest_palindrome:</span><br><span class="line">                longest_palindrome = len(cur_max_sub)</span><br><span class="line">                longest_palindrome_str = cur_max_sub</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longest_palindrome_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__center_spread</span><span class="params">(self, s, size, left, right)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        以输入指针为中心进行中序扩散，返回此时的最长回文子串以及其长度。</span></span><br><span class="line"><span class="string">        输入指针分左右，表示中心有两个数，如果重合即表示中心为一个数。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 当前后两指针都未到边界时判断前后两值是否相等</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; size <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> s[left+<span class="number">1</span>:right], right - left - <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="提交1"><a href="#提交1" class="headerlink" title="提交1"></a>提交1</h2><p>时间复杂度：<code>O(n^2)</code>；空间复杂度：<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/H4d6598683d2d4d178b422680bee10248j.png" alt="方法一提交"></p><h2 id="代码2——动态规划"><a href="#代码2——动态规划" class="headerlink" title="代码2——动态规划"></a>代码2——动态规划</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        size = len(s)</span><br><span class="line">        <span class="keyword">if</span> size &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="comment"># 初始化状态矩阵，dp[l][r]表示s[l:r]是否为回文数（闭区间）</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> I <span class="keyword">in</span> range(size)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录最长回文子串以及其长度</span></span><br><span class="line">        longest_len = <span class="number">1</span></span><br><span class="line">        res = s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左边界小于右边界</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">1</span>, size):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(r):</span><br><span class="line">                <span class="comment"># 状态转移方程：如果头尾字符相等并且中间也是回文</span></span><br><span class="line">                <span class="comment"># 在头尾字符相等的前提下，如果收缩以后不构成区间（最多只有 1 个元素），直接返回 True 即可</span></span><br><span class="line">                <span class="comment"># 否则要继续看收缩以后的区间的回文性，重点理解 or 的短路性质在这里的作用</span></span><br><span class="line">                <span class="keyword">if</span> s[l] == s[r] <span class="keyword">and</span> (r - l &lt;= <span class="number">2</span> <span class="keyword">or</span> dp[l + <span class="number">1</span>][r - <span class="number">1</span>]):</span><br><span class="line">                    dp[l][r] = <span class="literal">True</span></span><br><span class="line">                    cur_len = r - l + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cur_len &gt; longest_len:</span><br><span class="line">                        longest_len = cur_len</span><br><span class="line">                        res = s[l:r + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交2"><a href="#提交2" class="headerlink" title="提交2"></a>提交2</h2><p>时间复杂度：<code>O(n^2)</code>；空间复杂度：<code>O(n^2)</code>。</p><p><img src="https://ae01.alicdn.com/kf/Hc2f9e39b75154cbcbd76b8baf234f757O.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目虽短，但解决起来却不容易，主要也是我现在对动态规划这块还不是很熟悉。中心扩散的方法能够很好的理解，动态规划的话只能说基本上理解了，这方面还需要多练练。另外有专门的解决此类的算法：<strong>Manacher</strong> 算法，但是这个算法更复杂一些，暂时记下来，以后又这方面的需求在仔细看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最长回文子串&quot;&gt;&lt;a href=&quot;#最长回文子串&quot; class=&quot;headerlink&quot; title=&quot;最长回文子串&quot;&gt;&lt;/a&gt;最长回文子串&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;动态规划&lt;/strong&gt;和&lt;strong
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>反转字符串</title>
    <link href="http://yoursite.com/2019/09/28/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/09/28/反转字符串/</id>
    <published>2019-09-28T09:45:00.000Z</published>
    <updated>2019-09-28T09:45:15.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>双指针</strong>和<strong>字符串</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-string/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 <strong>O(1)</strong> 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p><strong>示例1：</strong></p><blockquote><p>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题比较简单，采用双指针的话，从首尾开始向中间不断地对前后两个元素的值进行交换，直到交换到中间位置即完成了整个数组元素的反转。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s: List[str])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n = len(s) - <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            s[i], s[n] = s[n], s[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(n/2)</code>，只需要交换数组长度一半的次数。空间复杂度：<code>O(1)</code>：只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/Ha4410b8dcb6e44aba567f3d7fdc0b8f7j.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题很简单，如果仔细的话就会发现，这个方法跟数组结构的<code>reverse()</code>方法作用相同，同样也是就地反转数组内的元素，这就提示我们，有时间可以看看源码，因为源码往往是经过锤炼之后留下的精华，代码简洁又有效率，有很多值得我们去学习的地方。</p><p>python的数组结构以及其相关方法大多都是c语言写的，这里贴一下官方<code>reverse()</code>方法的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Reverse a slice of a list in place, from lo up to (exclusive) hi. */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">reverse_slice(PyObject **lo, PyObject **hi)</span><br><span class="line">&#123;</span><br><span class="line">    assert(lo &amp;&amp; hi);</span><br><span class="line"></span><br><span class="line">    --hi;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        PyObject *t = *lo;</span><br><span class="line">        *lo = *hi;</span><br><span class="line">        *hi = t;</span><br><span class="line">        ++lo;</span><br><span class="line">        --hi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>reverse()</code>方法的实现中，也是使用双指针不断地交换前后两个元素的值方式实现的，跟我们写的几乎一样，这也是值得肯定的地方。附：<a href="https://github.com/python/cpython" target="_blank" rel="noopener">python官方的源码地址</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转字符串&quot;&gt;&lt;a href=&quot;#反转字符串&quot; class=&quot;headerlink&quot; title=&quot;反转字符串&quot;&gt;&lt;/a&gt;反转字符串&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;双指针&lt;/strong&gt;和&lt;strong&gt;字符串&lt;
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>字符串相乘</title>
    <link href="http://yoursite.com/2019/09/28/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/"/>
    <id>http://yoursite.com/2019/09/28/字符串相乘/</id>
    <published>2019-09-28T08:00:00.000Z</published>
    <updated>2019-09-28T09:45:33.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串相乘"><a href="#字符串相乘" class="headerlink" title="字符串相乘"></a>字符串相乘</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数学</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/multiply-strings/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。</p><p><strong>示例1：</strong></p><blockquote><p>输入: num1 = “2”, num2 = “3”<br>输出: “6”</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: num1 = “123”, num2 = “456”<br>输出: “56088”</p></blockquote><p><strong>说明：</strong></p><ul><li>num1 和 num2 的长度小于110。</li><li>num1 和 num2 只包含数字 0-9。</li><li>num1 和 num2 均不以零开头，除非是数字 0 本身。</li><li><strong>不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</strong></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到这道题可能第一想法是直接把字符串转换成整数进行相乘，再把结果转换成字符串返回，而且写出来好几版相关的代码，并且也可以通过。但是这道题实际上有那么简单吗？肯定不是的。这道题的关键在于字符串长度上，由于整数长度会受到编程语言的数据类型限制，而此题中字符串长度边界是110，如此长的数，在转换成整数时大多数编程语言都会出现问题，所以不能采用这种方式，这也是此题的难点。</p><p>如果稍加思考，参考我们人进行整数相乘的过程：将一个数与另外一个数的每一位相乘，不同位代表后面可能会有一定数量的0，同时相乘时会有进位的过程，再将结果都加起来即可，此即竖乘法。所以我们便将两个数转换成了一个数与另外一个数的每一位相乘再相交，而与每一位相乘的过程又可以分解，即一个数与另外一个数的每一位进行相乘，也有进位过程。这个过程又可以分解为两个数相乘，并且这两个数都只有一位。这样分解下来，多位数的相乘转换成了个位数的相乘，就不会有整数位数的限制了。只是这要会出现一个难点，就是进位的情况怎么用代码取实现，还有分解的过程也有点复杂。</p><p>详情参考代码，关键地方也有较为详细的注释。此方法参考了<a href="https://leetcode-cn.com/problems/multiply-strings/solution/python-zi-fu-chuan-bao-li-mo-ni-shu-shi-cheng-fa-j/" target="_blank" rel="noopener">大佬的题解</a>，里面讲的比较清楚了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="comment"># 处理特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> num1 == <span class="string">'0'</span> <span class="keyword">or</span> num2 == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将长的放在前</span></span><br><span class="line">        l1, l2 = len(num1), len(num2)</span><br><span class="line">        <span class="keyword">if</span> l1 &lt; l2:</span><br><span class="line">            num1, num2 = num2, num1</span><br><span class="line">            l1, l2 = l2, l1</span><br><span class="line">        <span class="comment"># 倒序方便相乘进位</span></span><br><span class="line">        num2 = num2[::<span class="number">-1</span>]</span><br><span class="line">        res = <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, digit <span class="keyword">in</span> enumerate(num2):</span><br><span class="line">            <span class="comment"># 计算num1与num2每一位的乘积</span></span><br><span class="line">            temp = self.StringMultiplyDigit(num1, int(digit)) + <span class="string">'0'</span> * i</span><br><span class="line">            <span class="comment"># 将上一步的计算结果加到最终结果中</span></span><br><span class="line">            res = self.StringPlusString(res, temp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">StringMultiplyDigit</span><span class="params">(self, string, n)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        计算一个整数字符串与个位整数的积，以字符串作为结果返回。</span></span><br><span class="line"><span class="string">        例：输入为'123'、3，返回'369'。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 倒序方便进位</span></span><br><span class="line">        s = string[::<span class="number">-1</span>]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="comment"># 计算每一位与该整数相乘的积，并存下来</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            res.append(int(char) * n)</span><br><span class="line">        <span class="comment"># 处理上一步计算结果中的进位问题</span></span><br><span class="line">        res = self.CarrySolver(res)</span><br><span class="line">        <span class="comment"># 再将结果倒序，此时变为正序</span></span><br><span class="line">        res = res[::<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 拼接成字符串返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> res)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CarrySolver</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        处理输入数组的进位问题，注意数组中为倒序的计算结果。</span></span><br><span class="line"><span class="string">        例：输入为[15, 27, 12]，返回[5, 8, 4, 1]。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt;= <span class="number">10</span>:</span><br><span class="line">                <span class="comment"># 大于10的话获取待进位的数</span></span><br><span class="line">                carrier = nums[i] // <span class="number">10</span></span><br><span class="line">                <span class="comment"># 注意计算到最后一位时有进位还需向后添加该进位</span></span><br><span class="line">                <span class="keyword">if</span> i == len(nums) - <span class="number">1</span>:</span><br><span class="line">                    nums.append(carrier)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nums[i+<span class="number">1</span>] += carrier</span><br><span class="line">                nums[i] %= <span class="number">10</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">StringPlusString</span><span class="params">(self, s1, s2)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        计算两个字符串相加的结果，以字符串返回。</span></span><br><span class="line"><span class="string">        例：输入为'123'、'456'，返回'579'</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 将长的字符串放在前</span></span><br><span class="line">        l1, l2 = len(s1), len(s2)</span><br><span class="line">        <span class="keyword">if</span> l1 &lt; l2:</span><br><span class="line">            s1, s2 = s2, s1</span><br><span class="line">            l1, l2 = l2, l1</span><br><span class="line">        <span class="comment"># 生成两以字符串每一位表示的整数的数组</span></span><br><span class="line">        s1 = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> s1]</span><br><span class="line">        s2 = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> s2]</span><br><span class="line">        <span class="comment"># 倒序将短的数组元素依次加到长的数组中</span></span><br><span class="line">        s1, s2 = s1[::<span class="number">-1</span>], s2[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i, digit <span class="keyword">in</span> enumerate(s2):</span><br><span class="line">            s1[i] += s2[i]</span><br><span class="line">        <span class="comment"># 处理相加结果数组的进位</span></span><br><span class="line">        s1 = self.CarrySolver(s1)</span><br><span class="line">        <span class="comment"># 反转拼接成字符串返回</span></span><br><span class="line">        s1 = s1[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> s1)</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(m*n)</code>，m、n分别是两字符串的长度。空间复杂度：<code>O(m+n)</code>。</p><p><img src="https://ae01.alicdn.com/kf/Hf09ff0bd111442d48b98d9844851f2555.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从提交结果上来看，可能不够理想，但是这主要是因为这是在python3中去解决的，而在python3中数字位数是没有限制的，所以可以直接转换成整数进行相乘再转换成字符串返回，花费时间是上述算法的十分之一左右。这并不意味着上述方法复杂而又无用，关键地方在于上述方法的思想是相通的，用其他编程语言也可以实现，也不会受到整数位数的限制。另外中间模拟人计算的过程，以及进位的处理等等方面都是值得学习的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串相乘&quot;&gt;&lt;a href=&quot;#字符串相乘&quot; class=&quot;headerlink&quot; title=&quot;字符串相乘&quot;&gt;&lt;/a&gt;字符串相乘&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数学&lt;/strong&gt;的一道题，难度为&lt;stron
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>回文数</title>
    <link href="http://yoursite.com/2019/09/26/%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>http://yoursite.com/2019/09/26/回文数/</id>
    <published>2019-09-26T14:36:00.000Z</published>
    <updated>2019-09-27T08:26:57.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数学</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-number/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例1：</strong></p><blockquote><p>输入: 121<br>输出: true</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p></blockquote><p><strong>进阶:</strong></p><p>你能不将整数转为字符串来解决这个问题吗？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先说一下用字符串的方式，只需要将整数转换成字符串，首尾依次取一个字符进行比较是否相等，如果中间有任一不相等的字符则直接返回<code>False</code>，直到比较到中间位置每一对字符都相等则表示该数是回文数，返回<code>Ture</code>。</p><p>如果不转换成字符串，也依次取第一位和最后一位进行比较，那么则需要不断地取余和取商，但是这样需要直到整数有多少位，才能快速的得到前面的位数，而这可以先将整数不断除以10，直到商为0则可以得到整数的位数，便可以实现上述的算法了。</p><p>另外官方题解给出了一个比较巧妙地方法，将该整数地后一半进行反转，与该数地前一半进行比较看是否相等。这样我们只需要处理一半地数字，便可以得到结果。但是这个方法需要注意整数地长度奇偶性地问题，以及如何判断什么时候转换达到了中间位置。</p><p>无论哪种方法，都需要注意一些特殊情况，比如负数一定不是回文数、尾数为0地数中只有0本身是回文数等等，这些特殊情况需要特殊考虑。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># x小于0或者x最后一位是0而x不是0则表示x一定不是回文数</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; temp:</span><br><span class="line">            temp = temp * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span></span><br><span class="line">        <span class="comment"># 分回文数长度的奇偶情况，偶数则与temp直接比较，奇数则需去掉temp最后一位</span></span><br><span class="line">        <span class="keyword">if</span> x == temp <span class="keyword">or</span> x == temp // <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H2fa6eb3000e140df8185637dd9a50a4bO.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题给我地启示是我们在面对一个问题时，虽然解决的方式有很多，但是往往真正将问题的某些特性运用到解法中的方法，才能够巧妙地既提高效率，又能解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回文数&quot;&gt;&lt;a href=&quot;#回文数&quot; class=&quot;headerlink&quot; title=&quot;回文数&quot;&gt;&lt;/a&gt;回文数&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数学&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单&lt;/st
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>字符串转换整数 (atoi)</title>
    <link href="http://yoursite.com/2019/09/25/2019-09-25-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0-(atoi)/"/>
    <id>http://yoursite.com/2019/09/25/2019-09-25-字符串转换整数-(atoi)/</id>
    <published>2019-09-25T09:21:00.000Z</published>
    <updated>2019-09-25T09:24:01.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串转换整数-atoi"><a href="#字符串转换整数-atoi" class="headerlink" title="字符串转换整数 (atoi)"></a>字符串转换整数 (atoi)</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数学</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/string-to-integer-atoi/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p><strong>注意</strong>：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p><strong>说明：</strong></p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。如果数值超过这个范围，请返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。</p><p><strong>示例1：</strong></p><blockquote><p>输入: “42”<br>输出: 42</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。</p></blockquote><p><strong>示例4：</strong></p><blockquote><p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。因此无法执行有效的转换。</p></blockquote><p><strong>示例5：</strong></p><blockquote><p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。因此返回 INT_MIN (−231) 。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于字符串中可能存在非数字字符，所以我们第一步应该把数字字符提取出来，然后再进行符号和边界的判断。</p><ul><li>先去掉字符串开头的空格字符，如果此时字符串为空则表示字符串只有空格字符，返回0。</li><li>判断是否存在正负号，并且记录下正负号，最后与结果合并返回。</li><li>采用正则表达式从第一个非空字符开始，匹配连续的数字字符，自动忽略后续非数字字符。</li><li>将有效的匹配结果转换成整数，再根据正负号和边界大小进行符号的添加以及正确结果的返回。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str: str)</span> -&gt; int:</span></span><br><span class="line">        temp = str.strip()</span><br><span class="line">        <span class="comment"># 空白字符串判断</span></span><br><span class="line">        <span class="keyword">if</span> len(temp) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        sign = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 判断并记录正负号</span></span><br><span class="line">        <span class="keyword">if</span> temp[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">'-'</span>, <span class="string">'+'</span>]:</span><br><span class="line">            sign = temp[<span class="number">0</span>]</span><br><span class="line">            temp = temp[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 正则匹配第一段连续的数字字符</span></span><br><span class="line">        num1 = re.match(<span class="string">r'\d+'</span>, temp)</span><br><span class="line">        <span class="keyword">if</span> num1:</span><br><span class="line">            num2 = int(num1.group())</span><br><span class="line">            int_max = <span class="number">2</span> ** <span class="number">31</span></span><br><span class="line">            <span class="comment"># 正负判断</span></span><br><span class="line">            <span class="keyword">if</span> sign == <span class="string">'+'</span> <span class="keyword">or</span> <span class="keyword">not</span> sign:</span><br><span class="line">                <span class="comment"># 边界判断</span></span><br><span class="line">                <span class="keyword">if</span> num2 &lt; int_max:</span><br><span class="line">                    <span class="comment"># 是否有符号</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> sign:</span><br><span class="line">                        <span class="keyword">return</span> +num2</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> num2</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> int_max<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> num2 &lt;= int_max:</span><br><span class="line">                    <span class="keyword">return</span> -num2</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> -int_max</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Heb7b5745f0dc42f9a4003e4548fef3a2P.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码中有很多嵌套的判断语句，看起来有点冗余，主要是因为有很多需要判断的地方：正则匹配是否有结果、正数还是负数、是否超出边界、有没有符号。判断都是一层接一层，才导致了嵌套的判断。可能也是方法的问题，思路还有待简化。另外这个是借助了正则表达式，看到另一个同样使用了正则表达式的<a href="https://leetcode-cn.com/problems/string-to-integer-atoi/solution/python-1xing-zheng-ze-biao-da-shi-by-knifezhu/" target="_blank" rel="noopener">题解</a>，代码比较简洁，可以参考一下。此外，也可以不使用正则表达式，一个一个字符的去判断是不是数字字符也可以，只是比较繁琐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串转换整数-atoi&quot;&gt;&lt;a href=&quot;#字符串转换整数-atoi&quot; class=&quot;headerlink&quot; title=&quot;字符串转换整数 (atoi)&quot;&gt;&lt;/a&gt;字符串转换整数 (atoi)&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>整数反转</title>
    <link href="http://yoursite.com/2019/09/23/2019-09-23-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <id>http://yoursite.com/2019/09/23/2019-09-23-整数反转/</id>
    <published>2019-09-23T09:13:00.000Z</published>
    <updated>2019-09-23T09:17:28.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数学</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p><strong>示例1：</strong></p><blockquote><p>输入: 123<br>输出: 321</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: -123<br>输出: -321</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入: 120<br>输出: 21</p></blockquote><p><strong>注意:</strong></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 <code>[−2^31,  2^31 − 1]</code>。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先说一下一般的解题思想：通过不断地对10进行取余和取商，得到整数的每一位数字，用数组存下来，反序再拼成整数，最后加上边界判断。</p><p>再说一下特殊的解题思路：直接将一个整数反转是比较困难的，而对于字符串的反转是比较容易的。所以我们先将这个整数转化成字符串，再对字符串进行反转，然后再转为整数，而将一个字符串反转用一句代码即可：<code>str[::-1]</code>。数字反转的部分完成了，接下来是对边界的判定，由于正负边界不同，我们便分开判定，超过边界则返回0。这里要注意一下：<strong>力扣系统对边界的判定不完善，代码不能输出正负的边界值一样会通过，</strong>所以需要自行仔细的去判定。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        x1 = abs(x)</span><br><span class="line">        x2 = <span class="number">2</span> ** <span class="number">31</span></span><br><span class="line">        <span class="comment"># 先转换成字符串，再反序</span></span><br><span class="line">        s = str(x1)[::<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 自动去掉前面的0</span></span><br><span class="line">        x3 = int(s)</span><br><span class="line">        <span class="comment"># 根据正负情况判断边界条件</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x3 &lt; x2:</span><br><span class="line">                <span class="keyword">return</span> x3</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> x3 &lt;= x2:</span><br><span class="line">                <span class="keyword">return</span> -x3</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Hae8a5ebe00fe483497ae8ce77969ad53D.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实写过了好几版的代码了，都能通过，但是在某些方面上还有所不足，已经在代码中注释了，详情如下：</p><p><strong>第一版：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        x1 = abs(x)</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        s1 = str(x1)</span><br><span class="line">        <span class="comment"># 反转过程：整数-&gt;字符串-&gt;数组-&gt;字符串-&gt;整数</span></span><br><span class="line">        temp = list(s1)</span><br><span class="line">        <span class="comment"># 手动去掉反转后前面的0</span></span><br><span class="line">        <span class="keyword">while</span> temp[<span class="number">-1</span>] == <span class="string">'0'</span>:</span><br><span class="line">            temp.pop()</span><br><span class="line">        temp.reverse()</span><br><span class="line">        s2 = str.join(<span class="string">''</span>, temp)</span><br><span class="line">        <span class="comment"># 采用eval函数将字符串-&gt;整数</span></span><br><span class="line">        x3 = eval(s2)</span><br><span class="line">        <span class="comment"># 边界判定不够完善</span></span><br><span class="line">        <span class="keyword">if</span> x3 &gt; ((<span class="number">2</span> ** <span class="number">31</span>) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x3</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -x3</span><br></pre></td></tr></table></figure><p><strong>第二版：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        x1 = abs(x)</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 反转过程不变</span></span><br><span class="line">        s1 = str(x1)</span><br><span class="line">        temp = list(s1)</span><br><span class="line">        temp.reverse()</span><br><span class="line">        s2 = str.join(<span class="string">''</span>, temp)</span><br><span class="line">        <span class="comment"># 采用int函数将字符串-&gt;整数，自动去点前面的0</span></span><br><span class="line">        x3 = int(s2)</span><br><span class="line">        <span class="keyword">if</span> x3 &gt; ((<span class="number">2</span> ** <span class="number">31</span>) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x3</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -x3</span><br></pre></td></tr></table></figure><p>可以看到，代码在不断地精简，而且效率还有提高。而这跟基本功有关，你是否对该语言的基本结构与特性足够熟悉，会大大影响你的解题思路。做题也是一个巩固知识和学习新知识的过程，要看到相通的一些东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整数反转&quot;&gt;&lt;a href=&quot;#整数反转&quot; class=&quot;headerlink&quot; title=&quot;整数反转&quot;&gt;&lt;/a&gt;整数反转&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数学&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>json转换为csv</title>
    <link href="http://yoursite.com/2019/09/22/json%E8%BD%AC%E6%8D%A2%E4%B8%BAcsv/"/>
    <id>http://yoursite.com/2019/09/22/json转换为csv/</id>
    <published>2019-09-22T12:59:00.000Z</published>
    <updated>2019-09-22T13:10:38.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前在手机上用了一个记账号密码的软件：【<a href="https://www.coolapk.com/apk/com.shiguiyou.remberpassword" target="_blank" rel="noopener">记住密码</a>】，在换手机之后打算将原手机（安卓8）上的账号密码备份导入到新手机（安卓9）的软件里，结果发现该软件安卓9闪退，无法使用，并且发现该软件作者已经停止维护。无奈另寻了一个同类软件：【<a href="https://www.coolapk.com/apk/com.wei.account" target="_blank" rel="noopener">账号本子</a>】，该软件也支持导入导出功能，并且支持的文件格式多样。因为记录的账号太多了，几十个，为了偷懒，便想着能不能将原软件导出的账号文件修改一下格式导入到新的软件内。由于两个软件支持的文件格式虽然相同，但是在内容结构上有所差异，所以需要将旧软件导出的json格式的账号密码文件转为新软件支持导入的csv格式文件。</p><h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><p>旧软件导出的文件为json文件，每个账号有五个键值对，分别是账号的名称、账号、密码、分类、备注（可为空），具体如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"测试1"</span>,</span><br><span class="line">        <span class="attr">"account"</span>: <span class="string">"test1"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"工具"</span>,</span><br><span class="line">        <span class="attr">"note"</span>: <span class="string">"这是备注"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"测试2"</span>,</span><br><span class="line">        <span class="attr">"account"</span>: <span class="string">"test2"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"123456789"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"学习"</span>,</span><br><span class="line">        <span class="attr">"note"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>新软件支持的导入文件为csv文件，对于每个账号来说，如果要和上述账号对应的话，有六个关键字，分别是分类、置顶、名称、账号、密码、备注（可为空），同时该文件前五行为提示语句并且必不可少，账号从第六行开始填充，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：此模板仅适用于账号本子5.0.0及以上的版本,,,,,</span><br><span class="line">必填：分组名称5个字以内，名称50个字以内，账号50个字以内,,,,,</span><br><span class="line">必填：置顶默认为T0，表示不置顶，数字越大越靠前，如：T100,,,,,</span><br><span class="line">选填：自定义项用_@X@_连接，如：密码_@X@_12345，最多20个自定义项,,,,,</span><br><span class="line">分组(必填),置顶(必填),名称(必填),账号(必填),自定义项目,</span><br><span class="line">测试分组1,T1539155205062,测试账号1,13800138000,密码_@X@_abc123456,备注_@X@_自己加的</span><br><span class="line">测试分组2,T0,测试账号2,10086,密码_@X@_abc123456,</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>通过python的json库，先将json文件打开，读取其中内容并转换成字典，此时每个账号即为字典内的一个键值对。遍历该字典，取出每个账号的具体信息，将其按csv文件内格式顺序填充进一个数组内。需注意备注信息如果原json内该账号没有，那么在新的csv文件内账号的该字段置空，不然软件会识别错误。然后将该数组以逗号分隔转换成字符串，再写入csv文件中，同时注意换行，csv文件内一行存储一个账号信息。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 原账号文件，json格式，'utf-8'编码</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'user.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        temp.append(i[<span class="string">'type'</span>])</span><br><span class="line">        temp.append(<span class="string">'T0'</span>)</span><br><span class="line">        temp.append(i[<span class="string">'title'</span>])</span><br><span class="line">        temp.append(i[<span class="string">'account'</span>])</span><br><span class="line">        temp.append(<span class="string">'密码_@X@_'</span> + i[<span class="string">'password'</span>])</span><br><span class="line">        <span class="comment"># 备注可能为空，为空时新账号文件内该字段不填</span></span><br><span class="line">        <span class="keyword">if</span> i[<span class="string">'note'</span>]:</span><br><span class="line">            temp.append(<span class="string">'备注_@X@_'</span> + i[<span class="string">'note'</span>])</span><br><span class="line">        w_str = <span class="string">','</span>.join(temp)</span><br><span class="line">        <span class="comment"># 新账号文件注意编码为'GB2312'</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'user.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'GB2312'</span>) <span class="keyword">as</span> res:</span><br><span class="line">            res.write(w_str + <span class="string">'\n'</span>)</span><br><span class="line">            temp = []</span><br></pre></td></tr></table></figure><h1 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h1><ul><li>json_to_csv.exe——编译后的程序，可以在Windows环境下直接运行</li><li>json_to_csv.py ——程序源代码文件</li><li>user.csv——新软件支持的备份文件，程序执行后，原账号信息会被填充到里面，’GB2312’编码</li><li>user.json——旧软件支持的备份文件，由旧软件导出，’uft-8’ 编码</li><li>user（模板）.csv ——对新软件支持的备份文件内容进行说明</li></ul><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><p><strong>方法一（Windows环境）：</strong></p><ul><li>下载项目文件压缩包，全部解压出来</li><li>将你从旧软件导出的备份文件改名为<code>user.json</code>，再将其与项目文件夹里的<code>json_to_csv.exe</code>文件和<code>user.csv</code>文件放入同一个文件夹内</li><li>双击<code>json_to_csv.exe</code>执行程序，会有一个命令行窗口一闪而过，账号信息即被复制到了<code>user.csv</code>文件内</li><li>将<code>user.csv</code>传到手机，打开【账号本子】，在数据备份恢复功能中选择<code>明文CSV</code>一项进行导入，选择<code>user.csv</code>文件即可</li></ul><p><strong>方法二（已配置好python3的任意环境）：</strong></p><ul><li>下载项目文件压缩包，全部解压出来</li><li>将你从旧软件导出的备份文件改名为<code>user.json</code>，再将其与项目文件夹里的<code>json_to_csv.py</code>文件和<code>user.csv</code>文件放入同一个文件夹内，假设为<code>temp</code></li><li>在<code>temp</code>文件夹位置打开命令行，执行下述命令：<code>python json_to_csv.py</code>，账号信息即被复制到了<code>user.csv</code>文件内</li><li>将<code>user.csv</code>传到手机，打开【账号本子】，在数据备份恢复功能中选择<code>明文CSV</code>一项进行导入，选择<code>user.csv</code>文件即可</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这只是一个很小很小的程序，甚至都算不上项目，需求也很简单，但是如果认真地去对待、完善，还是可以学到很多东西。比如说对于一个项目来说，代码只是一部分，关键的是怎么将需求一步一步地转换成实际的解决思路，再用代码去实现。另外这也体现了学以致用的思想，将学到的东西应用到实际生活中，会让人更有动力地去学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前在手机上用了一个记账号密码的软件：【&lt;a href=&quot;https://www.coolapk.com/apk/com.shiguiyou
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="csv" scheme="http://yoursite.com/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>删除链表中的节点</title>
    <link href="http://yoursite.com/2019/09/22/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2019/09/22/删除链表中的节点/</id>
    <published>2019-09-22T08:07:00.000Z</published>
    <updated>2019-09-22T08:20:24.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除链表中的节点"><a href="#删除链表中的节点" class="headerlink" title="删除链表中的节点"></a>删除链表中的节点</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-node-in-a-linked-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:</p><p><img src="https://ae01.alicdn.com/kf/H6355733712ff4e8fb56eff127507f47eS.png" alt="题图"></p><p><strong>示例1：</strong></p><blockquote><p>输入: head = [4,5,1,9], node = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: head = [4,5,1,9], node = 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p></blockquote><p><strong>说明:</strong></p><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题题目可能表述有点难理解，其实就是给出一个链表中的节点，在链表中就地删除该节点，无返回值，同时该链表还满足上述的说明条件。乍一看删除一个链表中的节点需要将该节点与链表的每一个节点进行比较，直到找到该节点后改变其前后节点的连接情况才算删除了该节点。但是此题没有给出链表的首节点，所以我们找不到待删除节点的前驱，也就无法改变其前驱的后继。然后我们换一个思路，既然无法改变待删除节点前驱的后继，那么我们<strong>直接将待删除节点值变为其后继节点值，然后跳过其后继节点，使待删除节点直接与其后继的后继节点相连（即用待删除节点代替其后继节点）</strong>，不就相当于删除了目标节点了吗。并且该链表满足题目所给说明条件，所以边界情况即待删除节点为链表倒数第二个节点，也可以用上述方法解决。</p><p><em>注：可能我说的有点拗口，结合具体例子或者图像可以更好的理解，这个方法很巧妙，有点脑筋急转弯的感觉。</em></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node.val = node.next.val</span><br><span class="line">        node.next = node.next.next</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>不用多说，时间复杂度与空间复杂度都是<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/He58bb00da11f485e81829065903939eaQ.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链表的操作基本上都是修改节点的引用，但是有时候也可以考虑修改节点的值从而更巧妙的满足要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;删除链表中的节点&quot;&gt;&lt;a href=&quot;#删除链表中的节点&quot; class=&quot;headerlink&quot; title=&quot;删除链表中的节点&quot;&gt;&lt;/a&gt;删除链表中的节点&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://yoursite.com/2019/09/21/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/21/反转链表/</id>
    <published>2019-09-21T09:20:00.000Z</published>
    <updated>2019-09-21T09:23:49.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>反转一个单链表。</p><p><strong>示例：</strong></p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>迭代法，遍历整个链表，记录下每个节点的前驱和后继，改变当前节点的前驱和后继。注意新链表的尾节点后继置为空，每个节点先记录再改变，最后返回的是原链表的首节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            temp_next = curr.next</span><br><span class="line">            curr.next = prev</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = temp_next</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，遍历一次链表的所有节点；空间复杂度：<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H7856212b980a49d9a59d3b0a80176719z.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>采用递归方式，从原链表尾部开始，反向依次改变每个节点的后继。由于递归的每一层会记录当前的节点，所以只需要关注当前节点与其后继节点在新链表中的前后关系，同时注意及时断掉原链表的前后关系。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 加上head为空的判断是为了排除空链表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># p记录的是原链表尾节点，即新链表首节点</span></span><br><span class="line">        p = self.reverseList(head.next)</span><br><span class="line">        <span class="comment"># 注意这句代码的关系，可画图理解</span></span><br><span class="line">        head.next.next = head</span><br><span class="line">        <span class="comment"># 及时断掉原链表的节点后继</span></span><br><span class="line">        head.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，还是会遍历所有节点；空间复杂度：<code>O(n)</code>，递归栈的调用有n层。</p><p><img src="https://ae01.alicdn.com/kf/H5748bd7bc0954a0fb0e9dee520737ebdM.png" alt="方法二提交"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>因为要倒序的获取每个节点，所以可以借助栈，先将所有节点存入栈中，再依次出栈并连接起来，关键点在于最后一个节点的后继需置空，否则由于其原来有指向的节点，所以会导致链表中有循环。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        stack = []</span><br><span class="line">        res = temp = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            stack.append(head)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(stack)):</span><br><span class="line">            temp.next = stack.pop()</span><br><span class="line">            temp = temp.next</span><br><span class="line">        temp.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> res.next</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，两次遍历所有链表节点；空间复杂度：<code>O(n)</code>，栈的空间。</p><p><img src="https://ae01.alicdn.com/kf/H856e5704f84a4403b919915dbe4a81bfN.png" alt="方法三提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目难度不高却很基础，方法一的迭代方式应该是必须要掌握的，需注意里面的节点需先记录再改变；方法二的递归方式代码虽然比较简洁，但是理解起来有点困难，可以单步在纸上画一下节点的连接情况以及变化；至于方法三，虽然时空间效率都不算高，但是思路很清晰，理解起来不复杂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>相交链表</title>
    <link href="http://yoursite.com/2019/09/20/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/20/相交链表/</id>
    <published>2019-09-20T13:00:00.000Z</published>
    <updated>2019-09-20T13:05:05.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表：</p><p><img src="https://ae01.alicdn.com/kf/H25afaf0d23f541b9ad273e3dd8239d61Z.png" alt="示例"></p><p>在节点 c1 开始相交。</p><p><strong>示例1：</strong></p><p><img src="https://ae01.alicdn.com/kf/H80cb9f87820d45878998d4001072085a7.png" alt="1"></p><blockquote><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p></blockquote><p><strong>示例2：</strong></p><p><img src="https://ae01.alicdn.com/kf/H41de7a84afbf4b08be6a79bcc0c37fcf7.png" alt="2"></p><blockquote><p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Reference of the node with value = 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p></blockquote><p><strong>示例3：</strong></p><p><img src="https://ae01.alicdn.com/kf/Ha6c6b83e870746cc9355c84455018fa6F.png" alt="3"></p><blockquote><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p></blockquote><p><strong>注意：</strong></p><ul><li>如果两个链表没有交点，返回 null 。</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果要保证空间复杂度在常数级内，那么可以采用双指针的方式。通过观察我们可以发现，如果两个链表有相交，那么它们在某一节点后有重合，重合后的节点长度相同，而在重合前的节点长度是不一定相等的。我们先将长链表比短链表多的那部分先过滤掉，因为这部分里一定不会重合，重合部分一定在短链表的节点内。然后此时两链表长度相同，就分别依次取其节点进行比较，步长均为1，判断是否为同一节点，如果相同则表示该节点为相加部分起点，直到达到链表尾还未发现相同节点则表明两链表没有相交。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA, headB)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head1, head1: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lenA, lenB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        tempA, tempB = headA, headB</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取两个链表长度</span></span><br><span class="line">        <span class="keyword">while</span> tempA:</span><br><span class="line">            lenA += <span class="number">1</span></span><br><span class="line">            tempA = tempA.next</span><br><span class="line">        <span class="keyword">while</span> tempB:</span><br><span class="line">            lenB += <span class="number">1</span></span><br><span class="line">            tempB = tempB.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 过滤长链表前面多余部分</span></span><br><span class="line">        <span class="keyword">if</span> lenA &lt; lenB:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(lenB - lenA):</span><br><span class="line">                headB = headB.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(lenA - lenB):</span><br><span class="line">                headA = headA.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断两链表是否有相交</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(min(lenA, lenB)):</span><br><span class="line">            <span class="keyword">if</span> headA == headB:</span><br><span class="line">                <span class="keyword">return</span> headA</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                headA = headA.next</span><br><span class="line">                headB = headB.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(n)</code>，每个链表都会完整遍历两次；空间复杂度：<code>O(1)</code>，只需要常数级的空间。</p><p><img src="https://ae01.alicdn.com/kf/Hacb0e90d304d4ef39e080c01cc7c412f9.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此题难度不高，如果空间上没有要求的话还可以参见前面环形链表的方法一，用一个字典存储某一链表的所有节点，然后遍历另外一个链表的所有节点，判断每一个节点是否在字典中，是则表示该节点为相交部分的起点，返回即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相交链表&quot;&gt;&lt;a href=&quot;#相交链表&quot; class=&quot;headerlink&quot; title=&quot;相交链表&quot;&gt;&lt;/a&gt;相交链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>环形链表 II</title>
    <link href="http://yoursite.com/2019/09/19/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/"/>
    <id>http://yoursite.com/2019/09/19/环形链表-II/</id>
    <published>2019-09-19T11:35:00.000Z</published>
    <updated>2019-09-19T11:43:29.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环形链表-II"><a href="#环形链表-II" class="headerlink" title="环形链表 II"></a>环形链表 II</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p><strong>说明</strong>：不允许修改给定的链表。</p><p><strong>示例1：</strong></p><blockquote><p>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47156a56b6e40228df2545ca752af4bJ.png" alt="1"></p><p><strong>示例2：</strong></p><blockquote><p>输入：head = [1,2], pos = 0<br>输出：tail connects to node index 0<br>解释：链表中有一个环，其尾部连接到第一个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47d92b5a1344845a7873db8852b5c72T.png" alt="2"></p><p><strong>示例3：</strong></p><blockquote><p>输入：head = [1], pos = -1<br>输出：no cycle<br>解释：链表中没有环。</p></blockquote><p><strong>进阶：</strong><br>你是否可以不用额外空间解决此题？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题其实可以理解为找某个节点是否已经存在在已知节点中，为了提高查找效率，我们采用字典存储已知节点，将节点作为键，值任意都行。遍历所有节点，每一次在字典中查找是否存在当前节点的键，如果有即表明链表有环，返回当前节点，没有则将该节点作为新的键加入到字典中。遍历完所有节点后还没有找到则表示链表无环，返回<code>None</code>即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> temp.get(head):</span><br><span class="line">                temp[head] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，最坏循环遍历一次所有节点；空间复杂度：<code>O(n)</code>，需要一个字典存储所有节点。</p><p><img src="https://ae01.alicdn.com/kf/Hfd561f47408549a497585837e5c14798f.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同样像<a href="http://imooner.com/2019/09/18/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">环形链表方法二</a>一样，借助快慢双指针解题，只是这次不仅要证明链表有环，而且还要找到环的起点。经过数学的分析可以准确知道快慢指针怎么移动会刚好在链表的环起点相遇，具体分析如下：</p><ul><li>设链表首节点走到环起点要走a步，环内走一圈要走b步，则链表总长度为a+b。</li><li>快慢指针第一次相遇时设其分别走了<code>f, s</code>步，则有<code>f = 2s</code>，即快指针走了慢指针两倍的路程。</li><li>快指针比慢指针多走了 n 个环的长度，即<code>f = s + nb</code>，即双指针在环外都走了 a 步，在相遇时快指针比慢指针多走了整数倍环的长度。</li><li>代入可推出：<code>f = 2nb</code> ，<code>s = nb</code>，即快慢指针分别走了<code>2n</code>，<code>n</code>个环的周长。</li></ul><p>上述完成了证明有环的过程，并在数学上解释了双指针走的具体步数，下面证明如何找到环的起点问题：</p><ul><li>将快指针位置重置到链表首节点，慢指针不变，此时相当于快指针走了0步，慢指针走了 nb 步。</li><li>双指针同时向前走，每次走一步。</li><li>当快指针走了 a 步时，慢指针刚好走了 a + nb 步，即<strong>两指针在链表环起点重合</strong>。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fast, slow = head, head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (fast <span class="keyword">and</span> fast.next):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            fast, slow = fast.next.next, slow.next</span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast != slow:</span><br><span class="line">            fast, slow = fast.next, slow.next</span><br><span class="line">        <span class="keyword">return</span> fast</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，就慢指针分析，两段路程长度均小于链表长度，加起来整体也在 n 的倍数级内，所以整体时间复杂度为<code>O(n)</code>；空间复杂度：<code>O(1)</code>，只需要常数空间。</p><p><img src="https://ae01.alicdn.com/kf/H63714db65de34d62be4f6c136e5adb7aV.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题解题思路同前面<a href="http://imooner.com/2019/09/18/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">环形链表</a>基本一致，方法一代码几乎都没变，关键在于方法二中快慢双指针的运用。这道题提供的经验是有时候解题需要考虑一些数学的推导，不能只是简单的大致算一下，是需要真正的用笔去计算和推导。另外理论上的解题过程还得转换成实际的代码，这又得需要一番思考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环形链表-II&quot;&gt;&lt;a href=&quot;#环形链表-II&quot; class=&quot;headerlink&quot; title=&quot;环形链表 II&quot;&gt;&lt;/a&gt;环形链表 II&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>环形链表</title>
    <link href="http://yoursite.com/2019/09/18/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/18/环形链表/</id>
    <published>2019-09-18T13:56:00.000Z</published>
    <updated>2019-09-18T14:10:52.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，判断链表中是否有环。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p><strong>示例1：</strong></p><blockquote><p>输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47156a56b6e40228df2545ca752af4bJ.png" alt="1"></p><p><strong>示例2：</strong></p><blockquote><p>输入：head = [1,2], pos = 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47d92b5a1344845a7873db8852b5c72T.png" alt="2"></p><p><strong>示例3：</strong></p><blockquote><p>输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。</p></blockquote><p><strong>进阶：</strong></p><p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题其实可以理解为找某个节点是否已经存在在已知节点中，为了提高查找效率，我们采用字典存储已知节点，将节点作为键，值任意都行。遍历所有节点，每一次在字典中查找是否存在当前节点的键，如果有即表明链表有环，返回<code>true</code>，没有则将该节点作为新的键加入到字典中。遍历完所有节点后还没有找到则表示链表无环，返回<code>false</code>即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> temp.get(head):</span><br><span class="line">                temp[head] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，最坏循环遍历一次所有节点；空间复杂度：<code>O(n)</code>，需要一个字典存储所有节点。</p><p><img src="https://ae01.alicdn.com/kf/H8d305f48cee84762aaaa5b5b6642d3b9T.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为链表里面可能有环，所有我们可以借助快慢双指针来解题。快指针一次后移两步，慢指针一次后移一步，假设链表有环，那么快指针在进入环后一定会追上慢指针，反之没有环的话快指针会直接走到链表尾部。这样就免去了额外的空间取存储所有的节点。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fast, slow = head, head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，最坏循环遍历一次所有节点；空间复杂度：<code>O(1)</code>，只需要常数空间。</p><p><img src="https://ae01.alicdn.com/kf/H07d2284d39e24d10902a9154a06f9955d.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始只想到了用额外存储节点的方式解题，这样虽然借助内置结构比较容易解题，但是方法可能会不通用，同时空间上会有消耗过高的风险。通过这道题又积累了有关快慢双指针的经验，在链表或者数组中，需要比较前后的值的情况可能都会应用到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;环形链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>旋转链表</title>
    <link href="http://yoursite.com/2019/09/17/%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/17/旋转链表/</id>
    <published>2019-09-17T13:29:00.000Z</published>
    <updated>2019-09-17T13:29:51.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotate-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，旋转链表，将链表每个节点向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例1：</strong></p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2<br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4<br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这道题，稍加分析便知道节点的移动可以将其理解为首尾节点的变化，如果将整个链表看成循环链表，即首尾节点相连，移动几位便是将倒数第几个节点作为新的首节点，但是这是在k小于链表长度时的情况。当k大于链表长度时，此时k等价于<code>k%length</code>，即移动了完整的一圈还要多多少。所以找到了新的首节点，此时新的尾节点便是新的首节点的前一个节点，将二者之间断开，返回新的首节点即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 空链表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># k=0或者链表长度为1</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历链表得到链表长度，同时将链表连成环</span></span><br><span class="line">        temp = head</span><br><span class="line">        length = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> temp.next:</span><br><span class="line">            temp = temp.next</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        temp.next = head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到新的链表首尾节点，断开尾节点</span></span><br><span class="line">        q = head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(length - k % length - <span class="number">1</span>):</span><br><span class="line">            q = q.next</span><br><span class="line">        new_h = q.next</span><br><span class="line">        q.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_h</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(n)</code>，主要花费在遍历所有节点以找到链表长度上；空间复杂度：<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/Hf27dba42313843c2b7b661d8d35be44eD.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始思考时并没有将链表连成环，不过也是找到新的首尾节点，但是多一步将原来的尾节点与原来的首节点相连，这样需要多次判断链表是否已经到了尾部，比较繁琐，而先将链表首位相连就会减少很多判断，思路也比较清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;旋转链表&quot;&gt;&lt;a href=&quot;#旋转链表&quot; class=&quot;headerlink&quot; title=&quot;旋转链表&quot;&gt;&lt;/a&gt;旋转链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>合并两个有序链表</title>
    <link href="http://yoursite.com/2019/09/16/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/16/合并两个有序链表/</id>
    <published>2019-09-16T08:04:00.000Z</published>
    <updated>2019-09-16T08:05:01.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看题很快可以想到归并排序，思路也很简单，挨个取出每个链表中的数，比较大小，将小的一个加入结果链表中，一直比较直到达到某一链表尾部，此时再将另外一个不为空的链表剩余元素全部加入到结果链表中，返回结果链表首节点即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        head = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                res.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            res = res.next</span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            res.next = l1</span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            res.next = l2</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H94dd58785b284384976479de8c3b3ed1v.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目难度不高，关键在于归并排序的思想，还有注意链表中的边界问题以及首节点问题即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;合并两个有序链表&quot;&gt;&lt;a href=&quot;#合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;合并两个有序链表&quot;&gt;&lt;/a&gt;合并两个有序链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>两数相加</title>
    <link href="http://yoursite.com/2019/09/15/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2019/09/15/两数相加/</id>
    <published>2019-09-15T12:28:00.000Z</published>
    <updated>2019-09-15T12:39:30.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例：</strong></p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>解题思路整体不复杂，就是模拟人脑计算两个数相加的过程，从最后一位依次相加加到最高位，注意计算每一位时是否向上一位有进的数，同时当两个数位数不一致时，短的数高位不足可以看作0。<strong>终止计算条件：两个数每一位都计算完毕，且此时无需要向上一位进的数。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        res = node = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 记录向上一位进多少</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断当前节点是否为空，为空则以0处理</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                val_l1 = l1.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val_l1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                val_l2 = l2.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val_l2 = <span class="number">0</span></span><br><span class="line">            val_sum = val_l1 + val_l2 + temp</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算当前位值以及向上一位进多少</span></span><br><span class="line">            val_node = val_sum % <span class="number">10</span></span><br><span class="line">            temp = val_sum // <span class="number">10</span></span><br><span class="line">            node.val = val_node</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果节点非空才更新其指向下一节点</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                l2 = l2.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前节点以及待进的数中任一非空都进行下一位的计算</span></span><br><span class="line">            <span class="keyword">if</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> temp:</span><br><span class="line">                node.next = ListNode(<span class="number">0</span>)</span><br><span class="line">                node = node.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Hd985b8766f7d42adb31b14fba57d7f7cR.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体思路不复杂，难点在于边界上，什么时候表示计算完毕，在一开始时没有注意到当每一位都计算完成后还有进位的情况，直接终止计算而将进位丢掉了。代码可能不够简洁，判断语句过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;两数相加&quot;&gt;&lt;a href=&quot;#两数相加&quot; class=&quot;headerlink&quot; title=&quot;两数相加&quot;&gt;&lt;/a&gt;两数相加&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
