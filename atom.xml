<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moon&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-22T13:05:05.900Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>moon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>json转换为csv</title>
    <link href="http://yoursite.com/2019/09/22/json%E8%BD%AC%E6%8D%A2%E4%B8%BAcsv/"/>
    <id>http://yoursite.com/2019/09/22/json转换为csv/</id>
    <published>2019-09-22T12:59:00.000Z</published>
    <updated>2019-09-22T13:05:05.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前在手机上用了一个记账号密码的软件：【<a href="https://www.coolapk.com/apk/com.shiguiyou.remberpassword" target="_blank" rel="noopener">记住密码</a>】，在换手机之后打算将原手机（安卓8）上的账号密码备份导入到新手机（安卓9）的软件里，结果发现该软件安卓9闪退，无法使用，并且发现该软件作者已经停止维护。无奈另寻了一个同类软件：【<a href="https://www.coolapk.com/apk/com.wei.account" target="_blank" rel="noopener">账号本子</a>】，该软件也支持导入导出功能，并且支持的文件格式多样。因为记录的账号太多了，几十个，为了偷懒，边想着能不能将原软件导出的账号文件修改一下格式导入到新的软件内。由于两个软件支持的文件格式虽然相同，但是在内容结构上有所差异，所以需要将旧软件导出的json格式的账号密码文件转为新软件支持导入的csv格式文件。</p><h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><p>旧软件导出的文件为json文件，每个账号有五个键值对，分别是账号的名称、账号、密码、分类、备注（可为空），具体如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"测试1"</span>,</span><br><span class="line">        <span class="attr">"account"</span>: <span class="string">"test1"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"工具"</span>,</span><br><span class="line">        <span class="attr">"note"</span>: <span class="string">"这是备注"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"测试2"</span>,</span><br><span class="line">        <span class="attr">"account"</span>: <span class="string">"test2"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"123456789"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"学习"</span>,</span><br><span class="line">        <span class="attr">"note"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]s</span><br></pre></td></tr></table></figure><p>新软件支持的导入文件为csv文件，对于每个账号来说，如果要和上述账号对应的话，有六个关键字，分别是分类、置顶、名称、账号、密码、备注（可为空），同时该文件前五行为提示语句并且必不可少，账号从第六行开始填充，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：此模板仅适用于账号本子5.0.0及以上的版本,,,,,</span><br><span class="line">必填：分组名称5个字以内，名称50个字以内，账号50个字以内,,,,,</span><br><span class="line">必填：置顶默认为T0，表示不置顶，数字越大越靠前，如：T100,,,,,</span><br><span class="line">选填：自定义项用_@X@_连接，如：密码_@X@_12345，最多20个自定义项,,,,,</span><br><span class="line">分组(必填),置顶(必填),名称(必填),账号(必填),自定义项目,</span><br><span class="line">测试分组1,T1539155205062,测试账号1,13800138000,密码_@X@_abc123456,备注_@X@_自己加的</span><br><span class="line">测试分组2,T0,测试账号2,10086,密码_@X@_abc123456,</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>通过python的json库，先将json文件打开，读取其中内容并转换成字典，此时每个账号即为字典内的一个键值对。遍历该字典，取出每个账号的具体信息，将其按csv文件内格式顺序填充进一个数组内。需注意备注信息如果原json内该账号没有，那么在新的csv文件内账号的该字段置空，不然软件会识别错误。然后将该数组以逗号分隔转换成字符串，再写入csv文件中，同时注意换行，csv文件内一行存储一个账号信息。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 原账号文件，json格式，'utf-8'编码</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'user.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        temp.append(i[<span class="string">'type'</span>])</span><br><span class="line">        temp.append(<span class="string">'T0'</span>)</span><br><span class="line">        temp.append(i[<span class="string">'title'</span>])</span><br><span class="line">        temp.append(i[<span class="string">'account'</span>])</span><br><span class="line">        temp.append(<span class="string">'密码_@X@_'</span> + i[<span class="string">'password'</span>])</span><br><span class="line">        <span class="comment"># 备注可能为空，为空时新账号文件内该字段不填</span></span><br><span class="line">        <span class="keyword">if</span> i[<span class="string">'note'</span>]:</span><br><span class="line">            temp.append(<span class="string">'备注_@X@_'</span> + i[<span class="string">'note'</span>])</span><br><span class="line">        w_str = <span class="string">','</span>.join(temp)</span><br><span class="line">        <span class="comment"># 新账号文件注意编码为'GB2312'</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'user.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'GB2312'</span>) <span class="keyword">as</span> res:</span><br><span class="line">            res.write(w_str + <span class="string">'\n'</span>)</span><br><span class="line">            temp = []</span><br></pre></td></tr></table></figure><h1 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h1><ul><li>json_to_csv.exe——编译后的程序，可以在Windows环境下直接运行</li><li>json_to_csv.py ——程序源代码文件</li><li>user.csv——新软件支持的备份文件，程序执行后，原账号信息会被填充到里面，’GB2312’编码</li><li>user.json——旧软件支持的备份文件，由旧软件导出，’uft-8’ 编码</li><li>user（模板）.csv ——对新软件支持的备份文件内容进行说明</li></ul><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><p><strong>方法一（Windows环境）：</strong></p><ul><li>下载项目文件压缩包，全部解压出来</li><li>将你从旧软件导出的备份文件改名为<code>user.json</code>，再将其与项目文件夹里的<code>json_to_csv.exe</code>文件和<code>user.csv</code>文件放入同一个文件夹内</li><li>双击<code>json_to_csv.exe</code>执行程序，会有一个命令行窗口一闪而过，账号信息即被复制到了<code>user.csv</code>文件内</li><li>将<code>user.csv</code>传到手机，打开【账号本子】，在数据备份恢复功能中选择<code>明文CSV</code>一项进行导入，选择<code>user.csv</code>文件即可</li></ul><p><strong>方法二（已配置好python3的任意环境）：</strong></p><ul><li>下载项目文件压缩包，全部解压出来</li><li>将你从旧软件导出的备份文件改名为<code>user.json</code>，再将其与项目文件夹里的<code>json_to_csv.py</code>文件和<code>user.csv</code>文件放入同一个文件夹内，假设为<code>temp</code></li><li>在<code>temp</code>文件夹位置打开命令行，执行下述命令：<code>python json_to_csv.py</code>，账号信息即被复制到了<code>user.csv</code>文件内</li><li>将<code>user.csv</code>传到手机，打开【账号本子】，在数据备份恢复功能中选择<code>明文CSV</code>一项进行导入，选择<code>user.csv</code>文件即可</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这只是一个很小很小的程序，甚至都算不上项目，需求也很简单，但是如果认真地去对待、完善，还是可以学到很多东西。比如说对于一个项目来说，代码只是一部分，关键的是怎么将需求一步一步地转换成实际的解决思路，再用代码去实现。另外这也体现了学以致用的思想，将学到的东西应用到实际生活中，会让人更有动力地去学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前在手机上用了一个记账号密码的软件：【&lt;a href=&quot;https://www.coolapk.com/apk/com.shiguiyou
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="csv" scheme="http://yoursite.com/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>删除链表中的节点</title>
    <link href="http://yoursite.com/2019/09/22/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2019/09/22/删除链表中的节点/</id>
    <published>2019-09-22T08:07:00.000Z</published>
    <updated>2019-09-22T08:20:24.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除链表中的节点"><a href="#删除链表中的节点" class="headerlink" title="删除链表中的节点"></a>删除链表中的节点</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-node-in-a-linked-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:</p><p><img src="https://ae01.alicdn.com/kf/H6355733712ff4e8fb56eff127507f47eS.png" alt="题图"></p><p><strong>示例1：</strong></p><blockquote><p>输入: head = [4,5,1,9], node = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: head = [4,5,1,9], node = 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p></blockquote><p><strong>说明:</strong></p><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题题目可能表述有点难理解，其实就是给出一个链表中的节点，在链表中就地删除该节点，无返回值，同时该链表还满足上述的说明条件。乍一看删除一个链表中的节点需要将该节点与链表的每一个节点进行比较，直到找到该节点后改变其前后节点的连接情况才算删除了该节点。但是此题没有给出链表的首节点，所以我们找不到待删除节点的前驱，也就无法改变其前驱的后继。然后我们换一个思路，既然无法改变待删除节点前驱的后继，那么我们<strong>直接将待删除节点值变为其后继节点值，然后跳过其后继节点，使待删除节点直接与其后继的后继节点相连（即用待删除节点代替其后继节点）</strong>，不就相当于删除了目标节点了吗。并且该链表满足题目所给说明条件，所以边界情况即待删除节点为链表倒数第二个节点，也可以用上述方法解决。</p><p><em>注：可能我说的有点拗口，结合具体例子或者图像可以更好的理解，这个方法很巧妙，有点脑筋急转弯的感觉。</em></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node.val = node.next.val</span><br><span class="line">        node.next = node.next.next</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>不用多说，时间复杂度与空间复杂度都是<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/He58bb00da11f485e81829065903939eaQ.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链表的操作基本上都是修改节点的引用，但是有时候也可以考虑修改节点的值从而更巧妙的满足要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;删除链表中的节点&quot;&gt;&lt;a href=&quot;#删除链表中的节点&quot; class=&quot;headerlink&quot; title=&quot;删除链表中的节点&quot;&gt;&lt;/a&gt;删除链表中的节点&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://yoursite.com/2019/09/21/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/21/反转链表/</id>
    <published>2019-09-21T09:20:00.000Z</published>
    <updated>2019-09-21T09:23:49.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>反转一个单链表。</p><p><strong>示例：</strong></p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>迭代法，遍历整个链表，记录下每个节点的前驱和后继，改变当前节点的前驱和后继。注意新链表的尾节点后继置为空，每个节点先记录再改变，最后返回的是原链表的首节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            temp_next = curr.next</span><br><span class="line">            curr.next = prev</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = temp_next</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，遍历一次链表的所有节点；空间复杂度：<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H7856212b980a49d9a59d3b0a80176719z.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>采用递归方式，从原链表尾部开始，反向依次改变每个节点的后继。由于递归的每一层会记录当前的节点，所以只需要关注当前节点与其后继节点在新链表中的前后关系，同时注意及时断掉原链表的前后关系。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 加上head为空的判断是为了排除空链表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># p记录的是原链表尾节点，即新链表首节点</span></span><br><span class="line">        p = self.reverseList(head.next)</span><br><span class="line">        <span class="comment"># 注意这句代码的关系，可画图理解</span></span><br><span class="line">        head.next.next = head</span><br><span class="line">        <span class="comment"># 及时断掉原链表的节点后继</span></span><br><span class="line">        head.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，还是会遍历所有节点；空间复杂度：<code>O(n)</code>，递归栈的调用有n层。</p><p><img src="https://ae01.alicdn.com/kf/H5748bd7bc0954a0fb0e9dee520737ebdM.png" alt="方法二提交"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>因为要倒序的获取每个节点，所以可以借助栈，先将所有节点存入栈中，再依次出栈并连接起来，关键点在于最后一个节点的后继需置空，否则由于其原来有指向的节点，所以会导致链表中有循环。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        stack = []</span><br><span class="line">        res = temp = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            stack.append(head)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(stack)):</span><br><span class="line">            temp.next = stack.pop()</span><br><span class="line">            temp = temp.next</span><br><span class="line">        temp.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> res.next</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，两次遍历所有链表节点；空间复杂度：<code>O(n)</code>，栈的空间。</p><p><img src="https://ae01.alicdn.com/kf/H856e5704f84a4403b919915dbe4a81bfN.png" alt="方法三提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目难度不高却很基础，方法一的迭代方式应该是必须要掌握的，需注意里面的节点需先记录再改变；方法二的递归方式代码虽然比较简洁，但是理解起来有点困难，可以单步在纸上画一下节点的连接情况以及变化；至于方法三，虽然时空间效率都不算高，但是思路很清晰，理解起来不复杂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>相交链表</title>
    <link href="http://yoursite.com/2019/09/20/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/20/相交链表/</id>
    <published>2019-09-20T13:00:00.000Z</published>
    <updated>2019-09-20T13:05:05.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表：</p><p><img src="https://ae01.alicdn.com/kf/H25afaf0d23f541b9ad273e3dd8239d61Z.png" alt="示例"></p><p>在节点 c1 开始相交。</p><p><strong>示例1：</strong></p><p><img src="https://ae01.alicdn.com/kf/H80cb9f87820d45878998d4001072085a7.png" alt="1"></p><blockquote><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p></blockquote><p><strong>示例2：</strong></p><p><img src="https://ae01.alicdn.com/kf/H41de7a84afbf4b08be6a79bcc0c37fcf7.png" alt="2"></p><blockquote><p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Reference of the node with value = 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p></blockquote><p><strong>示例3：</strong></p><p><img src="https://ae01.alicdn.com/kf/Ha6c6b83e870746cc9355c84455018fa6F.png" alt="3"></p><blockquote><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p></blockquote><p><strong>注意：</strong></p><ul><li>如果两个链表没有交点，返回 null 。</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果要保证空间复杂度在常数级内，那么可以采用双指针的方式。通过观察我们可以发现，如果两个链表有相交，那么它们在某一节点后有重合，重合后的节点长度相同，而在重合前的节点长度是不一定相等的。我们先将长链表比短链表多的那部分先过滤掉，因为这部分里一定不会重合，重合部分一定在短链表的节点内。然后此时两链表长度相同，就分别依次取其节点进行比较，步长均为1，判断是否为同一节点，如果相同则表示该节点为相加部分起点，直到达到链表尾还未发现相同节点则表明两链表没有相交。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA, headB)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head1, head1: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lenA, lenB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        tempA, tempB = headA, headB</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取两个链表长度</span></span><br><span class="line">        <span class="keyword">while</span> tempA:</span><br><span class="line">            lenA += <span class="number">1</span></span><br><span class="line">            tempA = tempA.next</span><br><span class="line">        <span class="keyword">while</span> tempB:</span><br><span class="line">            lenB += <span class="number">1</span></span><br><span class="line">            tempB = tempB.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 过滤长链表前面多余部分</span></span><br><span class="line">        <span class="keyword">if</span> lenA &lt; lenB:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(lenB - lenA):</span><br><span class="line">                headB = headB.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(lenA - lenB):</span><br><span class="line">                headA = headA.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断两链表是否有相交</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(min(lenA, lenB)):</span><br><span class="line">            <span class="keyword">if</span> headA == headB:</span><br><span class="line">                <span class="keyword">return</span> headA</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                headA = headA.next</span><br><span class="line">                headB = headB.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(n)</code>，每个链表都会完整遍历两次；空间复杂度：<code>O(1)</code>，只需要常数级的空间。</p><p><img src="https://ae01.alicdn.com/kf/Hacb0e90d304d4ef39e080c01cc7c412f9.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此题难度不高，如果空间上没有要求的话还可以参见前面环形链表的方法一，用一个字典存储某一链表的所有节点，然后遍历另外一个链表的所有节点，判断每一个节点是否在字典中，是则表示该节点为相交部分的起点，返回即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相交链表&quot;&gt;&lt;a href=&quot;#相交链表&quot; class=&quot;headerlink&quot; title=&quot;相交链表&quot;&gt;&lt;/a&gt;相交链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>环形链表 II</title>
    <link href="http://yoursite.com/2019/09/19/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/"/>
    <id>http://yoursite.com/2019/09/19/环形链表-II/</id>
    <published>2019-09-19T11:35:00.000Z</published>
    <updated>2019-09-19T11:43:29.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环形链表-II"><a href="#环形链表-II" class="headerlink" title="环形链表 II"></a>环形链表 II</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p><strong>说明</strong>：不允许修改给定的链表。</p><p><strong>示例1：</strong></p><blockquote><p>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47156a56b6e40228df2545ca752af4bJ.png" alt="1"></p><p><strong>示例2：</strong></p><blockquote><p>输入：head = [1,2], pos = 0<br>输出：tail connects to node index 0<br>解释：链表中有一个环，其尾部连接到第一个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47d92b5a1344845a7873db8852b5c72T.png" alt="2"></p><p><strong>示例3：</strong></p><blockquote><p>输入：head = [1], pos = -1<br>输出：no cycle<br>解释：链表中没有环。</p></blockquote><p><strong>进阶：</strong><br>你是否可以不用额外空间解决此题？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题其实可以理解为找某个节点是否已经存在在已知节点中，为了提高查找效率，我们采用字典存储已知节点，将节点作为键，值任意都行。遍历所有节点，每一次在字典中查找是否存在当前节点的键，如果有即表明链表有环，返回当前节点，没有则将该节点作为新的键加入到字典中。遍历完所有节点后还没有找到则表示链表无环，返回<code>None</code>即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> temp.get(head):</span><br><span class="line">                temp[head] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，最坏循环遍历一次所有节点；空间复杂度：<code>O(n)</code>，需要一个字典存储所有节点。</p><p><img src="https://ae01.alicdn.com/kf/Hfd561f47408549a497585837e5c14798f.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同样像<a href="http://imooner.com/2019/09/18/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">环形链表方法二</a>一样，借助快慢双指针解题，只是这次不仅要证明链表有环，而且还要找到环的起点。经过数学的分析可以准确知道快慢指针怎么移动会刚好在链表的环起点相遇，具体分析如下：</p><ul><li>设链表首节点走到环起点要走a步，环内走一圈要走b步，则链表总长度为a+b。</li><li>快慢指针第一次相遇时设其分别走了<code>f, s</code>步，则有<code>f = 2s</code>，即快指针走了慢指针两倍的路程。</li><li>快指针比慢指针多走了 n 个环的长度，即<code>f = s + nb</code>，即双指针在环外都走了 a 步，在相遇时快指针比慢指针多走了整数倍环的长度。</li><li>代入可推出：<code>f = 2nb</code> ，<code>s = nb</code>，即快慢指针分别走了<code>2n</code>，<code>n</code>个环的周长。</li></ul><p>上述完成了证明有环的过程，并在数学上解释了双指针走的具体步数，下面证明如何找到环的起点问题：</p><ul><li>将快指针位置重置到链表首节点，慢指针不变，此时相当于快指针走了0步，慢指针走了 nb 步。</li><li>双指针同时向前走，每次走一步。</li><li>当快指针走了 a 步时，慢指针刚好走了 a + nb 步，即<strong>两指针在链表环起点重合</strong>。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fast, slow = head, head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (fast <span class="keyword">and</span> fast.next):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            fast, slow = fast.next.next, slow.next</span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast != slow:</span><br><span class="line">            fast, slow = fast.next, slow.next</span><br><span class="line">        <span class="keyword">return</span> fast</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，就慢指针分析，两段路程长度均小于链表长度，加起来整体也在 n 的倍数级内，所以整体时间复杂度为<code>O(n)</code>；空间复杂度：<code>O(1)</code>，只需要常数空间。</p><p><img src="https://ae01.alicdn.com/kf/H63714db65de34d62be4f6c136e5adb7aV.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题解题思路同前面<a href="http://imooner.com/2019/09/18/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">环形链表</a>基本一致，方法一代码几乎都没变，关键在于方法二中快慢双指针的运用。这道题提供的经验是有时候解题需要考虑一些数学的推导，不能只是简单的大致算一下，是需要真正的用笔去计算和推导。另外理论上的解题过程还得转换成实际的代码，这又得需要一番思考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环形链表-II&quot;&gt;&lt;a href=&quot;#环形链表-II&quot; class=&quot;headerlink&quot; title=&quot;环形链表 II&quot;&gt;&lt;/a&gt;环形链表 II&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>环形链表</title>
    <link href="http://yoursite.com/2019/09/18/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/18/环形链表/</id>
    <published>2019-09-18T13:56:00.000Z</published>
    <updated>2019-09-18T14:10:52.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，判断链表中是否有环。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p><strong>示例1：</strong></p><blockquote><p>输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47156a56b6e40228df2545ca752af4bJ.png" alt="1"></p><p><strong>示例2：</strong></p><blockquote><p>输入：head = [1,2], pos = 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha47d92b5a1344845a7873db8852b5c72T.png" alt="2"></p><p><strong>示例3：</strong></p><blockquote><p>输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。</p></blockquote><p><strong>进阶：</strong></p><p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题其实可以理解为找某个节点是否已经存在在已知节点中，为了提高查找效率，我们采用字典存储已知节点，将节点作为键，值任意都行。遍历所有节点，每一次在字典中查找是否存在当前节点的键，如果有即表明链表有环，返回<code>true</code>，没有则将该节点作为新的键加入到字典中。遍历完所有节点后还没有找到则表示链表无环，返回<code>false</code>即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> temp.get(head):</span><br><span class="line">                temp[head] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，最坏循环遍历一次所有节点；空间复杂度：<code>O(n)</code>，需要一个字典存储所有节点。</p><p><img src="https://ae01.alicdn.com/kf/H8d305f48cee84762aaaa5b5b6642d3b9T.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为链表里面可能有环，所有我们可以借助快慢双指针来解题。快指针一次后移两步，慢指针一次后移一步，假设链表有环，那么快指针在进入环后一定会追上慢指针，反之没有环的话快指针会直接走到链表尾部。这样就免去了额外的空间取存储所有的节点。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fast, slow = head, head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间复杂度：<code>O(n)</code>，最坏循环遍历一次所有节点；空间复杂度：<code>O(1)</code>，只需要常数空间。</p><p><img src="https://ae01.alicdn.com/kf/H07d2284d39e24d10902a9154a06f9955d.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始只想到了用额外存储节点的方式解题，这样虽然借助内置结构比较容易解题，但是方法可能会不通用，同时空间上会有消耗过高的风险。通过这道题又积累了有关快慢双指针的经验，在链表或者数组中，需要比较前后的值的情况可能都会应用到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;环形链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>旋转链表</title>
    <link href="http://yoursite.com/2019/09/17/%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/17/旋转链表/</id>
    <published>2019-09-17T13:29:00.000Z</published>
    <updated>2019-09-17T13:29:51.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotate-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，旋转链表，将链表每个节点向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例1：</strong></p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2<br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4<br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这道题，稍加分析便知道节点的移动可以将其理解为首尾节点的变化，如果将整个链表看成循环链表，即首尾节点相连，移动几位便是将倒数第几个节点作为新的首节点，但是这是在k小于链表长度时的情况。当k大于链表长度时，此时k等价于<code>k%length</code>，即移动了完整的一圈还要多多少。所以找到了新的首节点，此时新的尾节点便是新的首节点的前一个节点，将二者之间断开，返回新的首节点即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 空链表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># k=0或者链表长度为1</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历链表得到链表长度，同时将链表连成环</span></span><br><span class="line">        temp = head</span><br><span class="line">        length = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> temp.next:</span><br><span class="line">            temp = temp.next</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        temp.next = head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到新的链表首尾节点，断开尾节点</span></span><br><span class="line">        q = head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(length - k % length - <span class="number">1</span>):</span><br><span class="line">            q = q.next</span><br><span class="line">        new_h = q.next</span><br><span class="line">        q.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_h</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>时间复杂度：<code>O(n)</code>，主要花费在遍历所有节点以找到链表长度上；空间复杂度：<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/Hf27dba42313843c2b7b661d8d35be44eD.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始思考时并没有将链表连成环，不过也是找到新的首尾节点，但是多一步将原来的尾节点与原来的首节点相连，这样需要多次判断链表是否已经到了尾部，比较繁琐，而先将链表首位相连就会减少很多判断，思路也比较清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;旋转链表&quot;&gt;&lt;a href=&quot;#旋转链表&quot; class=&quot;headerlink&quot; title=&quot;旋转链表&quot;&gt;&lt;/a&gt;旋转链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>合并两个有序链表</title>
    <link href="http://yoursite.com/2019/09/16/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/16/合并两个有序链表/</id>
    <published>2019-09-16T08:04:00.000Z</published>
    <updated>2019-09-16T08:05:01.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看题很快可以想到归并排序，思路也很简单，挨个取出每个链表中的数，比较大小，将小的一个加入结果链表中，一直比较直到达到某一链表尾部，此时再将另外一个不为空的链表剩余元素全部加入到结果链表中，返回结果链表首节点即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        head = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                res.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            res = res.next</span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            res.next = l1</span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            res.next = l2</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H94dd58785b284384976479de8c3b3ed1v.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目难度不高，关键在于归并排序的思想，还有注意链表中的边界问题以及首节点问题即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;合并两个有序链表&quot;&gt;&lt;a href=&quot;#合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;合并两个有序链表&quot;&gt;&lt;/a&gt;合并两个有序链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>两数相加</title>
    <link href="http://yoursite.com/2019/09/15/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2019/09/15/两数相加/</id>
    <published>2019-09-15T12:28:00.000Z</published>
    <updated>2019-09-15T12:39:30.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例：</strong></p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>解题思路整体不复杂，就是模拟人脑计算两个数相加的过程，从最后一位依次相加加到最高位，注意计算每一位时是否向上一位有进的数，同时当两个数位数不一致时，短的数高位不足可以看作0。<strong>终止计算条件：两个数每一位都计算完毕，且此时无需要向上一位进的数。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        res = node = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 记录向上一位进多少</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断当前节点是否为空，为空则以0处理</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                val_l1 = l1.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val_l1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                val_l2 = l2.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val_l2 = <span class="number">0</span></span><br><span class="line">            val_sum = val_l1 + val_l2 + temp</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算当前位值以及向上一位进多少</span></span><br><span class="line">            val_node = val_sum % <span class="number">10</span></span><br><span class="line">            temp = val_sum // <span class="number">10</span></span><br><span class="line">            node.val = val_node</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果节点非空才更新其指向下一节点</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                l2 = l2.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前节点以及待进的数中任一非空都进行下一位的计算</span></span><br><span class="line">            <span class="keyword">if</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> temp:</span><br><span class="line">                node.next = ListNode(<span class="number">0</span>)</span><br><span class="line">                node = node.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Hd985b8766f7d42adb31b14fba57d7f7cR.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体思路不复杂，难点在于边界上，什么时候表示计算完毕，在一开始时没有注意到当每一位都计算完成后还有进位的情况，直接终止计算而将进位丢掉了。代码可能不够简洁，判断语句过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;两数相加&quot;&gt;&lt;a href=&quot;#两数相加&quot; class=&quot;headerlink&quot; title=&quot;两数相加&quot;&gt;&lt;/a&gt;两数相加&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>除自身以外数组的乘积</title>
    <link href="http://yoursite.com/2019/09/13/%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/09/13/除自身以外数组的乘积/</id>
    <published>2019-09-13T06:44:00.000Z</published>
    <updated>2019-09-13T06:49:09.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="除自身以外数组的乘积"><a href="#除自身以外数组的乘积" class="headerlink" title="除自身以外数组的乘积"></a>除自身以外数组的乘积</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/product-of-array-except-self/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定长度为 n 的整数数组 nums，其中 n &gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。</p><p><strong>示例：</strong></p><blockquote><p>输入: [1,2,3,4]<br>输出: [24,12,8,6]</p></blockquote><p><strong>说明</strong>: 请<strong>不要使用除法</strong>，且在 O(n) 时间复杂度内完成此题。</p><p><strong>进阶：</strong><br>你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于数组内的每个数，除了该数以外的每个数之积可以看作两部分，该数前面的元素之积和后面的元素之积，两部分相乘即可。这样我们就可以分别计算两部分，具体查看代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        res = [<span class="number">1</span>]</span><br><span class="line">        p, q = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="comment"># 依次添加nums[0],nums[0]*nums[1],...,nums[0]*nums[1]*...*nums[n-2]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            p *= nums[i]</span><br><span class="line">            res.append(p)</span><br><span class="line">        <span class="comment"># 依次将nums[n-1],nums[n-1]*nums[n-2],...,nums[n-1]*...*nums[1]与前述数组内元素相乘</span></span><br><span class="line">        <span class="comment"># 注意序号相差一位</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            q *= nums[i]</span><br><span class="line">            res[i<span class="number">-1</span>] *= q</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H6a8089f4ba044eecaad036d5616480848.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述方法参考了<a href="https://leetcode-cn.com/problems/product-of-array-except-self/solution/product-of-array-except-self-shang-san-jiao-xia-sa/" target="_blank" rel="noopener">大佬的题解</a>，通过原题解的表格，可以更好的理解该方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;除自身以外数组的乘积&quot;&gt;&lt;a href=&quot;#除自身以外数组的乘积&quot; class=&quot;headerlink&quot; title=&quot;除自身以外数组的乘积&quot;&gt;&lt;/a&gt;除自身以外数组的乘积&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/s
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>存在重复元素</title>
    <link href="http://yoursite.com/2019/09/12/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/09/12/存在重复元素/</id>
    <published>2019-09-12T13:02:00.000Z</published>
    <updated>2019-09-12T13:02:15.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/contains-duplicate/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/contains-duplicate/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><p><strong>示例1：</strong></p><blockquote><p>输入: [1,2,3,1]<br>输出: true</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: [1,2,3,4]<br>输出: false</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入: [1,1,1,3,3,4,3,2,4,2]<br>输出: true</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为数组是可以有重复元素的，而集合（set）内部是不会有重复元素的，所以我们可以将数组转换成集合，再看其长度是否减小了，如果是则表示数组内有重复元素，在转成集合时被消掉了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        temp = set(nums)</span><br><span class="line">        <span class="keyword">if</span> len(temp) &lt; len(nums):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/Hdb4bd20436d24a5e9f8a304fd114ddafH.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同样是借助某个内置结构，其要求内部元素唯一，这次是字典。在一次遍历的过程中，不断查询该元素是否已经在字典中，是则直接返回<code>true</code>，否则将其加入字典中，直到最后遍历完成，还没有重复元素的话返回<code>false</code>。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> temp.get(num):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp[num] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H3855a11e01c347208e1e3ffabde4a02do.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述两个方法都是借助了python内置的数据结构，大大简化了求解的过程。当然也可以采用暴力法，对于每一个数组内的元素，都与另外的元素进行比较，看是否有相同的，只是这样明显的效率不高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;存在重复元素&quot;&gt;&lt;a href=&quot;#存在重复元素&quot; class=&quot;headerlink&quot; title=&quot;存在重复元素&quot;&gt;&lt;/a&gt;存在重复元素&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;s
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机</title>
    <link href="http://yoursite.com/2019/09/11/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/09/11/买卖股票的最佳时机/</id>
    <published>2019-09-11T12:32:00.000Z</published>
    <updated>2019-09-11T12:32:54.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例1：</strong></p><blockquote><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题不是很难，我们要找的就是在一系列数中，前后相差最大的两个数之差（前小于后）。我们可以采用动态规划的思想来解决问题，通过观察计算得到一个通用公式：<strong>最大利润=max（前一天的最大利润，今天的价格 - 到目前为止最低价格）</strong>。通过遍历一次所有值即可得到最大利润。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> (len(prices) &lt;= <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        min_p = prices[<span class="number">0</span>]</span><br><span class="line">        max_p = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices)):</span><br><span class="line">            min_p = min(min_p, prices[i])</span><br><span class="line">            max_p = max(max_p, prices[i] - min_p)</span><br><span class="line">        <span class="keyword">return</span> max_p</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H319f255438c3489fa09eb03430ffe5b2C.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然也可以采用暴力法解决，求得每个值与其后面的每个值之差，再取最大值即可，只是这样时间复杂度为<code>O(n^2)</code>，而且可以明显感觉到效率低下。但是通过上述算法，不断地在遍历的过程中更新最优值，可以将时间复杂度降低为<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;买卖股票的最佳时机&quot;&gt;&lt;a href=&quot;#买卖股票的最佳时机&quot; class=&quot;headerlink&quot; title=&quot;买卖股票的最佳时机&quot;&gt;&lt;/a&gt;买卖股票的最佳时机&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/stron
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="http://yoursite.com/2019/09/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/09/10/合并两个有序数组/</id>
    <published>2019-09-10T11:45:00.000Z</published>
    <updated>2019-09-10T11:46:55.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-sorted-array/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p><strong>说明:</strong></p><ul><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li></ul><p><strong>示例：</strong></p><blockquote><p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],           n = 3</p><p>输出: [1,2,2,3,5,6]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实就合并两个有序数组来说，采用二路归并即可，但是可能需要额外的存储空间来存整个合并后的数组。题目要求在nums1上就地修改，所以如果依旧采用归并方式的话，需要先将nums1里面的元素复制到额外的数组里面，并且将nums1内部清空以方便存储结果。具体归并过程很简单，依次取出待排序的两个数组内的元素，比较大小将小的一个存入nums1中，最后将还没取完的剩余元素全部加入nums1中即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        temp = nums1[:m]</span><br><span class="line">        nums1[:] = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> temp[i] &lt;= nums2[j]:</span><br><span class="line">                nums1.append(temp[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1.append(nums2[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">            nums1[i+j:] = nums2[j:]</span><br><span class="line">        <span class="keyword">if</span> j == n:</span><br><span class="line">            nums1[i+j:] = temp[i:]</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H746dd06a45934065a89428bb3172b52a4.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始也想过其他的方法，比如先用归并排序好，再将已排序的元素依次填充到nums1中，但是这样就比直接添加到nums1中要慢一些。另外也想过采用插入的方式，但是这样还要删除多余的尾部元素，同时记录索引的指针也复杂一些，所以最后采用了上述方法去解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;合并两个有序数组&quot;&gt;&lt;a href=&quot;#合并两个有序数组&quot; class=&quot;headerlink&quot; title=&quot;合并两个有序数组&quot;&gt;&lt;/a&gt;合并两个有序数组&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>不同路径</title>
    <link href="http://yoursite.com/2019/09/08/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2019/09/08/不同路径/</id>
    <published>2019-09-08T14:29:00.000Z</published>
    <updated>2019-09-09T14:55:20.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-paths/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>问总共有多少条不同的路径？</p><p><img src="https://ae01.alicdn.com/kf/H84cfda867e6c4664bff14dc68bf1ba1du.png" alt="题图"></p><p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p><p><strong>说明：</strong>m 和 <em>n</em> 的值均不超过 100。</p><p><strong>示例1：</strong></p><blockquote><p>输入: m = 3, n = 2<br>输出: 3<br>解释:<br>从左上角开始，总共有 3 条路径可以到达右下角。</p><ol><li>向右 -&gt; 向右 -&gt; 向下</li><li>向右 -&gt; 向下 -&gt; 向右</li><li>向下 -&gt; 向右 -&gt; 向右</li></ol></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: m = 7, n = 3<br>输出: 28</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题我们主要关注动态规划的解法，模拟一个与网格相同规格的二维表格，表格内数字表示走到该格子的路径，大致如下：</p><table><thead><tr><th align="center">1</th><th align="center">1</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">1</td><td align="center">3</td><td align="center">6</td></tr><tr><td align="center">1</td><td align="center">4</td><td align="center">10</td></tr></tbody></table><p>可以发现每一个格子的数字为其上面和左面一个格子内的数字之和，第一列和第一行都是1。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [[<span class="number">1</span>]*n] + [[<span class="number">1</span>]+[<span class="number">0</span>] * (n<span class="number">-1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(m<span class="number">-1</span>)]</span><br><span class="line">        <span class="comment">#print(dp)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H02d7d178e5d8407082f573a5021e6cb0K.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天有点忙，暂时这么写，后续再修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不同路径&quot;&gt;&lt;a href=&quot;#不同路径&quot; class=&quot;headerlink&quot; title=&quot;不同路径&quot;&gt;&lt;/a&gt;不同路径&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>螺旋矩阵 II</title>
    <link href="http://yoursite.com/2019/09/08/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5-II/"/>
    <id>http://yoursite.com/2019/09/08/螺旋矩阵-II/</id>
    <published>2019-09-08T14:25:00.000Z</published>
    <updated>2019-09-08T14:25:42.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵-II"><a href="#螺旋矩阵-II" class="headerlink" title="螺旋矩阵 II"></a>螺旋矩阵 II</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/spiral-matrix-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/spiral-matrix-ii/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个正整数 <em>n</em>，生成一个包含 1 到 <em>n^2</em> 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p><strong>示例：</strong></p><blockquote><p>输入: 3<br>输出:<br>[<br> [ 1, 2, 3 ],<br> [ 8, 9, 4 ],<br> [ 7, 6, 5 ]<br>]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>借助上一道题的思路，同样是螺旋排列，这道题是螺旋填充，由于我们直到这是一个方阵，输入的数据也很好计算，所以关键点就只在于螺旋填充的方向问题了。与上一道题不同的是，此题可以采用用四个不同的变量记录矩阵上下左右四个边界的值，再按照从左到右、从上到下、从右到左、从下到上的顺序依次填充，每次填充完一行或一列后，更新此时的边界值（即边界不断缩小），将值从1到n^2填充完毕即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span><span class="params">(self, n: int)</span> -&gt; [[int]]:</span></span><br><span class="line">        l, r, t, b = <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">        mat = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        num, tar = <span class="number">1</span>, n * n</span><br><span class="line">        <span class="keyword">while</span> num &lt;= tar:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(l, r + <span class="number">1</span>):  <span class="comment"># left to right</span></span><br><span class="line">                mat[t][i] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            t += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(t, b + <span class="number">1</span>):  <span class="comment"># top to bottom</span></span><br><span class="line">                mat[i][r] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(r, l - <span class="number">1</span>, <span class="number">-1</span>):  <span class="comment"># right to left</span></span><br><span class="line">                mat[b][i] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            b -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(b, t - <span class="number">1</span>, <span class="number">-1</span>):  <span class="comment"># bottom to top</span></span><br><span class="line">                mat[i][l] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mat</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Heab1fbb488664f76a477370555f09c901.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题同样是螺旋排列，但是与上一道在代码中实现螺旋方向的方式不同，此题的实现方式简单易懂，挨着顺序来就行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;螺旋矩阵-II&quot;&gt;&lt;a href=&quot;#螺旋矩阵-II&quot; class=&quot;headerlink&quot; title=&quot;螺旋矩阵 II&quot;&gt;&lt;/a&gt;螺旋矩阵 II&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="http://yoursite.com/2019/09/07/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2019/09/07/螺旋矩阵/</id>
    <published>2019-09-07T14:17:00.000Z</published>
    <updated>2019-09-07T14:28:33.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/spiral-matrix/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含 <em>m</em> x <em>n</em> 个元素的矩阵（<em>m</em> 行, <em>n</em> 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p><strong>示例1：</strong></p><blockquote><p>输入:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]输出: [1,2,3,6,9,8,7,4,5]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由我们直觉可以得到，在螺旋输出时，遇到边界或者已经输出的元素，会顺时针改变访问方向。所以我们可以用一个等比例的数组，存放布尔变量以表示每个位置上的元素是否已经访问过。在索引边界的范围内，输出当前元素后，计算下一个将要访问的元素，判断该元素是否已经访问过，未访问的才加入输出结果中。但是此时有一个问题：我们访问数组内元素的顺序不是简单的一个一个访问，而是顺时针螺旋访问的，那么怎么表现这个顺时针螺旋的方向是一个很大的问题。</p><p>参考官方题解后，发现我们可以借助坐标轴的思想，将二位数组投影到坐标轴上，横坐标是列索引（向右增大），纵坐标是行索引（向下增大）。对于每一次当前访问的元素来说，它右边的元素横坐标会比它大，它下边的元素纵坐标会比它大等等。对于顺时针螺旋方向来说，首先是横坐标增加，然后是纵坐标增加，然后又是横坐标减少，最后是纵坐标减少，如此往复，在每次遇到边界或者已经输出的元素才会改变方向。我们便可以用<code>0, 1, -1</code>来表示相应的索引是增加还是减少。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># 行数和列数</span></span><br><span class="line">        R, C = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 同规格布尔矩阵表示是否已访问过对应元素</span></span><br><span class="line">        seen = [[<span class="literal">False</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> matrix]</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="comment"># 行和列分别的移动增量</span></span><br><span class="line">        dr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line">        dc = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 当前行列索引值和增量的具体值</span></span><br><span class="line">        r = c = di = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(R * C):</span><br><span class="line">            ans.append(matrix[r][c])</span><br><span class="line">            seen[r][c] = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 计算下一个将要访问的元素索引值</span></span><br><span class="line">            cr, cc = r + dr[di], c + dc[di]</span><br><span class="line">            <span class="comment"># 如果该元素在数组范围内且未被访问过</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= cr &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= cc &lt; C <span class="keyword">and</span> <span class="keyword">not</span> seen[cr][cc]:</span><br><span class="line">                r, c = cr, cc</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 通过改变索引移动的增量来改变访问方向</span></span><br><span class="line">                di = (di + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">                r, c = r + dr[di], c + dc[di]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度为<code>O(n)</code>，因为每个元素都会访问一次；空间复杂度为<code>O(n)</code>，需要与输入数组同规格的两个数组<code>seen</code>、<code>ans</code>。</p><p><img src="https://ae01.alicdn.com/kf/H0c13f9419b4a4e7b9a8443bf6c8edbacA.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题难点在于怎么用代码表示出顺时针螺旋访问数组，我们是通过改变不同的索引增量来改变访问的方向，同时及时判断是否应该转向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;螺旋矩阵&quot;&gt;&lt;a href=&quot;#螺旋矩阵&quot; class=&quot;headerlink&quot; title=&quot;螺旋矩阵&quot;&gt;&lt;/a&gt;螺旋矩阵&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索旋转排序数组</title>
    <link href="http://yoursite.com/2019/09/06/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/09/06/搜索旋转排序数组/</id>
    <published>2019-09-06T13:57:00.000Z</published>
    <updated>2019-09-06T13:57:31.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-in-rotated-sorted-array/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 <code>O(log n)</code> 级别。</p><p><strong>示例1：</strong></p><blockquote><p>输入: nums = [4,5,6,7,0,1,2], target = 0<br>输出: 4</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: nums = [4,5,6,7,0,1,2], target = 3<br>输出: -1</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>既然时间复杂度要求为<code>O(logn)</code>，很显然的需要采用二分法。首先，如果这是一个正常的升序数组，那么直接使用二分法求解即可。但是这是一个有点变化的升序数组，关键点在于<strong>数组内有两段升序子数组，并且前一段整体值会大于后一段</strong>。我们同样可以采用普通的二分法，先找到中间元素，将中间元素与末尾元素进行比较，可以判断以中间元素分隔的前后两个子数组哪个是完整有序的。然后再判断目标元素是在完整有序的子数组内，还是另外一个子数组内。然后再对含有目标元素值的子数组进行相同判断操作，直到最后锁定目标值位置，返回索引值即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># 中间位置取中间靠左</span></span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="comment"># 右半边有序</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; nums[right]:</span><br><span class="line">                <span class="comment"># 在右半边中，注意取等</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid+<span class="number">1</span>] &lt;= target &lt;= nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &lt;= nums[mid]:</span><br><span class="line">                    right = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left <span class="keyword">if</span> nums[left] == target <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度<code>O(logn)</code>：循环一次排除一半元素；空间复杂度<code>O(1)</code>，临时变量需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H6eb15bc1a10048e398a3c88e02867f7bu.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个方法是直接二分判断排除，另外也可以先二分找到数组内旋转的那个点，再在以该点分割的两个有序数组内进行二分查找，同样也能在对数的时间内得到解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搜索旋转排序数组&quot;&gt;&lt;a href=&quot;#搜索旋转排序数组&quot; class=&quot;headerlink&quot; title=&quot;搜索旋转排序数组&quot;&gt;&lt;/a&gt;搜索旋转排序数组&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最接近的三数之和</title>
    <link href="http://yoursite.com/2019/09/04/%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/09/04/最接近的三数之和/</id>
    <published>2019-09-04T13:40:00.000Z</published>
    <updated>2019-09-04T13:50:05.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最接近的三数之和"><a href="#最接近的三数之和" class="headerlink" title="最接近的三数之和"></a>最接近的三数之和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><blockquote><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题思路跟<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">三数之和</a>大致相同，不同之处在于只需要找到最接近的即可。我们依旧采用先排序，再遍历三个不同元素的方法。我们用三个指针 i、left、right，i 依次从第一个指向倒数第三个，left、right设置在数组索引(i, len(nums))两端，在i指向某个值时，left、right双指针根据一定规则不断向中间移动，与此同时记录下三个值之和<code>s</code>与目标值之间的差值，再进行比较更新最小的差值和三个数之和。left、right指针移动的具体规则如下：</p><ul><li>当<code>i&gt;0</code>时，此时i指向的值与前一个相同，则跳过当前元素，因为在前一个时已经将所有可能的值全部计算完毕，后续相同的值只会得到重复的结果。</li><li>当<code>left &lt; right</code>时，计算此时<code>s = nums[i] + nums[left] + nums[right]</code>的值判断left、right指针如何移动</li><li>如果<code>s &lt; target</code>，则表示当前和太小，此时将 left 后移一位</li><li>如果<code>s &gt; target</code>，则表示当前和太大，此时将 right 前移一位</li><li>如果<code>s = target</code>，则表示当前和与目标值最接近，直接返回target</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        <span class="comment"># 初始化，因为找最小值，因此把初始值设置成实数的最大值</span></span><br><span class="line">        diff = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 排序是前提</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size - <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 常见的剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 双指针：指针对撞</span></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = size - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                s = nums[i] + nums[left] + nums[right]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> abs(s - target) &lt; diff:</span><br><span class="line">                    diff = abs(s - target)</span><br><span class="line">                    res = s</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 不管是变小还是变大，尝试的作用是让 s 与 target 更接近</span></span><br><span class="line">                <span class="comment"># 即 s 与 target 的绝对值之差越来越小</span></span><br><span class="line">                <span class="keyword">if</span> s &gt; target:</span><br><span class="line">                    <span class="comment"># 如果大了，尝试右边界收缩一格，让 target 变小</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> s &lt; target:</span><br><span class="line">                    <span class="comment"># 如果小了，尝试左边界收缩一格，让 target 变大</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果已经等于 target 的话, 肯定是最接近的，根据题目要求，返回这三个数的和</span></span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度<code>O(n^2)</code>：排序为<code>O(nlogn)</code>，后面双重循环为<code>O(n^2)</code>；空间复杂度<code>O(1)</code>，指针需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H1452d356a3c54895a23c119dbc9f266bq.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有过前面三数之和的经验后，这道题思路就好想一些，相当于三数之和相当于这道题的特例。同样是先排序后用双指针依次寻找并不断记录最优解，主要是排序后值的大小关系明确，便于移动指针向最优解靠拢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最接近的三数之和&quot;&gt;&lt;a href=&quot;#最接近的三数之和&quot; class=&quot;headerlink&quot; title=&quot;最接近的三数之和&quot;&gt;&lt;/a&gt;最接近的三数之和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="http://yoursite.com/2019/09/03/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/09/03/三数之和/</id>
    <published>2019-09-03T12:17:00.000Z</published>
    <updated>2019-09-03T12:22:12.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且<strong>不重复</strong>的三元组。</p><p><strong>注意：答案中不可以包含重复的三元组。</strong></p><blockquote><p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先说一下暴力解法，三重循环，遍历每一种组合情况，记录下和等于0的情况，同时注意唯一即可，此时时间复杂度为<code>O(n^3)</code>。当然我们需要寻找更加有效的方法，由于题中要求不能有重复结果，如果我们挨个去取，那么难免后面的元素可能跟前面的重复，所以需要额外排除。但是如果我们先将数组排序，那么相同的元素一定挨在一起，那么我们在排除时只需要看跟前一个元素相同与否即可。</p><p>所以我们采用先排序，再遍历三个不同元素的方法。但是此时遍历我们不能挨个取元素，我们用三个指针 k、i、j，k 依次从第一个指向倒数第三个，i、j 设置在数组索引(k, len(nums))两端，在k指向某个值时，i、j双指针根据一定规则不断向中间移动，与此同时记录下三个值之和为0的组合。i、j指针移动的具体规则如下：</p><ul><li>当k指向的值大于0时中止后续操作，因为数组经过排序后，此时i、j指向的值一定大于k指向的值，三者之和肯定不为零，后续的元素也一样。</li><li>当<code>k&gt;0</code>时，此时k指向的值与前一个相同，则跳过当前元素，因为在前一个时已经将所有可能的值全部加入到结果中，后续相同的值只会得到重复的结果。</li><li>当<code>i&lt;j</code>时，计算此时<code>s=nums[k]+nums[i]+nums[j]</code>的值判断i、j指针如何移动</li><li>如果<code>s&lt;0</code>，则表示当前和太小，此时将 i 后移一位，同时跳过重复的值。</li><li>如果<code>s&gt;0</code>，则表示当前和太大，此时将 j 前移一位，同时跳过重复的值。</li><li>如果<code>s=0</code>，则记录下当前组合，将 i 后移一位，也将 j 前移一位，同样跳过重复的值。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res, k = [], <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 后续元素不满足条件</span></span><br><span class="line">            <span class="keyword">if</span> nums[k] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 跳过后续相同元素</span></span><br><span class="line">            <span class="keyword">if</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> nums[k] == nums[k<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 双指针遍历，每一步都会跳过相同元素</span></span><br><span class="line">            i, j = k + <span class="number">1</span>, len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                s = nums[k] + nums[i] + nums[j]</span><br><span class="line">                <span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> s &gt; <span class="number">0</span>:</span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j+<span class="number">1</span>]:</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append([nums[k], nums[i], nums[j]])</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j+<span class="number">1</span>]:</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度<code>O(n^2)</code>：排序为<code>O(nlogn)</code>，后面双重循环为<code>O(n^2)</code>；空间复杂度<code>O(1)</code>，指针需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/Hb9ac3a18eba349c3b767bed6b6f9b40eb.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也是一道关于双指针的问题，似乎从数组里面找到想要的元素即需要相关的指针索引去遍历所有元素。这道题的题解参考了<a href="https://leetcode-cn.com/problems/3sum/solution/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/" target="_blank" rel="noopener">大佬的解题思路</a>，如果我理解有偏差的大家也可以自行查看原题解。另外看到一篇<a href="https://leetcode-cn.com/problems/3sum/solution/three-sum-ti-jie-by-wonderful611/" target="_blank" rel="noopener">题解</a>，从两数之和的讲解再过渡到三数之和，同时用了较容易理解的例子去讲解，也可以作为参考以拓宽自己的思路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三数之和&quot;&gt;&lt;a href=&quot;#三数之和&quot; class=&quot;headerlink&quot; title=&quot;三数之和&quot;&gt;&lt;/a&gt;三数之和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="http://yoursite.com/2019/09/02/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/09/02/盛最多水的容器/</id>
    <published>2019-09-02T09:52:00.000Z</published>
    <updated>2019-09-02T09:54:25.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://ae01.alicdn.com/kf/H8c95189c5b5c4922904b194fcdd1df4al.jpg" alt="题图"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例 :</strong></p><blockquote><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>参考<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/" target="_blank" rel="noopener">大佬的教程</a>，简单来说就是设置双指针指向数组两边，根据移动规则不断移动指针，同时更新面积的最大值，当两个指针指向相同位置时返回最大值即可，具体算法如下：</p><p>水槽的面积等于底乘高，底等于两指针之间的长度，高等于两指针指向的值中小的一个决定。无论什么情况，只要指针向内移动，底一定减小，但是由于不同指针指向的值大小不同，会导致高度变化不同。如果两指针中较高的指针向内移动，那么由于高度由矮的指针决定，那么最终高度可能不变或者变小，但是此时底必然减小，所以移动高的指针导致面积必然减小；而如果移动矮的指针，虽然面积也会减小，但是高度可能会大于当前的高度，从而抵消掉底的减少，最终可能使面积增加。</p><p>综上，我们不断向内移动高度矮的指针，同时不断更新最大面积，当两指针指向相同位置时停止移动，表示遍历完的所有最可能的面积最大值情况，返回此时的最大值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        i, j, res = <span class="number">0</span>, len(height) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height[j]:</span><br><span class="line">                res = max(res, height[i] * (j - i))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res, height[j] * (j - i))</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度<code>O(n)</code>，只需要遍历一次数组；空间复杂度<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H5bb6290b738a4848a721b2722195535db.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>暴力解决，从数组中任选两个值作为底和高，遍历所有的可能情况，记录下最大值即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        maxarea = <span class="number">0</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(height):</span><br><span class="line">            j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; len(height):</span><br><span class="line">                maxarea = max(maxarea, min(height[j], height[i]) * (j - i))</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxarea</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>虽然理论上正确，但是提交会超出时间限制。</p><p><img src="https://ae01.alicdn.com/kf/H944637780ce94ea7a7500e38e7514e02H.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题关键在于理解双指针下，怎么移动指针导致面积朝可能会变大的方向移动，另外暴力法在某些场可能不合适，时间还是一个大问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;盛最多水的容器&quot;&gt;&lt;a href=&quot;#盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;盛最多水的容器&quot;&gt;&lt;/a&gt;盛最多水的容器&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
