<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moon&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-02T09:54:25.966Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>moon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="http://yoursite.com/2019/09/02/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/09/02/盛最多水的容器/</id>
    <published>2019-09-02T09:52:00.000Z</published>
    <updated>2019-09-02T09:54:25.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://ae01.alicdn.com/kf/H8c95189c5b5c4922904b194fcdd1df4al.jpg" alt="题图"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例 :</strong></p><blockquote><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>参考<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/" target="_blank" rel="noopener">大佬的教程</a>，简单来说就是设置双指针指向数组两边，根据移动规则不断移动指针，同时更新面积的最大值，当两个指针指向相同位置时返回最大值即可，具体算法如下：</p><p>水槽的面积等于底乘高，底等于两指针之间的长度，高等于两指针指向的值中小的一个决定。无论什么情况，只要指针向内移动，底一定减小，但是由于不同指针指向的值大小不同，会导致高度变化不同。如果两指针中较高的指针向内移动，那么由于高度由矮的指针决定，那么最终高度可能不变或者变小，但是此时底必然减小，所以移动高的指针导致面积必然减小；而如果移动矮的指针，虽然面积也会减小，但是高度可能会大于当前的高度，从而抵消掉底的减少，最终可能使面积增加。</p><p>综上，我们不断向内移动高度矮的指针，同时不断更新最大面积，当两指针指向相同位置时停止移动，表示遍历完的所有最可能的面积最大值情况，返回此时的最大值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        i, j, res = <span class="number">0</span>, len(height) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height[j]:</span><br><span class="line">                res = max(res, height[i] * (j - i))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res, height[j] * (j - i))</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度<code>O(n)</code>，只需要遍历一次数组；空间复杂度<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H5bb6290b738a4848a721b2722195535db.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>暴力解决，从数组中任选两个值作为底和高，遍历所有的可能情况，记录下最大值即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        maxarea = <span class="number">0</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(height):</span><br><span class="line">            j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; len(height):</span><br><span class="line">                maxarea = max(maxarea, min(height[j], height[i]) * (j - i))</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxarea</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>虽然理论上正确，但是提交会超出时间限制。</p><p><img src="https://ae01.alicdn.com/kf/H944637780ce94ea7a7500e38e7514e02H.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题关键在于理解双指针下，怎么移动指针导致面积朝可能会变大的方向移动，另外暴力法在某些场可能不合适，时间还是一个大问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;盛最多水的容器&quot;&gt;&lt;a href=&quot;#盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;盛最多水的容器&quot;&gt;&lt;/a&gt;盛最多水的容器&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最大子序和</title>
    <link href="http://yoursite.com/2019/08/30/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>http://yoursite.com/2019/08/30/最大子序和/</id>
    <published>2019-08-30T06:30:00.000Z</published>
    <updated>2019-08-30T06:30:18.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例 :</strong></p><blockquote><p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p></blockquote><p><strong>进阶:</strong></p><p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力求解，遍历一遍，用两个变量，一个记录最大的和，一个记录当前的和。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        tmp = nums[<span class="number">0</span>]</span><br><span class="line">        maxvalue = tmp</span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> tmp + nums[i] &gt; nums[i]:</span><br><span class="line">                maxvalue = max(maxvalue, tmp+nums[i])</span><br><span class="line">                tmp = tmp + nums[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                maxvalue = max(maxvalue, tmp, tmp+nums[i], nums[i])</span><br><span class="line">                tmp = nums[i]</span><br><span class="line">        <span class="keyword">return</span> maxvalue</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/H39d551f5cc7f416eacfc3343d1b996aeY.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>分治法，就是它的最大子序和要么在左半边，要么在右半边，要么是穿过中间，对于左右边的序列，情况也是一样，因此可以用递归处理，中间部分的则可以直接计算出来。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="comment"># 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归计算左半边最大子序和</span></span><br><span class="line">            max_left = self.maxSubArray(nums[<span class="number">0</span>:len(nums) // <span class="number">2</span>])</span><br><span class="line">            <span class="comment"># 递归计算右半边最大子序和</span></span><br><span class="line">            max_right = self.maxSubArray(nums[len(nums) // <span class="number">2</span>:len(nums)])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算中间的最大子序和，从右到左计算左边的最大子序和，从左到右计算右边的最大子序和，再相加</span></span><br><span class="line">        max_l = nums[len(nums) // <span class="number">2</span> - <span class="number">1</span>]</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            tmp += nums[i]</span><br><span class="line">            max_l = max(tmp, max_l)</span><br><span class="line">        max_r = nums[len(nums) // <span class="number">2</span>]</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) // <span class="number">2</span>, len(nums)):</span><br><span class="line">            tmp += nums[i]</span><br><span class="line">            max_r = max(tmp, max_r)</span><br><span class="line">        <span class="comment"># 返回三个中的最大值</span></span><br><span class="line">        <span class="keyword">return</span> max(max_right, max_left, max_l+max_r)</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度为<code>O(nlogn)</code>。</p><p><img src="https://ae01.alicdn.com/kf/H8ca22394b46c4ce5ae332eedad480620L.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题解法主要考察分治算法和动态规划，上述两个方法都参考了<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/bao-li-qiu-jie-by-pandawakaka/" target="_blank" rel="noopener">别人的题解</a>，动态规划的部分没有贴出来，主要是还在理解中，大家可以自行查阅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最大子序和&quot;&gt;&lt;a href=&quot;#最大子序和&quot; class=&quot;headerlink&quot; title=&quot;最大子序和&quot;&gt;&lt;/a&gt;最大子序和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;stron
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组中的重复项</title>
    <link href="http://yoursite.com/2019/08/29/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://yoursite.com/2019/08/29/删除排序数组中的重复项/</id>
    <published>2019-08-29T14:30:00.000Z</published>
    <updated>2019-08-29T14:57:20.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/。" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/。</a> （使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个<strong>排序数组</strong>，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例1 :</strong></p><blockquote><p>给定数组 nums = <strong>[1,1,2]</strong>, </p><p>函数应该返回新的长度 <strong>2</strong>, 并且原数组 nums 的前两个元素被修改为 <strong>1, 2</strong>。 </p><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p><p>函数应该返回新的长度 <strong>5</strong>, 并且原数组 nums 的前五个元素被修改为 <strong>0, 1, 2, 3, 4</strong>。</p><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“<strong>引用</strong>”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><blockquote><p>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先用一个变量<code>i</code>记录下当前唯一的元素的最后位置，由于该数组是有序的，我们可以遍历该数组所有值，每一个值与当前唯一的元素中最后一个进行比较，直到找到不同值，将该值覆盖到唯一的元素的后一个位置上，遍历完成后<code>i+1</code>即为唯一元素的个数，返回即可。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num == nums[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = num</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="提交1"><a href="#提交1" class="headerlink" title="提交1"></a>提交1</h3><p>提交通过，时间复杂度<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/Ha347bdd41fc846b6b49797c4c44bd23aU.png" alt="方法1.1提交"></p><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><p>与前面一个的差别在于前面是遍历值且需要赋值，此方法是遍历索引，再取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] == nums[i]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="提交2"><a href="#提交2" class="headerlink" title="提交2"></a>提交2</h3><p>虽然两个方法差别很小，但是时间消耗差别较大。</p><p><img src="https://ae01.alicdn.com/kf/H5d7f6d5a0eee47f8b76e48e3fbd68e73S.png" alt="方法1.2"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题较为简单，思路上需要理解的主要就是快慢双指针的运用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;删除排序数组中的重复项&quot;&gt;&lt;a href=&quot;#删除排序数组中的重复项&quot; class=&quot;headerlink&quot; title=&quot;删除排序数组中的重复项&quot;&gt;&lt;/a&gt;删除排序数组中的重复项&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <link href="http://yoursite.com/2019/08/27/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/27/寻找两个有序数组的中位数/</id>
    <published>2019-08-27T14:13:00.000Z</published>
    <updated>2019-08-29T07:31:00.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寻找两个有序数组的中位数"><a href="#寻找两个有序数组的中位数" class="headerlink" title="寻找两个有序数组的中位数"></a>寻找两个有序数组的中位数</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>困难</strong>，原链接<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个大小为 m 和 n 的有序数组 <code>nums1</code> 和 <code>nums2</code>。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 <code>O(log(m + n))</code>。</p><p>你可以假设 <code>nums1</code> 和 <code>nums2</code> 不会同时为空。</p><p><strong>示例1 :</strong></p><blockquote><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实找中位数很简单，只需要将这些数字排序，找到中间位置的一个数（总个数为奇数）或者两个数的平均值（总个数为偶数）。我们也就这个思路来写代码，首先将两个数组合并为一个，再排序，然后根据新数组长度的奇偶给出中位数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        nums = sorted(nums1 + nums2)</span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[(n<span class="number">-1</span>)//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (nums[(n//<span class="number">2</span>)<span class="number">-1</span>] + nums[n//<span class="number">2</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，我们来分析一下时间复杂度，整个代码时间注意消耗在排序新数组上，我们采用的是内置的排序函数，所以时间复杂度为 <code>O((n+m)log(n+m)</code>，没有达到题目给的<code>O(log(m + n))</code>要求，这从提交结果中也可以看出来，所以还需要想想其他的办法。（例如题给条件中有序数组我们还没有用到）</p><p><img src="https://ae01.alicdn.com/kf/Hf5de2f5a29ce44a6a7f5df78dbbb7148y.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>由于两个数组有序，所以排序过程我们可以采用<a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">归并排序</a>，挨个比较两个数组中的值，将较小的加入新数组中，直到两个数组中所有元素都加进新数组中，此时在新数组中根据其长度奇偶性找到中位数即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># 初始化数组长度、索引、新数组等变量</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line">        length = m + n</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        nums = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 归并过程，在索引未到边界情况下谁的值小谁添加进新数组中</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &lt;= nums2[j]:</span><br><span class="line">                nums.append(nums1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums.append(nums2[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 当某个数组全部添加完后而另一个数组还有未添加的元素</span></span><br><span class="line">        <span class="comment"># 表示剩余元素全部大于新数组内所有值，全部加入新数组尾部</span></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">            nums += nums2[j:]</span><br><span class="line">        <span class="keyword">elif</span> j == n:</span><br><span class="line">            nums += nums1[i:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据奇偶性找中位数</span></span><br><span class="line">        <span class="keyword">if</span> length % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[(length<span class="number">-1</span>)//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (nums[(length//<span class="number">2</span>)<span class="number">-1</span>] + nums[length//<span class="number">2</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间消耗稍微好一些，但是还是不够。就归并排序的时间复杂度而言，平均也是<code>O(nlogn)</code>（n为总输入个数）。但是由于我们已知了两个有序数组，只需要完成比较添加的过程，这样一来时间消耗会少一些，最好情况是前一个数组内元素全部小于或大于后一个数组，此时时间复杂度为<code>O(m)</code>；最坏情况下所有元素都要进行比较，此时时间复杂度为<code>O(m+n)</code>，但是还是没有达到题目<code>O(log(m + n))</code>的要求。</p><p>或许应该采用二分法的思想，才可以将线性级时间复杂度提升到对数级，就像顺序查找与二分查找一样，但是怎么运用又是一个问题。</p><p><img src="https://ae01.alicdn.com/kf/H56c6d3e7e35047da89b4721803b58fe1N.png" alt="方法二提交"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题求的是中位数，其实算作求第K个数的特例，而由于数组是有序的，我们求整体的第K个数（K为中位数位置序号），只要将前面的K-1个数排除掉，剩下的第一个数即为中位数。要想时间复杂度达到对数级，我们在排除的时候便不能一个一个的排除，而是一半一半的排除，这里的一半指的是<code>k/2</code>。我们每次比较两个数组中的<code>k/2</code>位置上的数，哪个小即说明对应的数组在该数前面的<code>k/2-1</code>个数就算在整体排序后也在<code>k</code>的前面，即可以排除。每次排除一定的数后，因为此时数组长度发生变化，中位数的位置也发生变化，即K的值也相应减少，我们不断递归进行排除，直到最后K等于1，此时判断两个数组中的首元素，谁小谁即为中位数。</p><p>当然这个过程中会出现一些特殊情况，比如<code>k/2</code>会比数组长度还要大，某个数组排除一定数后为空等等，都需要特殊考虑。在此不过于阐述，因为这个算法是参照于别人的题解，详情自行查阅<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/" target="_blank" rel="noopener">该题解</a>方法三。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line">        <span class="comment"># k1, k2分别对应奇偶情况下的中位数位置，奇数只需要k1</span></span><br><span class="line">        k1 = (m + n + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        k2 = (m + n + <span class="number">2</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (m+n) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            left = self.getKth(nums1, <span class="number">0</span>, m - <span class="number">1</span>, nums2, <span class="number">0</span>, n - <span class="number">1</span>, k1)</span><br><span class="line">            right = self.getKth(nums1, <span class="number">0</span>, m - <span class="number">1</span>, nums2, <span class="number">0</span>, n - <span class="number">1</span>, k2)</span><br><span class="line">            <span class="keyword">return</span> (left + right)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums1, <span class="number">0</span>, m<span class="number">-1</span>, nums2, <span class="number">0</span>, n<span class="number">-1</span>, k1)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKth</span><span class="params">(self, nums1, start1, end1, nums2, start2, end2, k)</span>:</span></span><br><span class="line">        len1 = end1 - start1 + <span class="number">1</span></span><br><span class="line">        len2 = end2 - start2 + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 保证长度短的数组在前</span></span><br><span class="line">        <span class="keyword">if</span> len1 &gt; len2:</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums2, start2, end2, nums1, start1, end1, k)</span><br><span class="line">        <span class="comment"># 数组一为空，整体第k个数就是数组二的第k个数</span></span><br><span class="line">        <span class="keyword">if</span> len1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 求整体最小的数，即两个数组中更小的数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> min(nums1[start1], nums2[start2])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为了防止 k/2 大于数组长度，取二者之间的较小值</span></span><br><span class="line">        i = start1 + min(len1, k//<span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">        j = start2 + min(len2, k//<span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 根据 k/2 位置上的大小情况，判断剔除哪个数组的前 k/2 个数</span></span><br><span class="line">        <span class="comment"># 同时由于整体长度减少，求的中位数位置k也相应减少</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[i] &gt; nums2[j]):</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p>就理论上来分析，这个算法是达到了题目要求的，因为每次排除<code>k/2</code>个数，而<code>k=(m+n)/2</code>，所以最终复杂度为<code>O(log(m+n))</code>。但是实际的检测中时间消耗跟上述方法二差不多，可能是误差的原因，在此不过于深究。</p><p><img src="https://ae01.alicdn.com/kf/H12b6a6b94b5c43b6aefcb1e7fcba9721F.png" alt="方法三提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题的关键在于时间复杂度<code>O(log(m + n))</code>的要求，怎样的算法才可以满足该复杂度，确实比较难想。虽然题解中有诸多大佬写出来了不同的解法，并且也满足题目时间复杂度要求，但是无奈都比较复杂，需要考虑的方面太多，方法三已经是比较容易理解的了，有时间再去深究这道题的解法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;寻找两个有序数组的中位数&quot;&gt;&lt;a href=&quot;#寻找两个有序数组的中位数&quot; class=&quot;headerlink&quot; title=&quot;寻找两个有序数组的中位数&quot;&gt;&lt;/a&gt;寻找两个有序数组的中位数&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;stro
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Nim 游戏</title>
    <link href="http://yoursite.com/2019/08/26/Nim-%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/08/26/Nim-游戏/</id>
    <published>2019-08-26T13:36:00.000Z</published>
    <updated>2019-08-26T13:36:12.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nim-游戏"><a href="#Nim-游戏" class="headerlink" title="Nim 游戏"></a>Nim 游戏</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>脑筋急转弯</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/nim-game/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你和你的朋友，两个人一起玩 <a href="https://baike.baidu.com/item/Nim%E6%B8%B8%E6%88%8F/6737105" target="_blank" rel="noopener">Nim 游戏</a>：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。</p><p>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p><p><strong>示例 :</strong></p><blockquote><p>输入: 4<br>输出: false<br>解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；<br>     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个游戏很简单，我们倒过来推导：在作为先手的情况下，假设石头数为n，如果n小于4，一定会赢；如果n等于4，此时必输；由此我们知道，如果我们想要赢的话，只要保证在某一次拿走一定数量的石头后使n等于4，并且不能让对手在拿走石头后导致n等于4。因为一次最多拿走3个，所以在轮到对手时，只要n小于等于7则我们会输。反之如果轮到我们时n小于等于7，那我们必赢。如此我们赢的条件变成了在我们操作后使n等于8，往复推导，在轮到谁时只要n是4的倍数则该玩家必输，而赢的条件是我们在每次操作时保证n为4的倍数就好。而此时我们作为先手，只需要看n是否为4的倍数就知道这局游戏我们可不可以赢了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交也通过，只是效率有点低，应该还有更巧妙的解题方式。</p><p><img src="https://ae01.alicdn.com/kf/Hdd430007b5804686aca538af74911270P.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题总体来说不难，相当于找规律，关键的是可能需要我们倒过来从输赢的条件上去推导，只要最终找到了n为4的倍数时必输这个关键点就行。此外看了一下别人的解题方法，似乎没有更优的解题方法了，时间消耗多余别人可能主要是因为python执行时的差异。当然如果硬要精简代码的话，可以写到一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nim-游戏&quot;&gt;&lt;a href=&quot;#Nim-游戏&quot; class=&quot;headerlink&quot; title=&quot;Nim 游戏&quot;&gt;&lt;/a&gt;Nim 游戏&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;脑筋急转弯&lt;/strong&gt;的一道题，难度
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="脑筋急转弯" scheme="http://yoursite.com/tags/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>LRU缓存机制</title>
    <link href="http://yoursite.com/2019/08/25/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/08/25/LRU缓存机制/</id>
    <published>2019-08-25T14:04:00.000Z</published>
    <updated>2019-08-25T14:23:56.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LRU缓存机制"><a href="#LRU缓存机制" class="headerlink" title="LRU缓存机制"></a>LRU缓存机制</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>设计</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lru-cache/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>运用你所掌握的数据结构，设计和实现一个 <a href="https://baike.baidu.com/item/LRU" target="_blank" rel="noopener">LRU (最近最少使用) 缓存机制</a>。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 <strong>get(key)</strong> —— 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 <strong>put(key, value)</strong> —— 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p><strong>进阶:</strong><br>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><p><strong>示例 :</strong></p><blockquote><p>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );</p><p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // 返回  1<br>cache.put(3, 3);    // 该操作会使得密钥 2 作废<br>cache.get(2);       // 返回 -1 (未找到)<br>cache.put(4, 4);    // 该操作会使得密钥 1 作废<br>cache.get(1);       // 返回 -1 (未找到)<br>cache.get(3);       // 返回  3<br>cache.get(4);       // 返回  4</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>LRU (最近最少使用) 缓存机制</strong>在操作系统这门课中有学过，在计算机中如果要实现这种缓存的方式，需要借助硬件的寄存器或者软件的辅助栈，由此我们也可以使用栈的方式去实现该缓存机制。</p><p>由于待缓存的值包含键和值两部分，而对于这种类型的数据，内置的字典结构恰好可以很好的满足使用需求，所以我们用一个字典存储以缓存的键值对，同时添加和删除操作都比较容易实现。</p><p>对于此题最关键的莫过于怎样才能记录下键值对的使用顺序，从而适时删除最近最少使用的数据。如果借助栈的后入先出特性，我们将所有键存入一个栈中，按添加的顺序压入栈中，如果中间有使用某个键的情况，将该键取出放到栈顶。同时栈的长度为缓存的容量，如果在某次添加一个键以后发现容量超了，那么此时只需要删除此时的栈底元素，即最近最少使用的值，同时删除该键对应的键值对。</p><p>在此需要注意一个问题：<strong>怎么算是使用了某个缓存值？</strong></p><p>在经过了一番测试之后，发现系统给的检测中表示有三种情况都算作使用了该缓存值：</p><ul><li>缓存中无该值，此时添加一个新的缓存值</li><li>在缓存中读取一个存在的缓存值</li><li><strong>缓存中已有某个键值对，此时添加一个新的键值对，但是二者键相同，此时表明更新该键对应的值</strong></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        <span class="comment"># 存储键值对</span></span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">        <span class="comment"># 以最近最少使用顺序存储键，栈顶为刚使用过</span></span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 如果键在栈中存在，将其移动至栈顶</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.stack:</span><br><span class="line">            self.stack.remove(key)</span><br><span class="line">            self.stack.append(key)</span><br><span class="line">            <span class="keyword">return</span> self.cache.get(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># 不管是否存在都更新键值对</span></span><br><span class="line">        self.cache[key] = value</span><br><span class="line">        <span class="comment"># 如果键在栈中存在，表示使用过该元素，将其移动至栈顶</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.stack:</span><br><span class="line">            self.stack.remove(key)</span><br><span class="line">            self.stack.append(key)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不存在则加入栈中</span></span><br><span class="line">            self.stack.append(key)</span><br><span class="line">            <span class="comment"># 判断缓存的长度，删除最久未使用的键值对，栈和字典都删除</span></span><br><span class="line">            <span class="keyword">if</span> len(self.stack) &gt; self.capacity:</span><br><span class="line">                self.cache.pop(self.stack.pop(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交虽然通过，但是明显效率很低。主要是需要不断地判断某个键是否在栈中，同时也需要不断地将某个键移到栈顶，这些操作都需要耗费时间而且有些不是常数级的；此外空间上也采用了多个辅助的变量。总体来说没有达到O(1)时间复杂度的要求。</p><p><img src="https://pic.superbed.cn/item/5d614bbd451253d1783851f9.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>此题的关键在于怎么记录键值对本身值和使用顺序，方法一采用字典存储值、栈存储顺序的方式解决这个问题，这主要是受限于python内置的字典结构是无序的，所以才会额外使用栈来记录顺序。此时如果有一种结构，既有字典的读写高效，同时又是有序的就好了，然而由于python的强大，恰好collections模块里的OrderedDict类即表示有序字典，能够完美的解决我们的问题，在此贴出<a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" target="_blank" rel="noopener">官方文档</a>供参考。</p><p>具体实现思路跟方法一大致相同，因为有序字典中的位置顺序即代表了使用的顺序，最近最后使用的在尾部，最早使用的在头部，所以整体上比较简单，只需要注意几点即可：取值的时候注意将该键值对移至有序字典的尾部；添加值时注意如果该键已存在，表示更新值同时也要移动位置；如果添加某一键值对后容量超了，此时需要删除有序字典中的第一个键值对。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(OrderedDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        self.move_to_end(key)</span><br><span class="line">        <span class="keyword">return</span> self[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self:</span><br><span class="line">            self.move_to_end(key)</span><br><span class="line">        <span class="comment"># 在有序字典中存在则更新值，不存在则添加</span></span><br><span class="line">        self[key] = value</span><br><span class="line">        <span class="keyword">if</span> len(self) &gt; self.capacity:</span><br><span class="line">            <span class="comment"># popitem默认弹出最后添加的元素，既最后一个，而我们需要删除第一个</span></span><br><span class="line">            self.popitem(last=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>从提交结果来看，时间上比方法一要好很多，这是因为在有序字典结构中，添加、删除、取值、移动位置等等的操作均可以在常数时间内完成，效率很高；空间上也比方法一要好很多，有序字典内最多只会存储<code>capacity+1</code>长的的值。</p><p><img src="https://pic.superbed.cn/item/5d62857f451253d1784a5502.png" alt="方法二提交"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>同样我们需要的是一个类似于有序字典的结构，但是这次我们将自己编写这种结构，利用双向链表在实现有序的同时又能够在常数时间内实现增加、删除以及移动位置的操作，因为我们只需要改变对应的前驱和后继存储的地址即可。同时采用字典的方式存储键与值（<strong>存有该键对应信息的双向链表节点地址</strong>），还需要手动实现相关函数的功能，详情参见代码。</p><p><strong>注意：此时字典只是起辅助作用，方便快速得到与某个键对应的节点地址。</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双向链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLLNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key = <span class="number">0</span></span><br><span class="line">        self.value = <span class="number">0</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''总是添加在首节点后'''</span></span><br><span class="line">        node.prev = self.head</span><br><span class="line">        node.next = self.head.next</span><br><span class="line">        self.head.next.prev = node</span><br><span class="line">        self.head.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_remove_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''删除一个双向链表中的节点'''</span></span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_move_to_head</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''将一个节点移至双向链表首节点后'''</span></span><br><span class="line">        self._remove_node(node)</span><br><span class="line">        self._add_node(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pop_tail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''弹出链表尾节点前一个节点'''</span></span><br><span class="line">        res = self.tail.prev</span><br><span class="line">        self._remove_node(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        <span class="comment"># 缓存容量</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        <span class="comment"># 当前缓存长度</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 存储键与对应的双向链表节点</span></span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">        <span class="comment"># 初始化双向链表，新建头部与尾部节点</span></span><br><span class="line">        self.head, self.tail = DLLNode(), DLLNode()</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        node = self.cache.get(key, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        self._move_to_head(node)</span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        node = self.cache.get(key, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="comment"># 该节点不存在，新建一个</span></span><br><span class="line">            newNode = DLLNode()</span><br><span class="line">            newNode.key = key</span><br><span class="line">            newNode.value = value</span><br><span class="line">            self.cache[key] = newNode</span><br><span class="line">            self._add_node(newNode)</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.size &gt; self.capacity:</span><br><span class="line">                <span class="comment"># 链表中与字典中同时删除最近最少使用节点</span></span><br><span class="line">                tail = self._pop_tail()</span><br><span class="line">                <span class="keyword">del</span> self.cache[tail.key]</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 该节点已存在，更新值</span></span><br><span class="line">            node.value = value</span><br><span class="line">            self._move_to_head(node)</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p>提交通过，效率比内置的有序字典略低，不过总体来说还可以。</p><p><img src="https://ae01.alicdn.com/kf/He611d9a629a14cb690263e362c554259E.png" alt="方法三"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法一是自主的想法，通过栈的特点记录使用的先后顺序，缺点是各种操作效率低下；方法二借助了别人的轮子，只需要懂相关的内容即可很快的解题，缺点是无法深入的了解其背后的实现原理；方法三跟方法二相反，自己造轮子，手写一个双向链表以及相关函数，虽然过程稍漫长，但是可以加深对双向链表的理解，可以学到更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LRU缓存机制&quot;&gt;&lt;a href=&quot;#LRU缓存机制&quot; class=&quot;headerlink&quot; title=&quot;LRU缓存机制&quot;&gt;&lt;/a&gt;LRU缓存机制&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;设计&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的最近公共祖先</title>
    <link href="http://yoursite.com/2019/08/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/08/21/二叉树的最近公共祖先/</id>
    <published>2019-08-21T14:21:00.000Z</published>
    <updated>2019-08-23T13:18:24.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大<strong>（一个节点也可以是它自己的祖先）</strong>。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><p><img src="https://ae01.alicdn.com/kf/Hc01401b1288f42fc832bd1cedf19c696D.png" alt="二叉搜索树例子"></p><p><strong>示例1 :</strong></p><blockquote><p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br>输出: 3<br>解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br>输出: 5<br>解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</p></blockquote><p><strong>说明：</strong></p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉树中。</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题与另一道题：求<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">二叉搜索树的最近公共祖先</a>差别只在本题是普通的二叉树。先讲讲与二叉搜索树相比求最近公共祖先的相同之处，与二叉搜索树求最近公共祖先的<a href="http://imooner.com/2019/08/20/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/" target="_blank" rel="noopener">方法一</a>解法类似，我们可以先分别找两个节点的祖先、再找它们的最近公共祖先；而不同之处就在于怎么找某个节点的祖先，二叉搜索树在查找的过程中便可以记录下祖先节点，而普通的二叉树不行，所以我们得换个思路，先求整棵树中的节点与其父节点的对应关系，再根据对应关系求某个节点的所有祖先节点。</p><p>求二叉树所有节点与其父节点的对应关系：</p><ul><li>新建一个字典以存储节点间的关系，值是键的直接父节点，默认根节点父节点为空</li><li>以深度优先算法递归求得所有节点间的父子关系</li></ul><p>求二叉树中某一节点的所有祖先：</p><ul><li>从该节点开始，只要当前节点不为空，则加入祖先节点列表中，即倒序添加</li><li>然后根据上述父子关系字典得到当前节点的父节点，循环添加直到当前节点为空</li><li>需注意返回的祖先节点列表中顺序是以该节点本身为首、根节点为尾</li></ul><p>求最近公共祖先：</p><ul><li>我们获得两个节点的祖先列表后，经过观察发现它们的最近公共祖先有如下特点：<strong>同时存在于两个祖先列表中并且位置尽可能的靠后</strong></li><li>由于两个祖先列表长度可能不同，我们从更长的一个祖先列表开始，依次取出其中的值，再判断是否存在于另外一个较短的祖先列表中，是则表明该节点值为最近公共祖先，返回即可。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="comment"># 默认根节点的父节点为空</span></span><br><span class="line">        ancestor = &#123;root: <span class="literal">None</span>&#125;</span><br><span class="line">        p_ancestor = []</span><br><span class="line">        q_ancestor = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取以该节点为根的二叉树所有节点与其父节点的对应关系</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">allAncestor</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    ancestor[node.left] = node</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    ancestor[node.right] = node</span><br><span class="line">                allAncestor(node.left)</span><br><span class="line">                allAncestor(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回某一节点的所有祖先节点，注意是倒序添加的</span></span><br><span class="line">        <span class="comment"># 第一个为节点本身，最后一个为根节点</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nodeAncestor</span><span class="params">(node)</span>:</span></span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                temp.append(node)</span><br><span class="line">                node = ancestor.get(node)</span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">        allAncestor(root)</span><br><span class="line">        p_ancestor = nodeAncestor(p)</span><br><span class="line">        q_ancestor = nodeAncestor(q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(p_ancestor) &gt; len(q_ancestor):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交虽然通过，但似乎无论从时间上还是空间上来说效率都不是很高，时间上主要是因为每个步骤都需要一次循环，三个步骤即三个循环，有一点繁琐了；空间上则是因为需要存储节点间的父子关系，p、q节点的祖先节点以及中间的各种临时变量。整体来说还有很多需要改进的地方，需要另外想一个算法去解决这个问题。</p><p><img src="https://ae01.alicdn.com/kf/Hb2e86e1ad1c5420eae4018bd81b38564R.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>采用递归方式遍历二叉树，同时不断用真假标记当前节点的子树中有无p、q节点，当某个节点的左右子树都为真时即表示该节点为最近公共祖先。当然有可能该节点即为p或q节点，此时只需要该节点为真，加上任一子树为真即可。具体分析参见<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetcod/" target="_blank" rel="noopener">官方题解方法一</a>，详细过程如下：</p><ul><li>从根节点开始递归遍历，每个节点有left, right, mid三个标识，分别表示左右子树是否含p或q节点以及当前节点是否为p、q节点</li><li>如果当前节点为p或q节点，令mid标识为真，且继续遍历当前节点的左右子节点</li><li>如果当前节点左右子节点中任一标识为真，即表示p或q节点在当前节点的子树中</li><li>只要left、right、mid标识中任一标识为真即向父节点返回真，表示找到了p或q节点；如果直到叶子节点还未找到p、q节点，返回假</li><li>在遍历的任一节点上，如果left、right、mid中任意两个标识为真，即表示该节点为最近公共祖先</li></ul><p>参见下图寻找9和11的最近公共祖先：</p><p><img src="https://ae01.alicdn.com/kf/Haef6a112202941a987260e13f9d2eab5i.png" alt="方法二例子"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        self.res = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recurse_tree</span><span class="params">(current_node)</span>:</span></span><br><span class="line">            <span class="comment"># 叶子节点返回假</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> current_node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 左中右三个标识的真假判定</span></span><br><span class="line">            left = recurse_tree(current_node.left)</span><br><span class="line">            right = recurse_tree(current_node.right)</span><br><span class="line">            mid = current_node == p <span class="keyword">or</span> current_node == q</span><br><span class="line">            <span class="comment"># 最近公共祖先是否为当前节点</span></span><br><span class="line">            <span class="keyword">if</span> left + mid + right &gt;= <span class="number">2</span>:</span><br><span class="line">                self.res = current_node</span><br><span class="line">            <span class="keyword">return</span> left <span class="keyword">or</span> mid <span class="keyword">or</span> right</span><br><span class="line"></span><br><span class="line">        recurse_tree(root)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间消耗上来说还行，但是明显还是有所不足的，因为在递归的过程中即可能找到了最近公共祖先，但是总会把所有节点访问一遍，并设置三个标识的值，实际上在找到了最近公共祖先节点后的递归遍历都是没必要的，不但浪费了时间还浪费了空间。可以参见<a href="http://imooner.com/2019/08/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/" target="_blank" rel="noopener">二叉搜索树中第K小的元素</a>的方法二，在递归中采用了生成器强行中断了不必要的递归操作。但是由于题目不同，这道题似乎不好采用相同方式中断递归的执行，目前还未想到好的方式去解决这个问题。</p><p><img src="https://ae01.alicdn.com/kf/H31369ba006df42b9bfb81a1b4fff6d68V.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法一主要是根据二叉搜索树求最近公共祖先的方法一演变而来，思路大致相同，但是没有利用好二叉树本身的结构特点，这个算法也不是特别巧妙，只能说能够解题。方法二则采用了常用的递归方式，巧妙之处在于怎么运用标识的手段，在递归的过程中找到题解并记录下来，虽然也有不足，但是较方法一而言思路和代码都更简洁一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树的最近公共祖先&quot;&gt;&lt;a href=&quot;#二叉树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最近公共祖先&quot;&gt;&lt;/a&gt;二叉树的最近公共祖先&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;树&lt;/st
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的最近公共祖先</title>
    <link href="http://yoursite.com/2019/08/20/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/08/20/二叉搜索树的最近公共祖先/</id>
    <published>2019-08-20T13:23:00.000Z</published>
    <updated>2019-08-20T13:23:56.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大<strong>（一个节点也可以是它自己的祖先）</strong>。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><img src="https://ae01.alicdn.com/kf/H9e36055b770243d38f139203d3807debE.png" alt="二叉搜索树例子"></p><p><strong>示例1 :</strong></p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>输出: 6<br>解释: 节点 2 和节点 8 的最近公共祖先是 6。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br>输出: 2<br>解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</p></blockquote><p><strong>说明：</strong></p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于这道题的要求，我们可以分解为先分别找两个节点的祖先、再找它们的最近公共祖先。</p><p>求二叉搜索树中某一节点的所有祖先：</p><ul><li>由于我们已知该节点的值，所以我们可以根据该值在二叉搜索树进行查找</li><li>由于二叉搜索树的特性，我们在查找过程中比较的每一个节点都是其祖先节点，所以我们每比较一个节点便将该节点值加入祖先节点列表中</li><li>注意每个节点也是它自己的祖先，所以在二叉树中查找完后还需在祖先节点列表中加入该节点本身</li></ul><p>求最近公共祖先：</p><ul><li>我们获得两个节点的祖先列表后，经过观察发现它们的最近公共祖先有如下特点：<strong>同时存在于两个祖先列表中并且位置尽可能的靠后</strong></li><li>由于两个祖先列表长度可能不同，我们从更长的一个祖先列表开始，倒序依次取出其中的值，再判断是否存在于另外一个较短的祖先列表中，是则表明该节点值为最近公共祖先</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        result = TreeNode(<span class="number">0</span>)</span><br><span class="line">        p_ancestor = []</span><br><span class="line">        q_ancestor = []</span><br><span class="line">        p_ancestor = self.search(root, p)</span><br><span class="line">        q_ancestor = self.search(root, q)</span><br><span class="line">        <span class="comment"># 从祖先节点多的那个节点开始，倒序依次获取其祖先值</span></span><br><span class="line">        <span class="comment"># 再判断是否存在于另一个节点的祖先列表中，如果在即表明该节点为最近公共祖先节点</span></span><br><span class="line">        <span class="keyword">if</span> len(p_ancestor) &gt; len(q_ancestor):</span><br><span class="line">            p_ancestor.reverse()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                    result.val = i</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q_ancestor.reverse()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                    result.val = i</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 辅助函数，用于求某节点的所有祖先节点值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, root, key)</span>:</span></span><br><span class="line">        ancestor = []</span><br><span class="line">        <span class="keyword">while</span> key.val != root.val:</span><br><span class="line">            <span class="keyword">if</span> key.val &lt; root.val:</span><br><span class="line">                ancestor.append(root.val)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ancestor.append(root.val)</span><br><span class="line">                root = root.right</span><br><span class="line">        ancestor.append(key.val)</span><br><span class="line">        <span class="keyword">return</span> ancestor</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H358e59b6276f412ab093097e74cdb4e57.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>经过仔细观察，我们还可以发现最近公共祖先的另外的特点：</p><ul><li>p、q两个节点分别位于最近公共祖先节点的左右子树中，即最近公共祖先节点值在p、q节点值之间</li><li>如果p就是最近公共祖先，则q节点在p节点的左右任一子树中</li><li>如果q就是最近公共祖先，则p节点在q节点的左右任一子树中</li></ul><p>如上，再根据二叉搜索树节点间的大小关系，我们便可以知道<strong>最近公共祖先节点的值位于q、p两节点的值之间，且可以取等</strong>。所以我们从根节点开始依次比较当前节点值于q、p节点值的关系，如果当前节点值大于q、p节点值，则令当前节点更新为其左节点，再进行比较；反之小于的话就为右节点，直到满足当前节点值大小位于q、p两节点的值之间或者与其中一个相等，该节点即为最近公共祖先节点。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            <span class="keyword">if</span> root.val &gt; p.val <span class="keyword">and</span> root.val &gt; q.val:</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">elif</span> root.val &lt; p.val <span class="keyword">and</span> root.val &lt; q.val:</span><br><span class="line">                root = root.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H9a7cee30b974497f8f10a1437850f4615.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题从总体上来说不难，综合二叉搜索树的结构以及最近公共祖先的特点即可得到解题的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉搜索树的最近公共祖先&quot;&gt;&lt;a href=&quot;#二叉搜索树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树的最近公共祖先&quot;&gt;&lt;/a&gt;二叉搜索树的最近公共祖先&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;stro
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树中第K小的元素</title>
    <link href="http://yoursite.com/2019/08/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/08/18/二叉搜索树中第K小的元素/</id>
    <published>2019-08-18T14:23:00.000Z</published>
    <updated>2019-08-18T14:23:51.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树中第K小的元素"><a href="#二叉搜索树中第K小的元素" class="headerlink" title="二叉搜索树中第K小的元素"></a>二叉搜索树中第K小的元素</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中<strong>第 k 个最小</strong>的元素。</p><p>说明：<br>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><p><strong>示例1 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [3,1,4,null,2], k = 1</span><br><span class="line">   3</span><br><span class="line">  / \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>示例2 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">       5</span><br><span class="line">      / \</span><br><span class="line">     3   6</span><br><span class="line">    / \</span><br><span class="line">   2   4</span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>进阶：</strong><br>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先明白二叉搜索树的概念，参考<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91" target="_blank" rel="noopener">百度百科</a>，二叉搜索树（Binary Search Tree），（又：<a href="https://baike.baidu.com/item/二叉搜索树/7077855" target="_blank" rel="noopener">二叉搜索树</a>，二叉排序树）它或者是一棵空树，或者是具有下列性质的<a href="https://baike.baidu.com/item/二叉树/1602879" target="_blank" rel="noopener">二叉树</a>： 若它的左子树不空，则左子树上<strong>所有结点</strong>的值均<strong>小于</strong>它的根结点的值； 若它的右子树不空，则右子树上<strong>所有结点</strong>的值均<strong>大于</strong>它的根结点的值； 它的左、右子树也分别为<a href="https://baike.baidu.com/item/二叉排序树/10905079" target="_blank" rel="noopener">二叉排序树</a>。</p><p>除了二叉搜索树的概念，还需要知道有关它的一些操作，比如它的遍历就包含三种：先序遍历、中序遍历、后序遍历。其中，先序遍历中输出根的关键字在其左右子树的关键字之前；中序遍历中输出根的关键词位于其左子树的关键字和右子树的关键字之间；后序遍历中输出根的关键字在左右子树的关键字之后。</p><p>其中需要注意的是如果采用中序遍历，节点值将由小到大的一次输出出来。而本题求二叉搜索树中的第K小元素，只需要对该二叉搜索树进行中序遍历，记录下第K个输出结果，返回即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line">        self.kth = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 辅助函数，递归进行中序遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                helper(root.left)</span><br><span class="line">                self.i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.i == k:</span><br><span class="line">                    self.kth = root.val</span><br><span class="line">                helper(root.right)</span><br><span class="line"></span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> self.kth</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交虽然通过，但是明显还有提升的空间。因为该解法无论需要的是第几小的元素，都会完整的遍历完整个二叉搜索树，明显在得到第K小的元素后，后面的遍历操作都是多余的。并且这是采用递归方式去中序遍历，如果采用非递归的方式可能也会有所提升。</p><p><img src="https://ae01.alicdn.com/kf/He0707eb2b5ba443c8191d84ad79818f9o.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>整体思路跟方法一相同，采用中序遍历，不过借助于python中的生成器，在求得第K小的元素后，我们便停止对后续节点的遍历。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 采用生成器从而中断每次的递归</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mid_order</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> self.mid_order(root.left)</span><br><span class="line">        <span class="keyword">yield</span> root.val</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> self.mid_order(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">        gen = self.mid_order(root)</span><br><span class="line">        <span class="comment"># 跳过前K-1个最小元素</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(k - <span class="number">1</span>):</span><br><span class="line">            next(gen)</span><br><span class="line">        <span class="keyword">return</span> next(gen)</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>虽然提升较方法一不明显，但是这应该是数据量比较小的原因，从理论上来说方法二效率会高一些。</p><p><img src="https://ae01.alicdn.com/kf/Hc8a3757bcd444b8f9a974403f4c586e2V.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题从总体上来说不特别难，关键在于对二叉搜索树的知识点的掌握，以及有关中序遍历的操作。另外方法二参考了别人的解法，主要是因为我对python生成器的掌握还不够，这次也算是加深理解了，尤其是生成器与递归之间的结合，可以说是解决你想在半途强行中断递归的可谓巧妙操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉搜索树中第K小的元素&quot;&gt;&lt;a href=&quot;#二叉搜索树中第K小的元素&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树中第K小的元素&quot;&gt;&lt;/a&gt;二叉搜索树中第K小的元素&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;stro
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树中的最大路径和</title>
    <link href="http://yoursite.com/2019/08/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://yoursite.com/2019/08/17/二叉树中的最大路径和/</id>
    <published>2019-08-17T13:30:00.000Z</published>
    <updated>2019-08-17T13:31:57.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a>二叉树中的最大路径和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>困难</strong>，原链接<a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中<strong>任意节点</strong>出发，达到<strong>任意节点</strong>的序列。该路径<strong>至少包含一个</strong>节点，且<strong>不一定经过根节点</strong>。</p><p><strong>示例1 :</strong></p><p>输入: [1,2,3]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   3</span><br></pre></td></tr></table></figure><p>输出: 6</p><p><strong>示例2 :</strong></p><p>输入: [-10,9,20,null,null,15,7]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> -10</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>输出: 42</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于此问题,目前能够想到的方法只有递归了，递归求得每个节点的贡献值(如果最大路径包含了该节点，该节点对路径和的贡献有多少)，并在递归过程中不断更新可能的最大路径和。</p><ul><li>通过观察发现，最大路径可能出现在左子树、右子树、根节点加左子树、根节点加右子树、根节点加左右子树</li><li>我们从根节点不断递归求得每个节点的贡献值，记录左右子树中路径更大的一个，向上返回当前节点值与其左右子树中最大的路径之和（即贡献值）</li><li>如果当前节点贡献值为负，则表示假如走当前节点，对上级节点中包含该节点的路径和会减少，舍弃该节点</li><li>递归终止条件：当前节点为空，即叶子节点，返回0</li><li>当每个节点都求得其左右子树的贡献值后，更新此时最大值：<code>left + right + root.val</code></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        self.max = float(<span class="string">'-inf'</span>)</span><br><span class="line">        self.max_path(root)</span><br><span class="line">        <span class="keyword">return</span> self.max</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_path</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 得到如果走左子树或者右子树对最大路径和的贡献值</span></span><br><span class="line">        left = self.max_path(root.left)</span><br><span class="line">        right = self.max_path(root.right)</span><br><span class="line">        <span class="comment"># 有可能当前节点加上左子树和右子树的路径和最大</span></span><br><span class="line">        self.max = max(self.max, root.val + left + right)</span><br><span class="line">        <span class="comment"># 返回如果走当前节点，当前节对最大路径和的贡献值，如果贡献值为负则不走当前节点</span></span><br><span class="line">        temp = max(left, right) + root.val</span><br><span class="line">        <span class="keyword">return</span> temp <span class="keyword">if</span> temp &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H658bb3105fee47bf98a2a767f69660a5V.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题比较有难度，虽然有诸多解析，但是也需要多看几遍，自己慢慢去理解才能弄懂。相信计算贡献值的概念是可以弄懂的，但是为什么最大路径和需要当前节点值加上左子树和右子树贡献值，主要是因为在递归到最底层的时候，会考虑到单个节点的贡献值，这时如果有负值其实该节点就会被舍弃了，但是正值的节点却不会，所以更新最大路径和的公式是通用的。这个也是巧妙之处，在递归过程中不断更新解，等递归完成解自然就出来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树中的最大路径和&quot;&gt;&lt;a href=&quot;#二叉树中的最大路径和&quot; class=&quot;headerlink&quot; title=&quot;二叉树中的最大路径和&quot;&gt;&lt;/a&gt;二叉树中的最大路径和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;树&lt;/st
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的最大深度</title>
    <link href="http://yoursite.com/2019/08/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/08/15/二叉树的最大深度/</id>
    <published>2019-08-15T09:56:00.000Z</published>
    <updated>2019-08-15T15:03:03.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例 :</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>返回它的最大深度 3 。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于此问题,一个很直接的解决方法就是采用递归，不断递归树节点，直到叶子节点，递归一层便高度增加1。</p><ul><li>通过观察发现，对于每一个节点包括根节点的高度，等于左右节点高度中的最大值加1。</li><li>采用深度优先算法，先递归左节点求得高度，再递归右节点得到高度。</li><li>返回左右节点高度中的最大值再加上1。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_height = self.maxDepth(root.left)</span><br><span class="line">            right_height = self.maxDepth(root.right)</span><br><span class="line">            <span class="keyword">return</span> max(left_height, right_height) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H10d2788b92b84631a5bff1571c6dd72dv.png" alt="方法一提交"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：此方法对树的每个节点只访问一次，所以时间复杂度为O(n)，n为节点个数。</li><li>空间复杂度：由于二叉树有可能是不平衡的，所以空间消耗也不确定。在最坏情况下，二叉树完全不平衡，如每个节点只有左子节点，此时递归将调用n次（n即为树的高度），空间复杂度为O(n)；最好的情况下，二叉树完全平衡，树的高度为log(n)，此时空间复杂度为O(logn)。</li></ul><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>同样采用深度优先算法，不过不使用递归，而是借助栈采用迭代。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>将每一个节点地址和该节点对应的树高度作为一个记录存入栈中</li><li>我们先遍历左节点，所以先将右节点存入栈中，再存入左节点</li><li>每次取出一个节点，如果该节点不为空则更新此时的树高度，再遍历该节点的子节点</li><li>直到栈为空，返回此时的树高度</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span> </span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            stack.append((<span class="number">1</span>, root))</span><br><span class="line">        </span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack != []:</span><br><span class="line">            current_depth, root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                depth = max(depth, current_depth)</span><br><span class="line">                stack.append((current_depth + <span class="number">1</span>, root.right))</span><br><span class="line">                stack.append((current_depth + <span class="number">1</span>, root.left))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> depth</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>可以看到由于没有使用递归，所以在空间上的消耗减少了很多。</p><p><img src="https://ae01.alicdn.com/kf/H05685bdd9c2743f39559fce0b9925c26S.png" alt="方法二提交"></p><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)，每个节点遍历一次。</li><li>空间复杂度：O(n)，每个节点存入栈一次。</li></ul><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>其实也可以使用广度优先算法，不过使用的结构就不是栈而是队列了。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li>将每一个节点地址和该节点对应的树高度作为一个记录存入队列中</li><li>我们先遍历左节点，所以先将左节点存入队列中，再存入右节点</li><li>每次取出一个节点，如果该节点不为空则更新此时的树高度，再遍历该节点的子节点</li><li>直到队列为空，返回此时的树高度</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        queue = []</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queue.append((<span class="number">1</span>, root))</span><br><span class="line"></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur_dep, node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                depth = max(depth, cur_dep)</span><br><span class="line">                queue.append((cur_dep+<span class="number">1</span>, node.left))</span><br><span class="line">                queue.append((cur_dep+<span class="number">1</span>, node.right))</span><br><span class="line">        <span class="keyword">return</span> depth</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H64cc37458e9b43ddb082dcf921a01484a.png" alt="方法三提交"></p><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)，每个节点遍历一次。</li><li>空间复杂度：O(n)，每个节点存入队列一次。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说考察深度优先算法和广度优先算法，需要注意递归与非递归实现的不同之处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树的最大深度&quot;&gt;&lt;a href=&quot;#二叉树的最大深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最大深度&quot;&gt;&lt;/a&gt;二叉树的最大深度&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;树&lt;/strong&gt;的一道
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2的幂</title>
    <link href="http://yoursite.com/2019/08/14/2%E7%9A%84%E5%B9%82/"/>
    <id>http://yoursite.com/2019/08/14/2的幂/</id>
    <published>2019-08-14T09:56:00.000Z</published>
    <updated>2019-08-14T09:59:24.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2的幂"><a href="#2的幂" class="headerlink" title="2的幂"></a>2的幂</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>位运算</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/power-of-two/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><p><strong>示例1 :</strong></p><blockquote><p>输入: 1<br>输出: true<br>解释: 2的零次方等于1</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: 16<br>输出: true<br>解释: 2的四次方等于16</p></blockquote><p><strong>示例3 :</strong></p><blockquote><p>输入: 218<br>输出: false</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>循环除以2直到结果等于1即表明该整数是2的幂</li><li>如果结果小于2却不等于1即表明该整数不是2的幂</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            n = n/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>从结果来看，还行，简单易懂同时又能够解决问题。<br><img src="https://ae01.alicdn.com/kf/H1009ee97234f46e388a212a0d913fa646.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>如果n是2的幂，那么n用二进制表示时一定是最高为为1，其余为为0的形式；此时n-1用二进制表示则为最高为为0，其余位为1。（与n保持相同位数，不足高为补0）</li><li>例如：8为2的三次方，二进制为1000，8-1=7二进制位0111。</li><li>则n与n-1执行与操作的结果一定为0，如果不为0则表示n不是2的幂。</li><li>另外如果n&lt;=0也表示n不是2的幂。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>代码可以整合为一行，极为简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> n &amp; (n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>结果上来看，时间消耗居然比循环还要多，有点奇怪，不过可能是误差的原因，位运算还是比较快的。</p><p><img src="https://ae01.alicdn.com/kf/H15fe0f008f2c45f9bc64febfdc3f4d16b.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说这道题比较简单，只要充分理解2的幂有何特点即可找出对应的解法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2的幂&quot;&gt;&lt;a href=&quot;#2的幂&quot; class=&quot;headerlink&quot; title=&quot;2的幂&quot;&gt;&lt;/a&gt;2的幂&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;位运算&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单&lt;/s
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>求众数</title>
    <link href="http://yoursite.com/2019/08/13/%E6%B1%82%E4%BC%97%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/13/求众数/</id>
    <published>2019-08-13T11:52:00.000Z</published>
    <updated>2019-08-13T11:49:59.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>位运算</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个大小为 <em>n</em> 的数组，找到其中的众数。众数是指在数组中出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><p><strong>示例1 :</strong></p><blockquote><p>输入: [3，2，3]<br>输出: 3</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: [2，2，1，1，1，2，2]<br>输出: 2</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>暴力解决，数出每个值的出现次数，返回出现次数最多的那个数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>遍历数组中的每个数，对每个数进行循环删除，同时记录删除次数</li><li>直到数组中不存在该数，与当前记录的最大出现次数比较并更新最大次数与众数值</li><li>返回众数值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 记录当前值在列表中的次数</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 记录列表中出现次数最多的值</span></span><br><span class="line">        max_value = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 记录列表中出现次数最多的值的出现次数</span></span><br><span class="line">        max_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment"># 循环去掉列表中的元素，直到没有该元素为止，判断并记录下出现次数最多的值与出现次数</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 如果num不存在会引发ValueError错误</span></span><br><span class="line">                    nums.remove(num)</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">if</span> i &gt; max_count:</span><br><span class="line">                        max_count = i</span><br><span class="line">                        max_value = num</span><br><span class="line">                    i = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> max_value</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>从结果来看，果然时间消耗非常大，算是个笨办法。<img src="https://ae01.alicdn.com/kf/Ha235ebe612fb4fc3b9873a8af05d9c64M.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>如果所有数字被单调递增或者单调递减的顺序排了序，那么众数的下标为 ⌊n/2⌋，（当n为偶数时，下标为⌊n/2⌋+1）详细分析请见<a href="https://leetcode-cn.com/problems/majority-element/solution/qiu-zhong-shu-by-leetcode-2/" target="_blank" rel="noopener">该教程</a>方法三。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>先将数组排序</li><li>当n为奇数时，无论众数是最小值、最大值还是中间的值，排序后下标为⌊n/2⌋的值都为众数。</li><li>当n为偶数时，无论众数是最小值、最大值还是中间的值，排序后下标为⌊n/2⌋或者⌊n/2⌋+1的值都为众数。</li><li>综上，返回下标为⌊n/2⌋即可。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> nums[len(nums)//<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>明显时间上改善了很多，但是还有改进的地方。</p><p><img src="https://ae01.alicdn.com/kf/Hb14d383c2f0340aaa4514fc29f609a44E.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了上述两种方法外，还有很多其他的非常巧妙的方法，详情可以参见题解。果然自己去想的话，首先会想出的方法总是效率比较低的，还需要很多的练习与提高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;求众数&quot;&gt;&lt;a href=&quot;#求众数&quot; class=&quot;headerlink&quot; title=&quot;求众数&quot;&gt;&lt;/a&gt;求众数&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;位运算&lt;/strong&gt;的一道题，难度为&lt;strong&gt;简单&lt;/s
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>只出现一次的数字</title>
    <link href="http://yoursite.com/2019/08/12/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2019/08/12/只出现一次的数字/</id>
    <published>2019-08-12T11:52:00.000Z</published>
    <updated>2019-08-12T11:53:47.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>位运算</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/single-number/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><strong>示例1 :</strong></p><blockquote><p>输入: [2,2,1]<br>输出: 1</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: [4,1,2,1,2]<br>输出: 4</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>遍历 nums 中的每一个元素</li><li>如果某个nums 中的数字是新出现的，则将它添加到列表中</li><li>如果某个数字已经在列表中，删除它</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        no_duplicate_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> no_duplicate_list:</span><br><span class="line">                no_duplicate_list.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                no_duplicate_list.remove(i)</span><br><span class="line">        <span class="keyword">return</span> no_duplicate_list.pop()</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>从结果来看，时间消耗与空间消耗非常大。</p><p><img src="https://ae01.alicdn.com/kf/H915f2c793ea44169b2bdb88224a4f2d3v.png" alt="方法一提交"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n^2)。我们遍历 nums 花费 O(n) 的时间。我们还要在列表中遍历判断是否存在这个数字，花费 O(n) 的时间，所以总循环时间为 O(n^2)。</li><li>空间复杂度：O(n) 。我们需要一个大小为 n 的列表保存所有的 nums 中元素。</li></ul><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>如果我们对 0 和二进制位做 XOR 运算，得到的仍然是这个二进制位</li><li>如果我们对相同的二进制位做 XOR 运算，返回的结果是 0</li><li>XOR 满足交换律和结合律</li><li>所以我们只需要将所有的数进行 XOR 操作，得到那个唯一的数字。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            a ^= i</span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H4401e260e08045e28a0a23d5f8cd4297C.png" alt="方法二提交"></p><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度： O(n)。我们只需要将 nums 中的元素遍历一遍，所以时间复杂度就是 nums 中的元素个数。</li><li>空间复杂度： O(1)。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>明显第二种方法非常巧妙，充分运用了位运算的知识，但是需要对这方面的知识掌握的很透彻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;只出现一次的数字&quot;&gt;&lt;a href=&quot;#只出现一次的数字&quot; class=&quot;headerlink&quot; title=&quot;只出现一次的数字&quot;&gt;&lt;/a&gt;只出现一次的数字&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;位运算&lt;/strong&gt;的
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>子集</title>
    <link href="http://yoursite.com/2019/08/11/%E5%AD%90%E9%9B%86/"/>
    <id>http://yoursite.com/2019/08/11/子集/</id>
    <published>2019-08-11T09:36:00.000Z</published>
    <updated>2019-08-22T13:17:28.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>位运算</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subsets/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一组<strong>不含重复元素</strong>的整数数组 <em>nums</em>，返回该数组所有可能的子集（幂集）。</p><p><strong>说明：</strong>解集不能包含重复的子集。</p><p><strong>示例 :</strong></p><blockquote><p>输入: nums = [1,2,3]<br>输出:<br>[<br>  [3],<br>  [1],<br>  [2],<br>  [1,2,3],<br>  [1,3],<br>  [2,3],<br>  [1,2],<br>  []<br>]</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>借助库函数<strong>itertools.combinations(iterable, r)</strong>，直接解决问题。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>itertools</strong>是python内置的一个库，里面实现了很多能够高效循环创建迭代器的函数，其中有一个函数为<strong>combinations(iterable, r)</strong>，大致功能为：创建一个迭代器，返回<strong>iterable</strong>中所有长度为<strong>r</strong>的子序列，返回的子序列中的项按输入<strong>iterable</strong>中的顺序排序，且元素不重复。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations(range(<span class="number">4</span>), <span class="number">3</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认返回元组</span></span><br><span class="line"><span class="comment"># (0, 1, 2)</span></span><br><span class="line"><span class="comment"># (0, 1, 3)</span></span><br><span class="line"><span class="comment"># (0, 2, 3)</span></span><br><span class="line"><span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></table></figure><p>借助上述函数，我们将待求子集的列表为输入，循环找到其从长度为0到长度为全长的所有子序列即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        r = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> temp <span class="keyword">in</span> itertools.combinations(nums, i):</span><br><span class="line">                r.append(list(temp))</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>借助于内置函数的高效率，我们可以看到从时间消耗上来说，结果还不错。</p><p><img src="https://ae01.alicdn.com/kf/Hb374475b6d994be69e770ed5f500ca8ez.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>参考大佬的<a href="https://leetcode-cn.com/problems/subsets/solution/hui-su-python-dai-ma-by-liweiwei1419/" target="_blank" rel="noopener">解法</a>，采用回溯法，进行一次深度优先遍历，如果走不通则返回上一步，直到回到起点为止。具体参见下图：</p><p><img src="/img/20190811.gif" alt="回溯法"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>关键理解helper函数的递归过程，可以通过单步调试帮助加深理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        n = len(nums)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(i, tmp)</span>:</span></span><br><span class="line">            res.append(tmp)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                helper(j + <span class="number">1</span>, tmp + [nums[j]])</span><br><span class="line">        helper(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H1c8b36515c144b448e25b7f09f430ae0x.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述两种解法都没有实际运用到位运算的知识，这是一个问题，其实有看到采用位运算的解法，但是还在理解中。在解题的过程中遇到的最大的问题是知道怎么解决问题，但是无法用代码去表达出来，或者说看得懂别人的解题思路，但是看不懂代码或需要反复研究代码才能懂，比较头疼。后面会找时间把位运算的解法补上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;子集&quot;&gt;&lt;a href=&quot;#子集&quot; class=&quot;headerlink&quot; title=&quot;子集&quot;&gt;&lt;/a&gt;子集&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;位运算&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等&lt;/stron
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>排序链表</title>
    <link href="http://yoursite.com/2019/08/10/%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/08/10/排序链表/</id>
    <published>2019-08-10T09:05:00.000Z</published>
    <updated>2019-08-10T09:20:47.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序链表"><a href="#排序链表" class="headerlink" title="排序链表"></a>排序链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>排序</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/sort-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-list/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在 <strong><em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度和常数级空间复杂度</strong>下，对<strong>链表</strong>进行排序。</p><p><strong>示例1 :</strong></p><blockquote><p>输入: 4-&gt;2-&gt;1-&gt;3<br>输出: 1-&gt;2-&gt;3-&gt;4</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: -1-&gt;5-&gt;3-&gt;4-&gt;0<br>输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>两路归并排序，且采用递归分割再归并方式。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>分割环节</strong>：将链表从中间断开，再不断递归断开新产生的短链表。</p><ul><li>使用 fast，slow 快慢双指针法，慢指针每次走一个节点，快指针每次走两个节点，当快指针指向最后一个节点时慢指针指向中间节点的<strong>前一个节点</strong></li><li>将链表从中间断开，slow.next = None</li><li>继续将已经分割的两个链表递归分割，输入条件为每个链表的首节点</li><li><strong>递归终止条件</strong>：当当前链表只有一个节点时，直接返回此节点，head.next=None</li></ul><p><strong>合并环节</strong>：将两个链表合并为一个有序链表</p><ul><li>初始化一个节点 h 作为有序链表头部</li><li>用两个指针 left，right 分别指向待合并链表的首节点</li><li>比较两指针处的节点值大小，由小到大加入有序链表中，两指针交替前进，直到两个链表排序完成</li><li>返回有序链表的头节点，即 h.next</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 递归终止</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        slow, fast = head, head.next</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast, slow = fast.next.next, slow.next</span><br><span class="line">        <span class="comment"># 从中间断开</span></span><br><span class="line">        mid, slow.next = slow.next, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归分割已断开的两链表</span></span><br><span class="line">        left, right = self.sortList(head), self.sortList(mid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 合并两链表</span></span><br><span class="line">        h = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">if</span> left.val &lt; right.val:</span><br><span class="line">                h.next, left = left, left.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h.next, right = right, right.next</span><br><span class="line">            h = h.next</span><br><span class="line">        <span class="comment"># 剩余元素全部加入</span></span><br><span class="line">        h.next = left <span class="keyword">if</span> left <span class="keyword">else</span> right</span><br><span class="line">        <span class="keyword">return</span> res.next</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/He552d8aafe76408caade9f6a8e17dbd1e.png" alt="方法一提交"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(nlogn)，分割次数 O(logn) x (快慢指针搜索次数 O(n) + merge 过程 O(n) )。</p><p>空间复杂度：O(1)，只需要几个指针进行交换。（严格来讲应该为<strong>O(logn)</strong>，因为每次递归都会新建几个指针）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然看到了有采用非递归的形式解决问题的，但是无奈看不太懂，所以也就没有也出来。本题的关键难度在于同时要满足时间复杂度和空间复杂度的要求，思路难想明白，总体来说比较复杂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序链表&quot;&gt;&lt;a href=&quot;#排序链表&quot; class=&quot;headerlink&quot; title=&quot;排序链表&quot;&gt;&lt;/a&gt;排序链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;排序&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 II</title>
    <link href="http://yoursite.com/2019/08/09/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-II/"/>
    <id>http://yoursite.com/2019/08/09/买卖股票的最佳时机-II/</id>
    <published>2019-08-09T10:25:00.000Z</published>
    <updated>2019-08-09T12:20:55.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>贪心算法</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意</strong>：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例1 :</strong></p><blockquote><p>输入: [7,1,5,3,6,4]<br>输出: 7<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: [1,2,3,4,5]<br>输出: 4<br>解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p></blockquote><p><strong>示例3 :</strong></p><blockquote><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>找到每一段价格相差最大的时间段，将每一段的收益加起来即可。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>从头开始找，只要当前价格比明天价格低就记为买入点，如果价格持续下降到最后则不买入</li><li>在买入点之后如果价格上升，继续往后，直到价格下降的前一天记为卖出点；如果价格持续上升到最后一天，则记最后一天为卖出点</li><li>卖出股票后记录收益，继续寻找下一个买入点和卖出点直到无法满足一次完整的买入和卖出（即买入点时间大于或等于了最后一天）</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 本次交易股票买入点</span></span><br><span class="line">        p = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 本次交易股票卖出点</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总收入</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(p &lt; len(prices)<span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 只要当前价格大于明天价格，买入和卖出整体后移一天</span></span><br><span class="line">            <span class="keyword">if</span> prices[p] &gt;= prices[i]:</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 找到价格上升的最后一天</span></span><br><span class="line">            <span class="keyword">elif</span> i &lt; len(prices)<span class="number">-1</span> <span class="keyword">and</span> prices[i] &lt;= prices[i+<span class="number">1</span>]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sum += prices[i] - prices[p]</span><br><span class="line">                p = i + <span class="number">1</span></span><br><span class="line">                i = p + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://pic.superbed.cn/item/5d4d417b451253d1780a5e3c.png" alt="方法一提交"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(n)，所有操作均在一次循环中完成。</p><p>空间复杂度：O(1)，只需要常量的空间。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>递增买入和卖出，只要相邻两天价格收益为正，即完成交易。关键点在于可以在同一天买入和卖出，并且没有手续费。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>只要当前价格比后一天价格低，即买入并在后一天卖出（价格连续上涨的话会在同一天卖出又买入，但是没有手续费）</li><li>价格如果有下降，则不买入</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span><br><span class="line">        profit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(prices)):</span><br><span class="line">            tmp = prices[i] - prices[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> tmp &gt; <span class="number">0</span>:</span><br><span class="line">                profit += tmp</span><br><span class="line">        <span class="keyword">return</span> profit</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://pic.superbed.cn/item/5d4d46fb451253d1780a9ea3.png" alt="方法二提交"></p><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(n)，一次循环计算出结果</p><p>空间复杂度：O(1)，只需要常量的空间</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然是关于贪心算法的一道题，但是解题方法中只有方法一用到了贪心算法的思路，或许还有更优的解题方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;买卖股票的最佳时机-II&quot;&gt;&lt;a href=&quot;#买卖股票的最佳时机-II&quot; class=&quot;headerlink&quot; title=&quot;买卖股票的最佳时机 II&quot;&gt;&lt;/a&gt;买卖股票的最佳时机 II&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;stro
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="贪心算法" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>合并K个排序链表</title>
    <link href="http://yoursite.com/2019/08/08/%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/08/08/合并K个排序链表/</id>
    <published>2019-08-08T04:35:00.000Z</published>
    <updated>2019-08-08T04:48:57.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并K个排序链表"><a href="#合并K个排序链表" class="headerlink" title="合并K个排序链表"></a>合并K个排序链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>堆</strong>的一道题，难度为<strong>困难</strong>，原链接<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>合并 <em>k</em> 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p><strong>示例 :</strong></p><blockquote><p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>暴力解决，将所有的元素统一排序，再生成新链表返回。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>依次遍历所有链表，取出所有链表节点值放入一个列表中</li><li>排序该列表，此时排序方法可不同</li><li>遍历排序后的列表，生成一个新链表并返回</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">        self.nodes = []</span><br><span class="line">        <span class="comment"># 新链表的头节点和尾节点</span></span><br><span class="line">        head = point = ListNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                self.nodes.append(node.val)</span><br><span class="line">                node = node.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> sorted(self.nodes):</span><br><span class="line">            point.next = ListNode(x)</span><br><span class="line">            point = point.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://pic.superbed.cn/item/5d4b8d85451253d178edeb07.png" alt="方法一提交"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(nlogn)，n为节点总数</p><ul><li>遍历所有的节点需花费O(n)时间</li><li>一个稳定的排序算法需要O(nlogn)时间（以内置的sorted函数为例）</li><li>遍历新列表同时生成新链表花费O(n)时间</li></ul><p>空间复杂度：O(n)</p><ul><li>排序获得排好序的列表花费O(n)空间</li><li>生成新的有序链表花费O(n)空间</li></ul><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>借助上篇文章提到的heapq库，使用堆结构进行排序。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>借助heapq库构建一个空的小顶堆</li><li>遍历所有链表节点，依次加入堆中</li><li>依次弹出堆顶元素，同时添加进新建的有序链表中</li><li>返回新建有序列表</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">        self.nodes = []</span><br><span class="line">        <span class="comment"># 新链表的头节点和尾节点</span></span><br><span class="line">        head = point = ListNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                heapq.heappush(self.nodes, node.val)</span><br><span class="line">                node = node.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(len(self.nodes)):</span><br><span class="line">            point.next = ListNode(heapq.heappop(self.nodes))</span><br><span class="line">            point = point.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://pic3.superbed.cn/item/5d4b9dda451253d178f041f1.png" alt="方法二提交"></p><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(nlogn)，n为节点总数（此处时间复杂度有待详细计算）</p><ul><li>遍历所有节点花费O(n)时间</li><li>同时生成小顶堆花费O(nlogn)时间（实际上应该要小于该时间，因为logn的n是基于当前堆的大小，而堆大小是从零开始最终为n的）</li><li>生成新链表花费O(n)时间（这个时间也不准确，因为在堆弹出堆顶元素后，剩下堆元素需要调整以符合堆结构，这个过程也需要时间）</li></ul><p>空间复杂度：O(n)</p><ul><li>生成小顶堆花费O(n)空间</li><li>新建有序链表花费O(n)空间</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述两种方法在时间复杂度上差别不大，比较理想的方法应该是采用分治算法，目前也在研究怎么使用分治算法去解决这道题。另外分析不同算法的时空间复杂度也是一个问题，需要对相应的数据结构以及算法有比较深的了解，并且数学推理能力也要比较好才行。总之继续学习吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;合并K个排序链表&quot;&gt;&lt;a href=&quot;#合并K个排序链表&quot; class=&quot;headerlink&quot; title=&quot;合并K个排序链表&quot;&gt;&lt;/a&gt;合并K个排序链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;堆&lt;/strong&gt;的一道
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>数组中的第K个最大元素</title>
    <link href="http://yoursite.com/2019/08/06/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/08/06/数组中的第K个最大元素/</id>
    <published>2019-08-06T12:12:00.000Z</published>
    <updated>2019-08-08T02:12:30.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组中的第K个最大元素"><a href="#数组中的第K个最大元素" class="headerlink" title="数组中的第K个最大元素"></a>数组中的第K个最大元素</h1><p>属于leetcode里腾讯精选练习（50）里面关于堆的一道题，难度为中等，原链接<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-largest-element-in-an-array/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p><strong>示例 1:</strong></p><blockquote><p>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4<br>输出: 4</p></blockquote><p>说明:<br>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>直接使用内置的排序算法，由于内置sorted算法默认是升序排列的，所以需要第K个最大元素，则返回排序后的倒数第K个元素。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> sorted(nums)[-k]</span><br></pre></td></tr></table></figure><p>提交也通过，结果如下：</p><p><img src="https://pic3.superbed.cn/item/5d496a46451253d178a63a91.png" alt="第一版提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>由于是需要找到第K大的元素，所以我们可以根据堆的性质，构建一个小顶堆，令该堆的大小为K，则在将所有元素堆化后，堆顶元素即为第K大的元素，堆底的值则为最大值。与内置的排序方法比较，内置的sorted函数时间复杂度是O(nlogn)，而使用堆后，由于每次插入堆的时间复杂度都是O(logk)，插入n次，最终为O(nlogk)。具体实现如下：</p><ul><li>借助heapq库构建一个小顶堆，具体使用方法自行查阅。</li><li>先将数组的前K个元素直接添加进堆中。</li><li>剩余的元素依次判断是否大于堆顶元素，是则加入堆中，并且删除此时堆顶元素保证堆长度为K。</li><li>数组遍历完后，此时堆中保留了最大的K个元素，并且按升序排列，堆顶元素即为第K大元素，返回即可。</li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        heap = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[:k]:</span><br><span class="line">            heapq.heappush(heap, num)</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[k:]:</span><br><span class="line">            <span class="keyword">if</span> num &gt; heap[<span class="number">0</span>]:</span><br><span class="line">                heapq.heappush(heap, num)</span><br><span class="line">                heapq.heappop(heap)</span><br><span class="line">        <span class="keyword">return</span> heap[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>提交结果：</p><p><img src="https://ae01.alicdn.com/kf/Hc18ad8a8d7e74c9bb95336eadd6c0497T.png" alt></p><hr><p>堆的结构类似于二叉树，根据其中元素大小不同又可以将其分为大顶堆和小顶堆。利用别人已经写好的结构去解决问题是很快，但是还是得深入背后去了解其实现方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组中的第K个最大元素&quot;&gt;&lt;a href=&quot;#数组中的第K个最大元素&quot; class=&quot;headerlink&quot; title=&quot;数组中的第K个最大元素&quot;&gt;&lt;/a&gt;数组中的第K个最大元素&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于堆的一道题，难度为
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>有效的括号</title>
    <link href="http://yoursite.com/2019/08/05/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/08/05/有效的括号/</id>
    <published>2019-08-05T07:23:00.000Z</published>
    <updated>2019-08-22T12:29:52.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>栈</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul><blockquote><p>注意空字符串可被认为是有效字符串。</p></blockquote><p>示例 1:</p><blockquote><p>输入: “()”<br>输出: true</p></blockquote><p>示例 2:</p><blockquote><p>输入: “()[]{}”<br>输出: true</p></blockquote><p>示例 3:</p><blockquote><p>输入: “(]”<br>输出: false</p></blockquote><p>示例 4:</p><blockquote><p>输入: “([)]”<br>输出: false</p></blockquote><p>示例 5:</p><blockquote><p>输入: “{[]}”<br>输出: true</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>看到题目，第一时间就想到以前学过的使用栈来判断括号的案例，大致思路为：按字符遍历待测字符串，将字符串中的左括号依次加入栈中，如果遇到右括号则取出当前栈顶元素判断是否与该右括号匹配，遍历完后如果此时栈为空则表示所有左括号都找到了与之匹配的右括号，即表示有效，反之则表示无效。具体如下：</p><ul><li>借用栈后入先出的特性，按字符遍历待测字符串</li><li>如果当前字符为左开的小、中、大括号，加入栈中，继续选取后续字符</li><li>如果不是左开的括号，再判断当前栈是否为空，是则表示无效</li><li>如果当前栈不为空，且当前字符为右开的括号，则取出此时栈顶元素依次与当前字符比较，判断是否为配对的括号，是则继续选取后续字符，否则表示无效</li><li>所有字符遍历完后，判断当前栈是否为空，是则表示每一个左开的括号都找到了匹配的右括号，否则表示无效</li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># stack = []  若为全局变量，提交系统会反复使用导致检测不通过</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">if</span> char == <span class="string">'('</span> <span class="keyword">or</span> char == <span class="string">'['</span> <span class="keyword">or</span> char == <span class="string">'&#123;'</span>:</span><br><span class="line">                    self.stack.append(char)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="keyword">not</span> self.stack:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> char == <span class="string">')'</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.stack.pop() == <span class="string">'('</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> char == <span class="string">']'</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.stack.pop() == <span class="string">'['</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> char == <span class="string">'&#125;'</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.stack.pop() == <span class="string">'&#123;'</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.stack:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>提交显示通过，并且效率还行：</p><p><img src="https://ae01.alicdn.com/kf/H4f7ecaad94b240798703224ff77e2df48.png" alt="第一版提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在题解处看到了<a href="https://leetcode-cn.com/problems/valid-parentheses/solution/you-xiao-de-gua-hao-by-leetcode/" target="_blank" rel="noopener">官方的解答</a>，解决方案有两种，第一种跟我上述方法一思路差不多，不多说。第二种是将字符串中已经配对好的括号依次删除，直到最后看是否还剩下了未成对的单括号。</p><p>代码很简洁，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'()'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'[]'</span> <span class="keyword">in</span> s:</span><br><span class="line">            s = s.replace(<span class="string">'&#123;&#125;'</span>, <span class="string">''</span>)</span><br><span class="line">            s = s.replace(<span class="string">'[]'</span>, <span class="string">''</span>)</span><br><span class="line">            s = s.replace(<span class="string">'()'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> s == <span class="string">''</span></span><br></pre></td></tr></table></figure><p>提交通过，结果如下：</p><p><img src="https://pic.superbed.cn/item/5d47d66c451253d17874ca16.png" alt="第二版提交"></p><hr><p>看了很多别人写的解决方法，发现自己写的真的是很糟糕，代码冗长，全是if判断，还有未知的问题，没有充分利用python的内置结构和方法等等，总之还有很多需要学习的地方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有效的括号&quot;&gt;&lt;a href=&quot;#有效的括号&quot; class=&quot;headerlink&quot; title=&quot;有效的括号&quot;&gt;&lt;/a&gt;有效的括号&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;栈&lt;/strong&gt;的一道题，难度为&lt;strong
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
