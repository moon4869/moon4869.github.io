<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moon&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-16T08:05:01.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>moon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>合并两个有序链表</title>
    <link href="http://yoursite.com/2019/09/16/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/16/合并两个有序链表/</id>
    <published>2019-09-16T08:04:00.000Z</published>
    <updated>2019-09-16T08:05:01.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看题很快可以想到归并排序，思路也很简单，挨个取出每个链表中的数，比较大小，将小的一个加入结果链表中，一直比较直到达到某一链表尾部，此时再将另外一个不为空的链表剩余元素全部加入到结果链表中，返回结果链表首节点即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        head = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                res.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            res = res.next</span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            res.next = l1</span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            res.next = l2</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H94dd58785b284384976479de8c3b3ed1v.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目难度不高，关键在于归并排序的思想，还有注意链表中的边界问题以及首节点问题即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;合并两个有序链表&quot;&gt;&lt;a href=&quot;#合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;合并两个有序链表&quot;&gt;&lt;/a&gt;合并两个有序链表&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>两数相加</title>
    <link href="http://yoursite.com/2019/09/15/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2019/09/15/两数相加/</id>
    <published>2019-09-15T12:28:00.000Z</published>
    <updated>2019-09-15T12:39:30.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>链表</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例：</strong></p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>解题思路整体不复杂，就是模拟人脑计算两个数相加的过程，从最后一位依次相加加到最高位，注意计算每一位时是否向上一位有进的数，同时当两个数位数不一致时，短的数高位不足可以看作0。<strong>终止计算条件：两个数每一位都计算完毕，且此时无需要向上一位进的数。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        res = node = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 记录向上一位进多少</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断当前节点是否为空，为空则以0处理</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                val_l1 = l1.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val_l1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                val_l2 = l2.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val_l2 = <span class="number">0</span></span><br><span class="line">            val_sum = val_l1 + val_l2 + temp</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算当前位值以及向上一位进多少</span></span><br><span class="line">            val_node = val_sum % <span class="number">10</span></span><br><span class="line">            temp = val_sum // <span class="number">10</span></span><br><span class="line">            node.val = val_node</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果节点非空才更新其指向下一节点</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                l2 = l2.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前节点以及待进的数中任一非空都进行下一位的计算</span></span><br><span class="line">            <span class="keyword">if</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> temp:</span><br><span class="line">                node.next = ListNode(<span class="number">0</span>)</span><br><span class="line">                node = node.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Hd985b8766f7d42adb31b14fba57d7f7cR.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体思路不复杂，难点在于边界上，什么时候表示计算完毕，在一开始时没有注意到当每一位都计算完成后还有进位的情况，直接终止计算而将进位丢掉了。代码可能不够简洁，判断语句过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;两数相加&quot;&gt;&lt;a href=&quot;#两数相加&quot; class=&quot;headerlink&quot; title=&quot;两数相加&quot;&gt;&lt;/a&gt;两数相加&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;链表&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>除自身以外数组的乘积</title>
    <link href="http://yoursite.com/2019/09/13/%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/09/13/除自身以外数组的乘积/</id>
    <published>2019-09-13T06:44:00.000Z</published>
    <updated>2019-09-13T06:49:09.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="除自身以外数组的乘积"><a href="#除自身以外数组的乘积" class="headerlink" title="除自身以外数组的乘积"></a>除自身以外数组的乘积</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/product-of-array-except-self/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定长度为 n 的整数数组 nums，其中 n &gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。</p><p><strong>示例：</strong></p><blockquote><p>输入: [1,2,3,4]<br>输出: [24,12,8,6]</p></blockquote><p><strong>说明</strong>: 请<strong>不要使用除法</strong>，且在 O(n) 时间复杂度内完成此题。</p><p><strong>进阶：</strong><br>你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于数组内的每个数，除了该数以外的每个数之积可以看作两部分，该数前面的元素之积和后面的元素之积，两部分相乘即可。这样我们就可以分别计算两部分，具体查看代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        res = [<span class="number">1</span>]</span><br><span class="line">        p, q = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="comment"># 依次添加nums[0],nums[0]*nums[1],...,nums[0]*nums[1]*...*nums[n-2]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            p *= nums[i]</span><br><span class="line">            res.append(p)</span><br><span class="line">        <span class="comment"># 依次将nums[n-1],nums[n-1]*nums[n-2],...,nums[n-1]*...*nums[1]与前述数组内元素相乘</span></span><br><span class="line">        <span class="comment"># 注意序号相差一位</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            q *= nums[i]</span><br><span class="line">            res[i<span class="number">-1</span>] *= q</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H6a8089f4ba044eecaad036d5616480848.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述方法参考了<a href="https://leetcode-cn.com/problems/product-of-array-except-self/solution/product-of-array-except-self-shang-san-jiao-xia-sa/" target="_blank" rel="noopener">大佬的题解</a>，通过原题解的表格，可以更好的理解该方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;除自身以外数组的乘积&quot;&gt;&lt;a href=&quot;#除自身以外数组的乘积&quot; class=&quot;headerlink&quot; title=&quot;除自身以外数组的乘积&quot;&gt;&lt;/a&gt;除自身以外数组的乘积&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/s
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>存在重复元素</title>
    <link href="http://yoursite.com/2019/09/12/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/09/12/存在重复元素/</id>
    <published>2019-09-12T13:02:00.000Z</published>
    <updated>2019-09-12T13:02:15.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/contains-duplicate/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/contains-duplicate/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><p><strong>示例1：</strong></p><blockquote><p>输入: [1,2,3,1]<br>输出: true</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: [1,2,3,4]<br>输出: false</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入: [1,1,1,3,3,4,3,2,4,2]<br>输出: true</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为数组是可以有重复元素的，而集合（set）内部是不会有重复元素的，所以我们可以将数组转换成集合，再看其长度是否减小了，如果是则表示数组内有重复元素，在转成集合时被消掉了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        temp = set(nums)</span><br><span class="line">        <span class="keyword">if</span> len(temp) &lt; len(nums):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/Hdb4bd20436d24a5e9f8a304fd114ddafH.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同样是借助某个内置结构，其要求内部元素唯一，这次是字典。在一次遍历的过程中，不断查询该元素是否已经在字典中，是则直接返回<code>true</code>，否则将其加入字典中，直到最后遍历完成，还没有重复元素的话返回<code>false</code>。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> temp.get(num):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp[num] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H3855a11e01c347208e1e3ffabde4a02do.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述两个方法都是借助了python内置的数据结构，大大简化了求解的过程。当然也可以采用暴力法，对于每一个数组内的元素，都与另外的元素进行比较，看是否有相同的，只是这样明显的效率不高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;存在重复元素&quot;&gt;&lt;a href=&quot;#存在重复元素&quot; class=&quot;headerlink&quot; title=&quot;存在重复元素&quot;&gt;&lt;/a&gt;存在重复元素&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;s
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机</title>
    <link href="http://yoursite.com/2019/09/11/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/09/11/买卖股票的最佳时机/</id>
    <published>2019-09-11T12:32:00.000Z</published>
    <updated>2019-09-11T12:32:54.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例1：</strong></p><blockquote><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题不是很难，我们要找的就是在一系列数中，前后相差最大的两个数之差（前小于后）。我们可以采用动态规划的思想来解决问题，通过观察计算得到一个通用公式：<strong>最大利润=max（前一天的最大利润，今天的价格 - 到目前为止最低价格）</strong>。通过遍历一次所有值即可得到最大利润。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> (len(prices) &lt;= <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        min_p = prices[<span class="number">0</span>]</span><br><span class="line">        max_p = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices)):</span><br><span class="line">            min_p = min(min_p, prices[i])</span><br><span class="line">            max_p = max(max_p, prices[i] - min_p)</span><br><span class="line">        <span class="keyword">return</span> max_p</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H319f255438c3489fa09eb03430ffe5b2C.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然也可以采用暴力法解决，求得每个值与其后面的每个值之差，再取最大值即可，只是这样时间复杂度为<code>O(n^2)</code>，而且可以明显感觉到效率低下。但是通过上述算法，不断地在遍历的过程中更新最优值，可以将时间复杂度降低为<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;买卖股票的最佳时机&quot;&gt;&lt;a href=&quot;#买卖股票的最佳时机&quot; class=&quot;headerlink&quot; title=&quot;买卖股票的最佳时机&quot;&gt;&lt;/a&gt;买卖股票的最佳时机&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/stron
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="http://yoursite.com/2019/09/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/09/10/合并两个有序数组/</id>
    <published>2019-09-10T11:45:00.000Z</published>
    <updated>2019-09-10T11:46:55.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-sorted-array/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p><strong>说明:</strong></p><ul><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li></ul><p><strong>示例：</strong></p><blockquote><p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],           n = 3</p><p>输出: [1,2,2,3,5,6]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实就合并两个有序数组来说，采用二路归并即可，但是可能需要额外的存储空间来存整个合并后的数组。题目要求在nums1上就地修改，所以如果依旧采用归并方式的话，需要先将nums1里面的元素复制到额外的数组里面，并且将nums1内部清空以方便存储结果。具体归并过程很简单，依次取出待排序的两个数组内的元素，比较大小将小的一个存入nums1中，最后将还没取完的剩余元素全部加入nums1中即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        temp = nums1[:m]</span><br><span class="line">        nums1[:] = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> temp[i] &lt;= nums2[j]:</span><br><span class="line">                nums1.append(temp[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1.append(nums2[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">            nums1[i+j:] = nums2[j:]</span><br><span class="line">        <span class="keyword">if</span> j == n:</span><br><span class="line">            nums1[i+j:] = temp[i:]</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H746dd06a45934065a89428bb3172b52a4.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开始也想过其他的方法，比如先用归并排序好，再将已排序的元素依次填充到nums1中，但是这样就比直接添加到nums1中要慢一些。另外也想过采用插入的方式，但是这样还要删除多余的尾部元素，同时记录索引的指针也复杂一些，所以最后采用了上述方法去解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;合并两个有序数组&quot;&gt;&lt;a href=&quot;#合并两个有序数组&quot; class=&quot;headerlink&quot; title=&quot;合并两个有序数组&quot;&gt;&lt;/a&gt;合并两个有序数组&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>不同路径</title>
    <link href="http://yoursite.com/2019/09/08/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2019/09/08/不同路径/</id>
    <published>2019-09-08T14:29:00.000Z</published>
    <updated>2019-09-09T14:55:20.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-paths/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>问总共有多少条不同的路径？</p><p><img src="https://ae01.alicdn.com/kf/H84cfda867e6c4664bff14dc68bf1ba1du.png" alt="题图"></p><p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p><p><strong>说明：</strong>m 和 <em>n</em> 的值均不超过 100。</p><p><strong>示例1：</strong></p><blockquote><p>输入: m = 3, n = 2<br>输出: 3<br>解释:<br>从左上角开始，总共有 3 条路径可以到达右下角。</p><ol><li>向右 -&gt; 向右 -&gt; 向下</li><li>向右 -&gt; 向下 -&gt; 向右</li><li>向下 -&gt; 向右 -&gt; 向右</li></ol></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: m = 7, n = 3<br>输出: 28</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题我们主要关注动态规划的解法，模拟一个与网格相同规格的二维表格，表格内数字表示走到该格子的路径，大致如下：</p><table><thead><tr><th align="center">1</th><th align="center">1</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">1</td><td align="center">3</td><td align="center">6</td></tr><tr><td align="center">1</td><td align="center">4</td><td align="center">10</td></tr></tbody></table><p>可以发现每一个格子的数字为其上面和左面一个格子内的数字之和，第一列和第一行都是1。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [[<span class="number">1</span>]*n] + [[<span class="number">1</span>]+[<span class="number">0</span>] * (n<span class="number">-1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(m<span class="number">-1</span>)]</span><br><span class="line">        <span class="comment">#print(dp)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/H02d7d178e5d8407082f573a5021e6cb0K.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天有点忙，暂时这么写，后续再修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不同路径&quot;&gt;&lt;a href=&quot;#不同路径&quot; class=&quot;headerlink&quot; title=&quot;不同路径&quot;&gt;&lt;/a&gt;不同路径&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>螺旋矩阵 II</title>
    <link href="http://yoursite.com/2019/09/08/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5-II/"/>
    <id>http://yoursite.com/2019/09/08/螺旋矩阵-II/</id>
    <published>2019-09-08T14:25:00.000Z</published>
    <updated>2019-09-08T14:25:42.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵-II"><a href="#螺旋矩阵-II" class="headerlink" title="螺旋矩阵 II"></a>螺旋矩阵 II</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/spiral-matrix-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/spiral-matrix-ii/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个正整数 <em>n</em>，生成一个包含 1 到 <em>n^2</em> 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p><strong>示例：</strong></p><blockquote><p>输入: 3<br>输出:<br>[<br> [ 1, 2, 3 ],<br> [ 8, 9, 4 ],<br> [ 7, 6, 5 ]<br>]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>借助上一道题的思路，同样是螺旋排列，这道题是螺旋填充，由于我们直到这是一个方阵，输入的数据也很好计算，所以关键点就只在于螺旋填充的方向问题了。与上一道题不同的是，此题可以采用用四个不同的变量记录矩阵上下左右四个边界的值，再按照从左到右、从上到下、从右到左、从下到上的顺序依次填充，每次填充完一行或一列后，更新此时的边界值（即边界不断缩小），将值从1到n^2填充完毕即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span><span class="params">(self, n: int)</span> -&gt; [[int]]:</span></span><br><span class="line">        l, r, t, b = <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">        mat = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        num, tar = <span class="number">1</span>, n * n</span><br><span class="line">        <span class="keyword">while</span> num &lt;= tar:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(l, r + <span class="number">1</span>):  <span class="comment"># left to right</span></span><br><span class="line">                mat[t][i] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            t += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(t, b + <span class="number">1</span>):  <span class="comment"># top to bottom</span></span><br><span class="line">                mat[i][r] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(r, l - <span class="number">1</span>, <span class="number">-1</span>):  <span class="comment"># right to left</span></span><br><span class="line">                mat[b][i] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            b -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(b, t - <span class="number">1</span>, <span class="number">-1</span>):  <span class="comment"># bottom to top</span></span><br><span class="line">                mat[i][l] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mat</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><img src="https://ae01.alicdn.com/kf/Heab1fbb488664f76a477370555f09c901.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题同样是螺旋排列，但是与上一道在代码中实现螺旋方向的方式不同，此题的实现方式简单易懂，挨着顺序来就行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;螺旋矩阵-II&quot;&gt;&lt;a href=&quot;#螺旋矩阵-II&quot; class=&quot;headerlink&quot; title=&quot;螺旋矩阵 II&quot;&gt;&lt;/a&gt;螺旋矩阵 II&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="http://yoursite.com/2019/09/07/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2019/09/07/螺旋矩阵/</id>
    <published>2019-09-07T14:17:00.000Z</published>
    <updated>2019-09-07T14:28:33.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/spiral-matrix/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含 <em>m</em> x <em>n</em> 个元素的矩阵（<em>m</em> 行, <em>n</em> 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p><strong>示例1：</strong></p><blockquote><p>输入:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]输出: [1,2,3,6,9,8,7,4,5]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由我们直觉可以得到，在螺旋输出时，遇到边界或者已经输出的元素，会顺时针改变访问方向。所以我们可以用一个等比例的数组，存放布尔变量以表示每个位置上的元素是否已经访问过。在索引边界的范围内，输出当前元素后，计算下一个将要访问的元素，判断该元素是否已经访问过，未访问的才加入输出结果中。但是此时有一个问题：我们访问数组内元素的顺序不是简单的一个一个访问，而是顺时针螺旋访问的，那么怎么表现这个顺时针螺旋的方向是一个很大的问题。</p><p>参考官方题解后，发现我们可以借助坐标轴的思想，将二位数组投影到坐标轴上，横坐标是列索引（向右增大），纵坐标是行索引（向下增大）。对于每一次当前访问的元素来说，它右边的元素横坐标会比它大，它下边的元素纵坐标会比它大等等。对于顺时针螺旋方向来说，首先是横坐标增加，然后是纵坐标增加，然后又是横坐标减少，最后是纵坐标减少，如此往复，在每次遇到边界或者已经输出的元素才会改变方向。我们便可以用<code>0, 1, -1</code>来表示相应的索引是增加还是减少。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># 行数和列数</span></span><br><span class="line">        R, C = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 同规格布尔矩阵表示是否已访问过对应元素</span></span><br><span class="line">        seen = [[<span class="literal">False</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> matrix]</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="comment"># 行和列分别的移动增量</span></span><br><span class="line">        dr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line">        dc = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 当前行列索引值和增量的具体值</span></span><br><span class="line">        r = c = di = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(R * C):</span><br><span class="line">            ans.append(matrix[r][c])</span><br><span class="line">            seen[r][c] = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 计算下一个将要访问的元素索引值</span></span><br><span class="line">            cr, cc = r + dr[di], c + dc[di]</span><br><span class="line">            <span class="comment"># 如果该元素在数组范围内且未被访问过</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= cr &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= cc &lt; C <span class="keyword">and</span> <span class="keyword">not</span> seen[cr][cc]:</span><br><span class="line">                r, c = cr, cc</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 通过改变索引移动的增量来改变访问方向</span></span><br><span class="line">                di = (di + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">                r, c = r + dr[di], c + dc[di]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度为<code>O(n)</code>，因为每个元素都会访问一次；空间复杂度为<code>O(n)</code>，需要与输入数组同规格的两个数组<code>seen</code>、<code>ans</code>。</p><p><img src="https://ae01.alicdn.com/kf/H0c13f9419b4a4e7b9a8443bf6c8edbacA.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题难点在于怎么用代码表示出顺时针螺旋访问数组，我们是通过改变不同的索引增量来改变访问的方向，同时及时判断是否应该转向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;螺旋矩阵&quot;&gt;&lt;a href=&quot;#螺旋矩阵&quot; class=&quot;headerlink&quot; title=&quot;螺旋矩阵&quot;&gt;&lt;/a&gt;螺旋矩阵&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索旋转排序数组</title>
    <link href="http://yoursite.com/2019/09/06/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/09/06/搜索旋转排序数组/</id>
    <published>2019-09-06T13:57:00.000Z</published>
    <updated>2019-09-06T13:57:31.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-in-rotated-sorted-array/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 <code>O(log n)</code> 级别。</p><p><strong>示例1：</strong></p><blockquote><p>输入: nums = [4,5,6,7,0,1,2], target = 0<br>输出: 4</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: nums = [4,5,6,7,0,1,2], target = 3<br>输出: -1</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>既然时间复杂度要求为<code>O(logn)</code>，很显然的需要采用二分法。首先，如果这是一个正常的升序数组，那么直接使用二分法求解即可。但是这是一个有点变化的升序数组，关键点在于<strong>数组内有两段升序子数组，并且前一段整体值会大于后一段</strong>。我们同样可以采用普通的二分法，先找到中间元素，将中间元素与末尾元素进行比较，可以判断以中间元素分隔的前后两个子数组哪个是完整有序的。然后再判断目标元素是在完整有序的子数组内，还是另外一个子数组内。然后再对含有目标元素值的子数组进行相同判断操作，直到最后锁定目标值位置，返回索引值即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># 中间位置取中间靠左</span></span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="comment"># 右半边有序</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; nums[right]:</span><br><span class="line">                <span class="comment"># 在右半边中，注意取等</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid+<span class="number">1</span>] &lt;= target &lt;= nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &lt;= nums[mid]:</span><br><span class="line">                    right = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left <span class="keyword">if</span> nums[left] == target <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度<code>O(logn)</code>：循环一次排除一半元素；空间复杂度<code>O(1)</code>，临时变量需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H6eb15bc1a10048e398a3c88e02867f7bu.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个方法是直接二分判断排除，另外也可以先二分找到数组内旋转的那个点，再在以该点分割的两个有序数组内进行二分查找，同样也能在对数的时间内得到解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搜索旋转排序数组&quot;&gt;&lt;a href=&quot;#搜索旋转排序数组&quot; class=&quot;headerlink&quot; title=&quot;搜索旋转排序数组&quot;&gt;&lt;/a&gt;搜索旋转排序数组&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最接近的三数之和</title>
    <link href="http://yoursite.com/2019/09/04/%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/09/04/最接近的三数之和/</id>
    <published>2019-09-04T13:40:00.000Z</published>
    <updated>2019-09-04T13:50:05.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最接近的三数之和"><a href="#最接近的三数之和" class="headerlink" title="最接近的三数之和"></a>最接近的三数之和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><blockquote><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题思路跟<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">三数之和</a>大致相同，不同之处在于只需要找到最接近的即可。我们依旧采用先排序，再遍历三个不同元素的方法。我们用三个指针 i、left、right，i 依次从第一个指向倒数第三个，left、right设置在数组索引(i, len(nums))两端，在i指向某个值时，left、right双指针根据一定规则不断向中间移动，与此同时记录下三个值之和<code>s</code>与目标值之间的差值，再进行比较更新最小的差值和三个数之和。left、right指针移动的具体规则如下：</p><ul><li>当<code>i&gt;0</code>时，此时i指向的值与前一个相同，则跳过当前元素，因为在前一个时已经将所有可能的值全部计算完毕，后续相同的值只会得到重复的结果。</li><li>当<code>left &lt; right</code>时，计算此时<code>s = nums[i] + nums[left] + nums[right]</code>的值判断left、right指针如何移动</li><li>如果<code>s &lt; target</code>，则表示当前和太小，此时将 left 后移一位</li><li>如果<code>s &gt; target</code>，则表示当前和太大，此时将 right 前移一位</li><li>如果<code>s = target</code>，则表示当前和与目标值最接近，直接返回target</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        <span class="comment"># 初始化，因为找最小值，因此把初始值设置成实数的最大值</span></span><br><span class="line">        diff = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 排序是前提</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size - <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 常见的剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 双指针：指针对撞</span></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = size - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                s = nums[i] + nums[left] + nums[right]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> abs(s - target) &lt; diff:</span><br><span class="line">                    diff = abs(s - target)</span><br><span class="line">                    res = s</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 不管是变小还是变大，尝试的作用是让 s 与 target 更接近</span></span><br><span class="line">                <span class="comment"># 即 s 与 target 的绝对值之差越来越小</span></span><br><span class="line">                <span class="keyword">if</span> s &gt; target:</span><br><span class="line">                    <span class="comment"># 如果大了，尝试右边界收缩一格，让 target 变小</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> s &lt; target:</span><br><span class="line">                    <span class="comment"># 如果小了，尝试左边界收缩一格，让 target 变大</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果已经等于 target 的话, 肯定是最接近的，根据题目要求，返回这三个数的和</span></span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度<code>O(n^2)</code>：排序为<code>O(nlogn)</code>，后面双重循环为<code>O(n^2)</code>；空间复杂度<code>O(1)</code>，指针需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H1452d356a3c54895a23c119dbc9f266bq.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有过前面三数之和的经验后，这道题思路就好想一些，相当于三数之和相当于这道题的特例。同样是先排序后用双指针依次寻找并不断记录最优解，主要是排序后值的大小关系明确，便于移动指针向最优解靠拢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最接近的三数之和&quot;&gt;&lt;a href=&quot;#最接近的三数之和&quot; class=&quot;headerlink&quot; title=&quot;最接近的三数之和&quot;&gt;&lt;/a&gt;最接近的三数之和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="http://yoursite.com/2019/09/03/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/09/03/三数之和/</id>
    <published>2019-09-03T12:17:00.000Z</published>
    <updated>2019-09-03T12:22:12.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且<strong>不重复</strong>的三元组。</p><p><strong>注意：答案中不可以包含重复的三元组。</strong></p><blockquote><p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先说一下暴力解法，三重循环，遍历每一种组合情况，记录下和等于0的情况，同时注意唯一即可，此时时间复杂度为<code>O(n^3)</code>。当然我们需要寻找更加有效的方法，由于题中要求不能有重复结果，如果我们挨个去取，那么难免后面的元素可能跟前面的重复，所以需要额外排除。但是如果我们先将数组排序，那么相同的元素一定挨在一起，那么我们在排除时只需要看跟前一个元素相同与否即可。</p><p>所以我们采用先排序，再遍历三个不同元素的方法。但是此时遍历我们不能挨个取元素，我们用三个指针 k、i、j，k 依次从第一个指向倒数第三个，i、j 设置在数组索引(k, len(nums))两端，在k指向某个值时，i、j双指针根据一定规则不断向中间移动，与此同时记录下三个值之和为0的组合。i、j指针移动的具体规则如下：</p><ul><li>当k指向的值大于0时中止后续操作，因为数组经过排序后，此时i、j指向的值一定大于k指向的值，三者之和肯定不为零，后续的元素也一样。</li><li>当<code>k&gt;0</code>时，此时k指向的值与前一个相同，则跳过当前元素，因为在前一个时已经将所有可能的值全部加入到结果中，后续相同的值只会得到重复的结果。</li><li>当<code>i&lt;j</code>时，计算此时<code>s=nums[k]+nums[i]+nums[j]</code>的值判断i、j指针如何移动</li><li>如果<code>s&lt;0</code>，则表示当前和太小，此时将 i 后移一位，同时跳过重复的值。</li><li>如果<code>s&gt;0</code>，则表示当前和太大，此时将 j 前移一位，同时跳过重复的值。</li><li>如果<code>s=0</code>，则记录下当前组合，将 i 后移一位，也将 j 前移一位，同样跳过重复的值。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res, k = [], <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 后续元素不满足条件</span></span><br><span class="line">            <span class="keyword">if</span> nums[k] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 跳过后续相同元素</span></span><br><span class="line">            <span class="keyword">if</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> nums[k] == nums[k<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 双指针遍历，每一步都会跳过相同元素</span></span><br><span class="line">            i, j = k + <span class="number">1</span>, len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                s = nums[k] + nums[i] + nums[j]</span><br><span class="line">                <span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> s &gt; <span class="number">0</span>:</span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j+<span class="number">1</span>]:</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append([nums[k], nums[i], nums[j]])</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j+<span class="number">1</span>]:</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交通过，时间复杂度<code>O(n^2)</code>：排序为<code>O(nlogn)</code>，后面双重循环为<code>O(n^2)</code>；空间复杂度<code>O(1)</code>，指针需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/Hb9ac3a18eba349c3b767bed6b6f9b40eb.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也是一道关于双指针的问题，似乎从数组里面找到想要的元素即需要相关的指针索引去遍历所有元素。这道题的题解参考了<a href="https://leetcode-cn.com/problems/3sum/solution/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/" target="_blank" rel="noopener">大佬的解题思路</a>，如果我理解有偏差的大家也可以自行查看原题解。另外看到一篇<a href="https://leetcode-cn.com/problems/3sum/solution/three-sum-ti-jie-by-wonderful611/" target="_blank" rel="noopener">题解</a>，从两数之和的讲解再过渡到三数之和，同时用了较容易理解的例子去讲解，也可以作为参考以拓宽自己的思路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三数之和&quot;&gt;&lt;a href=&quot;#三数之和&quot; class=&quot;headerlink&quot; title=&quot;三数之和&quot;&gt;&lt;/a&gt;三数之和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;strong&gt;中等
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="http://yoursite.com/2019/09/02/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/09/02/盛最多水的容器/</id>
    <published>2019-09-02T09:52:00.000Z</published>
    <updated>2019-09-02T09:54:25.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://ae01.alicdn.com/kf/H8c95189c5b5c4922904b194fcdd1df4al.jpg" alt="题图"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例 :</strong></p><blockquote><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>参考<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/" target="_blank" rel="noopener">大佬的教程</a>，简单来说就是设置双指针指向数组两边，根据移动规则不断移动指针，同时更新面积的最大值，当两个指针指向相同位置时返回最大值即可，具体算法如下：</p><p>水槽的面积等于底乘高，底等于两指针之间的长度，高等于两指针指向的值中小的一个决定。无论什么情况，只要指针向内移动，底一定减小，但是由于不同指针指向的值大小不同，会导致高度变化不同。如果两指针中较高的指针向内移动，那么由于高度由矮的指针决定，那么最终高度可能不变或者变小，但是此时底必然减小，所以移动高的指针导致面积必然减小；而如果移动矮的指针，虽然面积也会减小，但是高度可能会大于当前的高度，从而抵消掉底的减少，最终可能使面积增加。</p><p>综上，我们不断向内移动高度矮的指针，同时不断更新最大面积，当两指针指向相同位置时停止移动，表示遍历完的所有最可能的面积最大值情况，返回此时的最大值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        i, j, res = <span class="number">0</span>, len(height) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height[j]:</span><br><span class="line">                res = max(res, height[i] * (j - i))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res, height[j] * (j - i))</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度<code>O(n)</code>，只需要遍历一次数组；空间复杂度<code>O(1)</code>，只需要常数的空间。</p><p><img src="https://ae01.alicdn.com/kf/H5bb6290b738a4848a721b2722195535db.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>暴力解决，从数组中任选两个值作为底和高，遍历所有的可能情况，记录下最大值即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        maxarea = <span class="number">0</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(height):</span><br><span class="line">            j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; len(height):</span><br><span class="line">                maxarea = max(maxarea, min(height[j], height[i]) * (j - i))</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxarea</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>虽然理论上正确，但是提交会超出时间限制。</p><p><img src="https://ae01.alicdn.com/kf/H944637780ce94ea7a7500e38e7514e02H.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题关键在于理解双指针下，怎么移动指针导致面积朝可能会变大的方向移动，另外暴力法在某些场可能不合适，时间还是一个大问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;盛最多水的容器&quot;&gt;&lt;a href=&quot;#盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;盛最多水的容器&quot;&gt;&lt;/a&gt;盛最多水的容器&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最大子序和</title>
    <link href="http://yoursite.com/2019/08/30/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>http://yoursite.com/2019/08/30/最大子序和/</id>
    <published>2019-08-30T06:30:00.000Z</published>
    <updated>2019-08-30T06:30:18.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例 :</strong></p><blockquote><p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p></blockquote><p><strong>进阶:</strong></p><p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力求解，遍历一遍，用两个变量，一个记录最大的和，一个记录当前的和。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        tmp = nums[<span class="number">0</span>]</span><br><span class="line">        maxvalue = tmp</span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> tmp + nums[i] &gt; nums[i]:</span><br><span class="line">                maxvalue = max(maxvalue, tmp+nums[i])</span><br><span class="line">                tmp = tmp + nums[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                maxvalue = max(maxvalue, tmp, tmp+nums[i], nums[i])</span><br><span class="line">                tmp = nums[i]</span><br><span class="line">        <span class="keyword">return</span> maxvalue</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/H39d551f5cc7f416eacfc3343d1b996aeY.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>分治法，就是它的最大子序和要么在左半边，要么在右半边，要么是穿过中间，对于左右边的序列，情况也是一样，因此可以用递归处理，中间部分的则可以直接计算出来。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="comment"># 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归计算左半边最大子序和</span></span><br><span class="line">            max_left = self.maxSubArray(nums[<span class="number">0</span>:len(nums) // <span class="number">2</span>])</span><br><span class="line">            <span class="comment"># 递归计算右半边最大子序和</span></span><br><span class="line">            max_right = self.maxSubArray(nums[len(nums) // <span class="number">2</span>:len(nums)])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算中间的最大子序和，从右到左计算左边的最大子序和，从左到右计算右边的最大子序和，再相加</span></span><br><span class="line">        max_l = nums[len(nums) // <span class="number">2</span> - <span class="number">1</span>]</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            tmp += nums[i]</span><br><span class="line">            max_l = max(tmp, max_l)</span><br><span class="line">        max_r = nums[len(nums) // <span class="number">2</span>]</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) // <span class="number">2</span>, len(nums)):</span><br><span class="line">            tmp += nums[i]</span><br><span class="line">            max_r = max(tmp, max_r)</span><br><span class="line">        <span class="comment"># 返回三个中的最大值</span></span><br><span class="line">        <span class="keyword">return</span> max(max_right, max_left, max_l+max_r)</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>提交通过，时间复杂度为<code>O(nlogn)</code>。</p><p><img src="https://ae01.alicdn.com/kf/H8ca22394b46c4ce5ae332eedad480620L.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题解法主要考察分治算法和动态规划，上述两个方法都参考了<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/bao-li-qiu-jie-by-pandawakaka/" target="_blank" rel="noopener">别人的题解</a>，动态规划的部分没有贴出来，主要是还在理解中，大家可以自行查阅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最大子序和&quot;&gt;&lt;a href=&quot;#最大子序和&quot; class=&quot;headerlink&quot; title=&quot;最大子序和&quot;&gt;&lt;/a&gt;最大子序和&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数组&lt;/strong&gt;的一道题，难度为&lt;stron
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组中的重复项</title>
    <link href="http://yoursite.com/2019/08/29/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://yoursite.com/2019/08/29/删除排序数组中的重复项/</id>
    <published>2019-08-29T14:30:00.000Z</published>
    <updated>2019-08-29T14:57:20.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/。" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/。</a> （使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个<strong>排序数组</strong>，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例1 :</strong></p><blockquote><p>给定数组 nums = <strong>[1,1,2]</strong>, </p><p>函数应该返回新的长度 <strong>2</strong>, 并且原数组 nums 的前两个元素被修改为 <strong>1, 2</strong>。 </p><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p><p>函数应该返回新的长度 <strong>5</strong>, 并且原数组 nums 的前五个元素被修改为 <strong>0, 1, 2, 3, 4</strong>。</p><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“<strong>引用</strong>”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><blockquote><p>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先用一个变量<code>i</code>记录下当前唯一的元素的最后位置，由于该数组是有序的，我们可以遍历该数组所有值，每一个值与当前唯一的元素中最后一个进行比较，直到找到不同值，将该值覆盖到唯一的元素的后一个位置上，遍历完成后<code>i+1</code>即为唯一元素的个数，返回即可。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num == nums[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = num</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="提交1"><a href="#提交1" class="headerlink" title="提交1"></a>提交1</h3><p>提交通过，时间复杂度<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p><p><img src="https://ae01.alicdn.com/kf/Ha347bdd41fc846b6b49797c4c44bd23aU.png" alt="方法1.1提交"></p><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><p>与前面一个的差别在于前面是遍历值且需要赋值，此方法是遍历索引，再取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] == nums[i]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="提交2"><a href="#提交2" class="headerlink" title="提交2"></a>提交2</h3><p>虽然两个方法差别很小，但是时间消耗差别较大。</p><p><img src="https://ae01.alicdn.com/kf/H5d7f6d5a0eee47f8b76e48e3fbd68e73S.png" alt="方法1.2"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题较为简单，思路上需要理解的主要就是快慢双指针的运用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;删除排序数组中的重复项&quot;&gt;&lt;a href=&quot;#删除排序数组中的重复项&quot; class=&quot;headerlink&quot; title=&quot;删除排序数组中的重复项&quot;&gt;&lt;/a&gt;删除排序数组中的重复项&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;数
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <link href="http://yoursite.com/2019/08/27/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/27/寻找两个有序数组的中位数/</id>
    <published>2019-08-27T14:13:00.000Z</published>
    <updated>2019-08-29T07:31:00.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寻找两个有序数组的中位数"><a href="#寻找两个有序数组的中位数" class="headerlink" title="寻找两个有序数组的中位数"></a>寻找两个有序数组的中位数</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>数组</strong>的一道题，难度为<strong>困难</strong>，原链接<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个大小为 m 和 n 的有序数组 <code>nums1</code> 和 <code>nums2</code>。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 <code>O(log(m + n))</code>。</p><p>你可以假设 <code>nums1</code> 和 <code>nums2</code> 不会同时为空。</p><p><strong>示例1 :</strong></p><blockquote><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实找中位数很简单，只需要将这些数字排序，找到中间位置的一个数（总个数为奇数）或者两个数的平均值（总个数为偶数）。我们也就这个思路来写代码，首先将两个数组合并为一个，再排序，然后根据新数组长度的奇偶给出中位数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        nums = sorted(nums1 + nums2)</span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[(n<span class="number">-1</span>)//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (nums[(n//<span class="number">2</span>)<span class="number">-1</span>] + nums[n//<span class="number">2</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交通过，我们来分析一下时间复杂度，整个代码时间注意消耗在排序新数组上，我们采用的是内置的排序函数，所以时间复杂度为 <code>O((n+m)log(n+m)</code>，没有达到题目给的<code>O(log(m + n))</code>要求，这从提交结果中也可以看出来，所以还需要想想其他的办法。（例如题给条件中有序数组我们还没有用到）</p><p><img src="https://ae01.alicdn.com/kf/Hf5de2f5a29ce44a6a7f5df78dbbb7148y.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>由于两个数组有序，所以排序过程我们可以采用<a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">归并排序</a>，挨个比较两个数组中的值，将较小的加入新数组中，直到两个数组中所有元素都加进新数组中，此时在新数组中根据其长度奇偶性找到中位数即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># 初始化数组长度、索引、新数组等变量</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line">        length = m + n</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        nums = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 归并过程，在索引未到边界情况下谁的值小谁添加进新数组中</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &lt;= nums2[j]:</span><br><span class="line">                nums.append(nums1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums.append(nums2[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 当某个数组全部添加完后而另一个数组还有未添加的元素</span></span><br><span class="line">        <span class="comment"># 表示剩余元素全部大于新数组内所有值，全部加入新数组尾部</span></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">            nums += nums2[j:]</span><br><span class="line">        <span class="keyword">elif</span> j == n:</span><br><span class="line">            nums += nums1[i:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据奇偶性找中位数</span></span><br><span class="line">        <span class="keyword">if</span> length % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[(length<span class="number">-1</span>)//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (nums[(length//<span class="number">2</span>)<span class="number">-1</span>] + nums[length//<span class="number">2</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间消耗稍微好一些，但是还是不够。就归并排序的时间复杂度而言，平均也是<code>O(nlogn)</code>（n为总输入个数）。但是由于我们已知了两个有序数组，只需要完成比较添加的过程，这样一来时间消耗会少一些，最好情况是前一个数组内元素全部小于或大于后一个数组，此时时间复杂度为<code>O(m)</code>；最坏情况下所有元素都要进行比较，此时时间复杂度为<code>O(m+n)</code>，但是还是没有达到题目<code>O(log(m + n))</code>的要求。</p><p>或许应该采用二分法的思想，才可以将线性级时间复杂度提升到对数级，就像顺序查找与二分查找一样，但是怎么运用又是一个问题。</p><p><img src="https://ae01.alicdn.com/kf/H56c6d3e7e35047da89b4721803b58fe1N.png" alt="方法二提交"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题求的是中位数，其实算作求第K个数的特例，而由于数组是有序的，我们求整体的第K个数（K为中位数位置序号），只要将前面的K-1个数排除掉，剩下的第一个数即为中位数。要想时间复杂度达到对数级，我们在排除的时候便不能一个一个的排除，而是一半一半的排除，这里的一半指的是<code>k/2</code>。我们每次比较两个数组中的<code>k/2</code>位置上的数，哪个小即说明对应的数组在该数前面的<code>k/2-1</code>个数就算在整体排序后也在<code>k</code>的前面，即可以排除。每次排除一定的数后，因为此时数组长度发生变化，中位数的位置也发生变化，即K的值也相应减少，我们不断递归进行排除，直到最后K等于1，此时判断两个数组中的首元素，谁小谁即为中位数。</p><p>当然这个过程中会出现一些特殊情况，比如<code>k/2</code>会比数组长度还要大，某个数组排除一定数后为空等等，都需要特殊考虑。在此不过于阐述，因为这个算法是参照于别人的题解，详情自行查阅<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/" target="_blank" rel="noopener">该题解</a>方法三。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line">        <span class="comment"># k1, k2分别对应奇偶情况下的中位数位置，奇数只需要k1</span></span><br><span class="line">        k1 = (m + n + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        k2 = (m + n + <span class="number">2</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (m+n) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            left = self.getKth(nums1, <span class="number">0</span>, m - <span class="number">1</span>, nums2, <span class="number">0</span>, n - <span class="number">1</span>, k1)</span><br><span class="line">            right = self.getKth(nums1, <span class="number">0</span>, m - <span class="number">1</span>, nums2, <span class="number">0</span>, n - <span class="number">1</span>, k2)</span><br><span class="line">            <span class="keyword">return</span> (left + right)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums1, <span class="number">0</span>, m<span class="number">-1</span>, nums2, <span class="number">0</span>, n<span class="number">-1</span>, k1)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKth</span><span class="params">(self, nums1, start1, end1, nums2, start2, end2, k)</span>:</span></span><br><span class="line">        len1 = end1 - start1 + <span class="number">1</span></span><br><span class="line">        len2 = end2 - start2 + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 保证长度短的数组在前</span></span><br><span class="line">        <span class="keyword">if</span> len1 &gt; len2:</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums2, start2, end2, nums1, start1, end1, k)</span><br><span class="line">        <span class="comment"># 数组一为空，整体第k个数就是数组二的第k个数</span></span><br><span class="line">        <span class="keyword">if</span> len1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 求整体最小的数，即两个数组中更小的数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> min(nums1[start1], nums2[start2])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为了防止 k/2 大于数组长度，取二者之间的较小值</span></span><br><span class="line">        i = start1 + min(len1, k//<span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">        j = start2 + min(len2, k//<span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 根据 k/2 位置上的大小情况，判断剔除哪个数组的前 k/2 个数</span></span><br><span class="line">        <span class="comment"># 同时由于整体长度减少，求的中位数位置k也相应减少</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[i] &gt; nums2[j]):</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p>就理论上来分析，这个算法是达到了题目要求的，因为每次排除<code>k/2</code>个数，而<code>k=(m+n)/2</code>，所以最终复杂度为<code>O(log(m+n))</code>。但是实际的检测中时间消耗跟上述方法二差不多，可能是误差的原因，在此不过于深究。</p><p><img src="https://ae01.alicdn.com/kf/H12b6a6b94b5c43b6aefcb1e7fcba9721F.png" alt="方法三提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题的关键在于时间复杂度<code>O(log(m + n))</code>的要求，怎样的算法才可以满足该复杂度，确实比较难想。虽然题解中有诸多大佬写出来了不同的解法，并且也满足题目时间复杂度要求，但是无奈都比较复杂，需要考虑的方面太多，方法三已经是比较容易理解的了，有时间再去深究这道题的解法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;寻找两个有序数组的中位数&quot;&gt;&lt;a href=&quot;#寻找两个有序数组的中位数&quot; class=&quot;headerlink&quot; title=&quot;寻找两个有序数组的中位数&quot;&gt;&lt;/a&gt;寻找两个有序数组的中位数&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;stro
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Nim 游戏</title>
    <link href="http://yoursite.com/2019/08/26/Nim-%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/08/26/Nim-游戏/</id>
    <published>2019-08-26T13:36:00.000Z</published>
    <updated>2019-08-26T13:36:12.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nim-游戏"><a href="#Nim-游戏" class="headerlink" title="Nim 游戏"></a>Nim 游戏</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>脑筋急转弯</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/nim-game/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你和你的朋友，两个人一起玩 <a href="https://baike.baidu.com/item/Nim%E6%B8%B8%E6%88%8F/6737105" target="_blank" rel="noopener">Nim 游戏</a>：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。</p><p>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p><p><strong>示例 :</strong></p><blockquote><p>输入: 4<br>输出: false<br>解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；<br>     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个游戏很简单，我们倒过来推导：在作为先手的情况下，假设石头数为n，如果n小于4，一定会赢；如果n等于4，此时必输；由此我们知道，如果我们想要赢的话，只要保证在某一次拿走一定数量的石头后使n等于4，并且不能让对手在拿走石头后导致n等于4。因为一次最多拿走3个，所以在轮到对手时，只要n小于等于7则我们会输。反之如果轮到我们时n小于等于7，那我们必赢。如此我们赢的条件变成了在我们操作后使n等于8，往复推导，在轮到谁时只要n是4的倍数则该玩家必输，而赢的条件是我们在每次操作时保证n为4的倍数就好。而此时我们作为先手，只需要看n是否为4的倍数就知道这局游戏我们可不可以赢了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交也通过，只是效率有点低，应该还有更巧妙的解题方式。</p><p><img src="https://ae01.alicdn.com/kf/Hdd430007b5804686aca538af74911270P.png" alt="方法一提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题总体来说不难，相当于找规律，关键的是可能需要我们倒过来从输赢的条件上去推导，只要最终找到了n为4的倍数时必输这个关键点就行。此外看了一下别人的解题方法，似乎没有更优的解题方法了，时间消耗多余别人可能主要是因为python执行时的差异。当然如果硬要精简代码的话，可以写到一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nim-游戏&quot;&gt;&lt;a href=&quot;#Nim-游戏&quot; class=&quot;headerlink&quot; title=&quot;Nim 游戏&quot;&gt;&lt;/a&gt;Nim 游戏&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;脑筋急转弯&lt;/strong&gt;的一道题，难度
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="脑筋急转弯" scheme="http://yoursite.com/tags/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>LRU缓存机制</title>
    <link href="http://yoursite.com/2019/08/25/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/08/25/LRU缓存机制/</id>
    <published>2019-08-25T14:04:00.000Z</published>
    <updated>2019-08-25T14:23:56.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LRU缓存机制"><a href="#LRU缓存机制" class="headerlink" title="LRU缓存机制"></a>LRU缓存机制</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>设计</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lru-cache/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>运用你所掌握的数据结构，设计和实现一个 <a href="https://baike.baidu.com/item/LRU" target="_blank" rel="noopener">LRU (最近最少使用) 缓存机制</a>。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 <strong>get(key)</strong> —— 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 <strong>put(key, value)</strong> —— 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p><strong>进阶:</strong><br>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><p><strong>示例 :</strong></p><blockquote><p>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );</p><p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // 返回  1<br>cache.put(3, 3);    // 该操作会使得密钥 2 作废<br>cache.get(2);       // 返回 -1 (未找到)<br>cache.put(4, 4);    // 该操作会使得密钥 1 作废<br>cache.get(1);       // 返回 -1 (未找到)<br>cache.get(3);       // 返回  3<br>cache.get(4);       // 返回  4</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>LRU (最近最少使用) 缓存机制</strong>在操作系统这门课中有学过，在计算机中如果要实现这种缓存的方式，需要借助硬件的寄存器或者软件的辅助栈，由此我们也可以使用栈的方式去实现该缓存机制。</p><p>由于待缓存的值包含键和值两部分，而对于这种类型的数据，内置的字典结构恰好可以很好的满足使用需求，所以我们用一个字典存储以缓存的键值对，同时添加和删除操作都比较容易实现。</p><p>对于此题最关键的莫过于怎样才能记录下键值对的使用顺序，从而适时删除最近最少使用的数据。如果借助栈的后入先出特性，我们将所有键存入一个栈中，按添加的顺序压入栈中，如果中间有使用某个键的情况，将该键取出放到栈顶。同时栈的长度为缓存的容量，如果在某次添加一个键以后发现容量超了，那么此时只需要删除此时的栈底元素，即最近最少使用的值，同时删除该键对应的键值对。</p><p>在此需要注意一个问题：<strong>怎么算是使用了某个缓存值？</strong></p><p>在经过了一番测试之后，发现系统给的检测中表示有三种情况都算作使用了该缓存值：</p><ul><li>缓存中无该值，此时添加一个新的缓存值</li><li>在缓存中读取一个存在的缓存值</li><li><strong>缓存中已有某个键值对，此时添加一个新的键值对，但是二者键相同，此时表明更新该键对应的值</strong></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        <span class="comment"># 存储键值对</span></span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">        <span class="comment"># 以最近最少使用顺序存储键，栈顶为刚使用过</span></span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 如果键在栈中存在，将其移动至栈顶</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.stack:</span><br><span class="line">            self.stack.remove(key)</span><br><span class="line">            self.stack.append(key)</span><br><span class="line">            <span class="keyword">return</span> self.cache.get(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># 不管是否存在都更新键值对</span></span><br><span class="line">        self.cache[key] = value</span><br><span class="line">        <span class="comment"># 如果键在栈中存在，表示使用过该元素，将其移动至栈顶</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.stack:</span><br><span class="line">            self.stack.remove(key)</span><br><span class="line">            self.stack.append(key)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不存在则加入栈中</span></span><br><span class="line">            self.stack.append(key)</span><br><span class="line">            <span class="comment"># 判断缓存的长度，删除最久未使用的键值对，栈和字典都删除</span></span><br><span class="line">            <span class="keyword">if</span> len(self.stack) &gt; self.capacity:</span><br><span class="line">                self.cache.pop(self.stack.pop(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交虽然通过，但是明显效率很低。主要是需要不断地判断某个键是否在栈中，同时也需要不断地将某个键移到栈顶，这些操作都需要耗费时间而且有些不是常数级的；此外空间上也采用了多个辅助的变量。总体来说没有达到O(1)时间复杂度的要求。</p><p><img src="https://pic.superbed.cn/item/5d614bbd451253d1783851f9.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>此题的关键在于怎么记录键值对本身值和使用顺序，方法一采用字典存储值、栈存储顺序的方式解决这个问题，这主要是受限于python内置的字典结构是无序的，所以才会额外使用栈来记录顺序。此时如果有一种结构，既有字典的读写高效，同时又是有序的就好了，然而由于python的强大，恰好collections模块里的OrderedDict类即表示有序字典，能够完美的解决我们的问题，在此贴出<a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" target="_blank" rel="noopener">官方文档</a>供参考。</p><p>具体实现思路跟方法一大致相同，因为有序字典中的位置顺序即代表了使用的顺序，最近最后使用的在尾部，最早使用的在头部，所以整体上比较简单，只需要注意几点即可：取值的时候注意将该键值对移至有序字典的尾部；添加值时注意如果该键已存在，表示更新值同时也要移动位置；如果添加某一键值对后容量超了，此时需要删除有序字典中的第一个键值对。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(OrderedDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        self.move_to_end(key)</span><br><span class="line">        <span class="keyword">return</span> self[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self:</span><br><span class="line">            self.move_to_end(key)</span><br><span class="line">        <span class="comment"># 在有序字典中存在则更新值，不存在则添加</span></span><br><span class="line">        self[key] = value</span><br><span class="line">        <span class="keyword">if</span> len(self) &gt; self.capacity:</span><br><span class="line">            <span class="comment"># popitem默认弹出最后添加的元素，既最后一个，而我们需要删除第一个</span></span><br><span class="line">            self.popitem(last=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>从提交结果来看，时间上比方法一要好很多，这是因为在有序字典结构中，添加、删除、取值、移动位置等等的操作均可以在常数时间内完成，效率很高；空间上也比方法一要好很多，有序字典内最多只会存储<code>capacity+1</code>长的的值。</p><p><img src="https://pic.superbed.cn/item/5d62857f451253d1784a5502.png" alt="方法二提交"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>同样我们需要的是一个类似于有序字典的结构，但是这次我们将自己编写这种结构，利用双向链表在实现有序的同时又能够在常数时间内实现增加、删除以及移动位置的操作，因为我们只需要改变对应的前驱和后继存储的地址即可。同时采用字典的方式存储键与值（<strong>存有该键对应信息的双向链表节点地址</strong>），还需要手动实现相关函数的功能，详情参见代码。</p><p><strong>注意：此时字典只是起辅助作用，方便快速得到与某个键对应的节点地址。</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双向链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLLNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key = <span class="number">0</span></span><br><span class="line">        self.value = <span class="number">0</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''总是添加在首节点后'''</span></span><br><span class="line">        node.prev = self.head</span><br><span class="line">        node.next = self.head.next</span><br><span class="line">        self.head.next.prev = node</span><br><span class="line">        self.head.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_remove_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''删除一个双向链表中的节点'''</span></span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_move_to_head</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''将一个节点移至双向链表首节点后'''</span></span><br><span class="line">        self._remove_node(node)</span><br><span class="line">        self._add_node(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pop_tail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''弹出链表尾节点前一个节点'''</span></span><br><span class="line">        res = self.tail.prev</span><br><span class="line">        self._remove_node(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        <span class="comment"># 缓存容量</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        <span class="comment"># 当前缓存长度</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 存储键与对应的双向链表节点</span></span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">        <span class="comment"># 初始化双向链表，新建头部与尾部节点</span></span><br><span class="line">        self.head, self.tail = DLLNode(), DLLNode()</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        node = self.cache.get(key, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        self._move_to_head(node)</span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        node = self.cache.get(key, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="comment"># 该节点不存在，新建一个</span></span><br><span class="line">            newNode = DLLNode()</span><br><span class="line">            newNode.key = key</span><br><span class="line">            newNode.value = value</span><br><span class="line">            self.cache[key] = newNode</span><br><span class="line">            self._add_node(newNode)</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.size &gt; self.capacity:</span><br><span class="line">                <span class="comment"># 链表中与字典中同时删除最近最少使用节点</span></span><br><span class="line">                tail = self._pop_tail()</span><br><span class="line">                <span class="keyword">del</span> self.cache[tail.key]</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 该节点已存在，更新值</span></span><br><span class="line">            node.value = value</span><br><span class="line">            self._move_to_head(node)</span><br></pre></td></tr></table></figure><h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><p>提交通过，效率比内置的有序字典略低，不过总体来说还可以。</p><p><img src="https://ae01.alicdn.com/kf/He611d9a629a14cb690263e362c554259E.png" alt="方法三"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法一是自主的想法，通过栈的特点记录使用的先后顺序，缺点是各种操作效率低下；方法二借助了别人的轮子，只需要懂相关的内容即可很快的解题，缺点是无法深入的了解其背后的实现原理；方法三跟方法二相反，自己造轮子，手写一个双向链表以及相关函数，虽然过程稍漫长，但是可以加深对双向链表的理解，可以学到更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LRU缓存机制&quot;&gt;&lt;a href=&quot;#LRU缓存机制&quot; class=&quot;headerlink&quot; title=&quot;LRU缓存机制&quot;&gt;&lt;/a&gt;LRU缓存机制&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;设计&lt;/strong&gt;的一道题，难
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的最近公共祖先</title>
    <link href="http://yoursite.com/2019/08/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/08/21/二叉树的最近公共祖先/</id>
    <published>2019-08-21T14:21:00.000Z</published>
    <updated>2019-08-23T13:18:24.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>中等</strong>，原链接<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大<strong>（一个节点也可以是它自己的祖先）</strong>。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><p><img src="https://ae01.alicdn.com/kf/Hc01401b1288f42fc832bd1cedf19c696D.png" alt="二叉搜索树例子"></p><p><strong>示例1 :</strong></p><blockquote><p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br>输出: 3<br>解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br>输出: 5<br>解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</p></blockquote><p><strong>说明：</strong></p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉树中。</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题与另一道题：求<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">二叉搜索树的最近公共祖先</a>差别只在本题是普通的二叉树。先讲讲与二叉搜索树相比求最近公共祖先的相同之处，与二叉搜索树求最近公共祖先的<a href="http://imooner.com/2019/08/20/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/" target="_blank" rel="noopener">方法一</a>解法类似，我们可以先分别找两个节点的祖先、再找它们的最近公共祖先；而不同之处就在于怎么找某个节点的祖先，二叉搜索树在查找的过程中便可以记录下祖先节点，而普通的二叉树不行，所以我们得换个思路，先求整棵树中的节点与其父节点的对应关系，再根据对应关系求某个节点的所有祖先节点。</p><p>求二叉树所有节点与其父节点的对应关系：</p><ul><li>新建一个字典以存储节点间的关系，值是键的直接父节点，默认根节点父节点为空</li><li>以深度优先算法递归求得所有节点间的父子关系</li></ul><p>求二叉树中某一节点的所有祖先：</p><ul><li>从该节点开始，只要当前节点不为空，则加入祖先节点列表中，即倒序添加</li><li>然后根据上述父子关系字典得到当前节点的父节点，循环添加直到当前节点为空</li><li>需注意返回的祖先节点列表中顺序是以该节点本身为首、根节点为尾</li></ul><p>求最近公共祖先：</p><ul><li>我们获得两个节点的祖先列表后，经过观察发现它们的最近公共祖先有如下特点：<strong>同时存在于两个祖先列表中并且位置尽可能的靠后</strong></li><li>由于两个祖先列表长度可能不同，我们从更长的一个祖先列表开始，依次取出其中的值，再判断是否存在于另外一个较短的祖先列表中，是则表明该节点值为最近公共祖先，返回即可。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="comment"># 默认根节点的父节点为空</span></span><br><span class="line">        ancestor = &#123;root: <span class="literal">None</span>&#125;</span><br><span class="line">        p_ancestor = []</span><br><span class="line">        q_ancestor = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取以该节点为根的二叉树所有节点与其父节点的对应关系</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">allAncestor</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    ancestor[node.left] = node</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    ancestor[node.right] = node</span><br><span class="line">                allAncestor(node.left)</span><br><span class="line">                allAncestor(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回某一节点的所有祖先节点，注意是倒序添加的</span></span><br><span class="line">        <span class="comment"># 第一个为节点本身，最后一个为根节点</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nodeAncestor</span><span class="params">(node)</span>:</span></span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                temp.append(node)</span><br><span class="line">                node = ancestor.get(node)</span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">        allAncestor(root)</span><br><span class="line">        p_ancestor = nodeAncestor(p)</span><br><span class="line">        q_ancestor = nodeAncestor(q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(p_ancestor) &gt; len(q_ancestor):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交虽然通过，但似乎无论从时间上还是空间上来说效率都不是很高，时间上主要是因为每个步骤都需要一次循环，三个步骤即三个循环，有一点繁琐了；空间上则是因为需要存储节点间的父子关系，p、q节点的祖先节点以及中间的各种临时变量。整体来说还有很多需要改进的地方，需要另外想一个算法去解决这个问题。</p><p><img src="https://ae01.alicdn.com/kf/Hb2e86e1ad1c5420eae4018bd81b38564R.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>采用递归方式遍历二叉树，同时不断用真假标记当前节点的子树中有无p、q节点，当某个节点的左右子树都为真时即表示该节点为最近公共祖先。当然有可能该节点即为p或q节点，此时只需要该节点为真，加上任一子树为真即可。具体分析参见<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetcod/" target="_blank" rel="noopener">官方题解方法一</a>，详细过程如下：</p><ul><li>从根节点开始递归遍历，每个节点有left, right, mid三个标识，分别表示左右子树是否含p或q节点以及当前节点是否为p、q节点</li><li>如果当前节点为p或q节点，令mid标识为真，且继续遍历当前节点的左右子节点</li><li>如果当前节点左右子节点中任一标识为真，即表示p或q节点在当前节点的子树中</li><li>只要left、right、mid标识中任一标识为真即向父节点返回真，表示找到了p或q节点；如果直到叶子节点还未找到p、q节点，返回假</li><li>在遍历的任一节点上，如果left、right、mid中任意两个标识为真，即表示该节点为最近公共祖先</li></ul><p>参见下图寻找9和11的最近公共祖先：</p><p><img src="https://ae01.alicdn.com/kf/Haef6a112202941a987260e13f9d2eab5i.png" alt="方法二例子"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        self.res = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recurse_tree</span><span class="params">(current_node)</span>:</span></span><br><span class="line">            <span class="comment"># 叶子节点返回假</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> current_node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 左中右三个标识的真假判定</span></span><br><span class="line">            left = recurse_tree(current_node.left)</span><br><span class="line">            right = recurse_tree(current_node.right)</span><br><span class="line">            mid = current_node == p <span class="keyword">or</span> current_node == q</span><br><span class="line">            <span class="comment"># 最近公共祖先是否为当前节点</span></span><br><span class="line">            <span class="keyword">if</span> left + mid + right &gt;= <span class="number">2</span>:</span><br><span class="line">                self.res = current_node</span><br><span class="line">            <span class="keyword">return</span> left <span class="keyword">or</span> mid <span class="keyword">or</span> right</span><br><span class="line"></span><br><span class="line">        recurse_tree(root)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p>时间消耗上来说还行，但是明显还是有所不足的，因为在递归的过程中即可能找到了最近公共祖先，但是总会把所有节点访问一遍，并设置三个标识的值，实际上在找到了最近公共祖先节点后的递归遍历都是没必要的，不但浪费了时间还浪费了空间。可以参见<a href="http://imooner.com/2019/08/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/" target="_blank" rel="noopener">二叉搜索树中第K小的元素</a>的方法二，在递归中采用了生成器强行中断了不必要的递归操作。但是由于题目不同，这道题似乎不好采用相同方式中断递归的执行，目前还未想到好的方式去解决这个问题。</p><p><img src="https://ae01.alicdn.com/kf/H31369ba006df42b9bfb81a1b4fff6d68V.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法一主要是根据二叉搜索树求最近公共祖先的方法一演变而来，思路大致相同，但是没有利用好二叉树本身的结构特点，这个算法也不是特别巧妙，只能说能够解题。方法二则采用了常用的递归方式，巧妙之处在于怎么运用标识的手段，在递归的过程中找到题解并记录下来，虽然也有不足，但是较方法一而言思路和代码都更简洁一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树的最近公共祖先&quot;&gt;&lt;a href=&quot;#二叉树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最近公共祖先&quot;&gt;&lt;/a&gt;二叉树的最近公共祖先&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;strong&gt;树&lt;/st
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的最近公共祖先</title>
    <link href="http://yoursite.com/2019/08/20/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/08/20/二叉搜索树的最近公共祖先/</id>
    <published>2019-08-20T13:23:00.000Z</published>
    <updated>2019-08-20T13:23:56.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h1><p>属于leetcode里腾讯精选练习（50）里面关于<strong>树</strong>的一道题，难度为<strong>简单</strong>，原链接<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/</a> 。（使用<strong>python3</strong>解决）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大<strong>（一个节点也可以是它自己的祖先）</strong>。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><img src="https://ae01.alicdn.com/kf/H9e36055b770243d38f139203d3807debE.png" alt="二叉搜索树例子"></p><p><strong>示例1 :</strong></p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>输出: 6<br>解释: 节点 2 和节点 8 的最近公共祖先是 6。</p></blockquote><p><strong>示例2 :</strong></p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br>输出: 2<br>解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</p></blockquote><p><strong>说明：</strong></p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于这道题的要求，我们可以分解为先分别找两个节点的祖先、再找它们的最近公共祖先。</p><p>求二叉搜索树中某一节点的所有祖先：</p><ul><li>由于我们已知该节点的值，所以我们可以根据该值在二叉搜索树进行查找</li><li>由于二叉搜索树的特性，我们在查找过程中比较的每一个节点都是其祖先节点，所以我们每比较一个节点便将该节点值加入祖先节点列表中</li><li>注意每个节点也是它自己的祖先，所以在二叉树中查找完后还需在祖先节点列表中加入该节点本身</li></ul><p>求最近公共祖先：</p><ul><li>我们获得两个节点的祖先列表后，经过观察发现它们的最近公共祖先有如下特点：<strong>同时存在于两个祖先列表中并且位置尽可能的靠后</strong></li><li>由于两个祖先列表长度可能不同，我们从更长的一个祖先列表开始，倒序依次取出其中的值，再判断是否存在于另外一个较短的祖先列表中，是则表明该节点值为最近公共祖先</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        result = TreeNode(<span class="number">0</span>)</span><br><span class="line">        p_ancestor = []</span><br><span class="line">        q_ancestor = []</span><br><span class="line">        p_ancestor = self.search(root, p)</span><br><span class="line">        q_ancestor = self.search(root, q)</span><br><span class="line">        <span class="comment"># 从祖先节点多的那个节点开始，倒序依次获取其祖先值</span></span><br><span class="line">        <span class="comment"># 再判断是否存在于另一个节点的祖先列表中，如果在即表明该节点为最近公共祖先节点</span></span><br><span class="line">        <span class="keyword">if</span> len(p_ancestor) &gt; len(q_ancestor):</span><br><span class="line">            p_ancestor.reverse()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                    result.val = i</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q_ancestor.reverse()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> q_ancestor:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> p_ancestor:</span><br><span class="line">                    result.val = i</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 辅助函数，用于求某节点的所有祖先节点值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, root, key)</span>:</span></span><br><span class="line">        ancestor = []</span><br><span class="line">        <span class="keyword">while</span> key.val != root.val:</span><br><span class="line">            <span class="keyword">if</span> key.val &lt; root.val:</span><br><span class="line">                ancestor.append(root.val)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ancestor.append(root.val)</span><br><span class="line">                root = root.right</span><br><span class="line">        ancestor.append(key.val)</span><br><span class="line">        <span class="keyword">return</span> ancestor</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H358e59b6276f412ab093097e74cdb4e57.png" alt="方法一提交"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>经过仔细观察，我们还可以发现最近公共祖先的另外的特点：</p><ul><li>p、q两个节点分别位于最近公共祖先节点的左右子树中，即最近公共祖先节点值在p、q节点值之间</li><li>如果p就是最近公共祖先，则q节点在p节点的左右任一子树中</li><li>如果q就是最近公共祖先，则p节点在q节点的左右任一子树中</li></ul><p>如上，再根据二叉搜索树节点间的大小关系，我们便可以知道<strong>最近公共祖先节点的值位于q、p两节点的值之间，且可以取等</strong>。所以我们从根节点开始依次比较当前节点值于q、p节点值的关系，如果当前节点值大于q、p节点值，则令当前节点更新为其左节点，再进行比较；反之小于的话就为右节点，直到满足当前节点值大小位于q、p两节点的值之间或者与其中一个相等，该节点即为最近公共祖先节点。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            <span class="keyword">if</span> root.val &gt; p.val <span class="keyword">and</span> root.val &gt; q.val:</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">elif</span> root.val &lt; p.val <span class="keyword">and</span> root.val &lt; q.val:</span><br><span class="line">                root = root.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><p><img src="https://ae01.alicdn.com/kf/H9a7cee30b974497f8f10a1437850f4615.png" alt="方法二提交"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题从总体上来说不难，综合二叉搜索树的结构以及最近公共祖先的特点即可得到解题的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉搜索树的最近公共祖先&quot;&gt;&lt;a href=&quot;#二叉搜索树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树的最近公共祖先&quot;&gt;&lt;/a&gt;二叉搜索树的最近公共祖先&lt;/h1&gt;&lt;p&gt;属于leetcode里腾讯精选练习（50）里面关于&lt;stro
      
    
    </summary>
    
      <category term="腾讯精选练习" scheme="http://yoursite.com/categories/%E8%85%BE%E8%AE%AF%E7%B2%BE%E9%80%89%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
